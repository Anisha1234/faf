#!/usr/bin/python
# Copyright (C) 2012 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import logging
import btparser
import sys

component_blacklist = set(["glibc", "glib2", "?"])
dedup_user_account = "abrt-bot@fedoraproject.org"

action_id = 1

def count_dedup_comments(bug):
    # Count comments made by the dedup user
    result = 0
    for comment_id in bug.comments:
        comment = pyfaf.run.cache_get("rhbz-comment", comment_id)
        if comment and comment.author_id in dedup_user_ids and comment.type != "HAS_DUPLICATE":
            result += 1
    return result

def add_action(cluster_id, bug, name, value):
    if count_dedup_comments(bug) > 0:
        logging.info("Skipping action {0}({1}) for {2}".format(name, value, bug.id))
        return

    global action_id
    action = pyfaf.cache.rhbz_action.RhbzAction()
    logging.info("Adding action {0}({1}) for {2}".format(name, value, bug.id))

    action.id = action_id
    action.action = name
    action.cluster_id = cluster_id
    action.bug_id = bug.id
    action.bug_last_change_time = bug.last_change_time
    action.value = value
    if not cmdline_args.dry_run:
        pyfaf.run.cache_add(action, overwrite=True, target_name="rhbz-action")
    action_id += 1

def get_common_components(components_lists):
    # Find the components which are in a majority of the components lists
    components_sets = [set(l) for l in components_lists]
    all_comps = set()

    for comps in components_sets:
        all_comps |= comps

    result = set()

    # Return set of components which are in at least 80% of the sets
    for comp in all_comps:
        x = filter(lambda comps: comp in comps, components_sets)
        if len(x) > 8 * len(components_sets) / 10:
            result.add(comp)

    return result

def get_ordered_components(common_components, components_lists):
    # Keep only common components in the lists and uniqify them
    lists = []
    for comps in components_lists:
        l = []
        for comp in comps:
            if comp not in common_components:
                continue
            if len(l) == 0 or l[-1] != comp:
                l.append(comp)
        lists.append(l)

    # Sort the common components by average maximum index in the lists

    for l in lists:
        l.reverse()

    comp_avg_level = []
    for comp in common_components:
        lnum = 0
        lsum = 0
        for l in lists:
            if comp not in l:
                continue
            lnum += 1
            lsum += len(l) - l.index(comp)
        comp_avg_level.append([comp, float(lsum) / lnum if lnum > 0 else 0.0])

    comp_avg_level.sort(key=lambda (comp, avg): avg, reverse=True)
    logging.debug("Common component levels: {0}".format(comp_avg_level))

    return [comp for (comp, avg) in comp_avg_level]

def component_lists_match(components1, components2):
    for (comp1, comp2) in zip(components1, components2):
        if comp1 != comp2 and comp1 != None:
            return False
    return True

def filter_components_lists(components_lists):
    # Remove duplicates first
    lists = []
    for l in components_lists:
        if l not in lists:
            lists.append(l)

    # Remove lists which are substrings of other list, None matches anything
    result = []
    for l1 in lists:
        for l2 in lists:
            if len(l1) > len(l2) or l1 == l2:
                continue
            for start in xrange(len(l2) - len(l1) + 1):
                if component_lists_match(l1, l2[start:start + len(l1)]):
                    break
            else:
                continue
            break
        else:
            result.append(l1)

    return result

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_parser.add_argument("--cut-id", default=1, help="Prepare actions based on this cut id (default 1)")
cmdline_parser.add_argument("--cluster-id", nargs="+", help="Process only specified clusters");
cmdline_parser.add_argument("--print-cuts", action="store_true", default=False, help="Print cuts stored in DB")
cmdline_parser.add_argument("-n", "--dry-run", action="store_true", default=False,
        help="Only print actions");
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.cache.Database()

if cmdline_args.print_cuts:
    db.execute("SELECT DISTINCT cut_id, distance, level FROM rhbz_cluster ORDER BY id")
    for row in db.fetchall():
        print "id: {0} distance: {1} level: {2}".format(*row)
    sys.exit(0)

logging.info("Searching DB for dedup user's bugzilla ID.")
db.execute("SELECT id FROM rhbz_user WHERE email = '{0}'".format(dedup_user_account))
dedup_user_ids = set([row[0] for row in db.fetchall()])
logging.debug("Found user IDs: {0}.".format(list(dedup_user_ids)))
assert len(dedup_user_ids) > 0

cut_id = cmdline_args.cut_id

if cmdline_args.cluster_id:
    cluster_ids = cmdline_args.cluster_id
else:
    logging.info("Searching DB for stored clusters (cut_id = {0}).".format(cut_id))
    db.execute("SELECT id FROM rhbz_cluster WHERE cut_id = {0}".format(cut_id))
    cluster_ids = [row[0] for row in db.fetchall()]

clusters = []
for cluster_id in cluster_ids:
    rhbz_cluster = pyfaf.run.cache_get("rhbz-cluster", cluster_id)
    clusters.append((rhbz_cluster.id, rhbz_cluster.bugs))

logging.info("Found {0} clusters with {1} bugs.".format(len(clusters),
    sum(len(cluster[1]) for cluster in clusters)))

logging.info("Loading relevant bugs.")

# bug_id -> bug
bugs = dict()
for bug_id in (bug_id for (i, cluster) in clusters for bug_id in cluster):
    bugs[bug_id] = pyfaf.run.cache_get("rhbz-bug", bug_id)

if not cmdline_args.dry_run:
    logging.info("Removing old actions.")
    pyfaf.run.target_from_name("rhbz-action").remove_all()

for (i, (cluster_id, cluster)) in enumerate(clusters):
    logging.info("Inspecting cluster {0}/{1}: id: {2}.".format(i + 1, len(clusters), cluster_id))

    # Ingore non-Fedora bugs
    cluster = [bug_id for bug_id in cluster if bugs[bug_id].product == "Fedora"]

    open_bugs = [bug_id for bug_id in cluster if bugs[bug_id].status != "CLOSED" ]

    for bug_id in cluster:
        bug = bugs[bug_id]
        logging.debug("Bug: {0} Comments: {2:2} ChangeTime: {3} Component: {4:20} CC: {5:2} Status: {1}" \
                .format(bug_id, str(bug.status) + ":" + str(bug.resolution), \
                len(bug.comments), bug.last_change_time, bug.component, len(bug.cc)))

    if len(open_bugs) < 2:
        if len(open_bugs) == 1 and len(cluster) > 1:
            # Add comment listing all bugs in the cluster, but only if they
            # are not in the same component and they are not all closed as
            # duplicates of the open bug
            all_same_comp = True
            all_dups = True

            for bug_id in cluster:
                if bug_id != open_bugs[0]:
                    if bugs[bug_id].component != bugs[open_bugs[0]].component:
                        all_same_comp = False
                    if bugs[bug_id].resolution != "DUPLICATE" or bugs[bug_id].resolution_dup_id != open_bugs[0]:
                        all_dups = False

            if not all_same_comp and not all_dups:
                add_action(cluster_id, bugs[open_bugs[0]], "SUGGEST_DUPLICATE", "?")

        logging.info("Fewer than two open bugs, skipping cluster.")
        continue

    dedup_comments = dict()
    for bug_id in open_bugs:
        dedup_comments[bug_id] = count_dedup_comments(bugs[bug_id])

    # Sort bugs by number of our comments, number of CCs and last modify time
    open_bugs.sort(key=lambda bug_id: bugs[bug_id].last_change_time, reverse=True)
    open_bugs.sort(key=lambda bug_id: len(bugs[bug_id].cc), reverse=True)
    open_bugs.sort(key=lambda bug_id: dedup_comments[bug_id], reverse=True)

    # Close bugs as dups of the first one
    for bug_id in open_bugs[1:]:
        add_action(cluster_id, bugs[bug_id], "CLOSE_DUPLICATE", str(open_bugs[0]))

    # Find original component for executables
    original_components = []
    for bug_id in cluster:
        original_component = pyfaf.btserver.get_original_component(db, bugs[bug_id])
        # Assume it wasn't reassigned yet
        if original_component == None:
            original_component = bugs[bug_id].component
        original_components.append(str(original_component))

    if len(set(original_components)) <= 1:
        logging.info("All bugs originate from the same component, not reassigning.")
        continue

    # Get lists of components from backtraces
    components_lists = []
    for (bug_id, original_component) in zip(cluster, original_components):
        components = pyfaf.btserver.get_frame_components(db, bug_id, uniq=True)

        # Add the original component to the list
        components.append(original_component)
        components_lists.append(components)

        logging.debug("Components for {0}: {1}".format(bug_id, components))

    components_lists = filter_components_lists(components_lists)

    common_components = get_common_components(components_lists)

    if len(common_components) == 0:
        logging.info("Could not find common component, not reassigning.")
        continue

    ordered_components = get_ordered_components(common_components, components_lists)

    if bugs[open_bugs[0]].component in ordered_components:
        logging.info("Already assigned to one of {0}.".format(ordered_components))
        continue

    # Replace None with "?"
    ordered_components = [comp if comp else "?" for comp in ordered_components]

    if ordered_components[0] in component_blacklist:
        if len(ordered_components) == 1 and ordered_components[0] == "?":
            logging.info("Could not find known common component, not reassigning.")
            continue

        # Add comment listing common components
        add_action(cluster_id, bugs[open_bugs[0]], "SUGGEST_COMPONENT", " ".join(ordered_components))
    else:
        # Reassign to the first component in the list
        add_action(cluster_id, bugs[open_bugs[0]], "CHANGE_COMPONENT", " ".join(ordered_components))


db.close()
