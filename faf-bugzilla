#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import sys
import shlex

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Bugzilla client interface.")
cmdline_parser.add_argument("--user", help="Bugzilla user name",
                            default=pyfaf.run.config_get("Bugzilla.User"))
cmdline_parser.add_argument("--password", help="Bugzilla user password",
                            default=pyfaf.run.config_get("Bugzilla.Password"))
cmdline_parser.add_argument("--url", help="Bugzilla URL",
                            default=pyfaf.run.config_get("Bugzilla.URL"))
cmdline_args = cmdline_parser.parse_args()
if cmdline_args.user is None:
    cmdline_parser.error("Bugzilla user name is required.\nTry {0} --help".format(sys.argv[0]))
if cmdline_args.password is None:
    cmdline_parser.error("Bugzilla password is required.\nTry {0} --help".format(sys.argv[0]))
if cmdline_args.url is None:
    cmdline_parser.error("Bugzilla URL is required.\nTry {0} --help".format(sys.argv[0]))

bugzilla = pyfaf.bugzilla.Bugzilla(cmdline_args.url)
bugzilla.login(cmdline_args.user, cmdline_args.password)

def positional_argument(argv):
    if len(argv) < 1:
        sys.stdout.write("< error: missing positional argument\n")
        raise Exception("")
    return argv.pop(0)

def boolean_argument(argv, name):
    for arg in argv:
        if arg == name:
            argv.remove(arg)
            return True
    return False

def string_argument(argv, name):
    ret = False
    for arg in argv[:]:
        if ret:
            argv.remove(arg)
            return arg
        if arg == name:
            argv.remove(arg)
            ret = True
    if ret:
        sys.stdout.write("< error: missing value for option '{0}\n".format(name))
        raise Exception("")
    return None

def excessive_arguments(argv):
    if len(argv) > 0:
        sys.stdout.write("< error: unknown argument '{0}'\n".format(argv[0]))
        raise Exception("")

state = None
new_bug_raw = None
new_bug_product = None
new_bug_version = None
new_bug_component = None
new_bug_summary = None
new_bug_description = []
new_bug_depends_on = None
new_bug_blocks = None

def parse_line(line):
    """
    Throws exception.
    """
    global state, new_bug_description, new_bug_raw, new_bug_product, new_bug_version
    global new_bug_component, new_bug_summary, new_bug_depends_on, new_bug_blocks
    if state is not None:
        if state == "new-bug":
            if line.startswith("< ok"):
                state = None
                bugzilla.new_bug(raw=new_bug_raw,
                                 product=new_bug_product,
                                 version=new_bug_version,
                                 component=new_bug_component,
                                 summary=new_bug_summary,
                                 description="".join(new_bug_description),
                                 depends_on=new_bug_depends_on,
                                 blocks=new_bug_blocks)
            else:
                new_bug_description.append(line)
            return
        sys.stderr.write("Invalid internal state '{0}'.".format(state))
        exit(1)

    argv = shlex.split(line)
    # Ignore empty lines
    if len(argv) == 0:
        return
    command = argv[0].lower()
    argv = argv[1:]
    if command == "bug":
        bug_id = positional_argument(argv)
        raw = boolean_argument(argv, "--raw")
        with_comments = boolean_argument(argv, "--with-comments")
        with_attachments = boolean_argument(argv, "--with-attachments")
        excessive_arguments(argv)
        result = bugzilla.bug(bug_id,
                              raw=raw,
                              with_comments=with_comments,
                              with_attachments=with_attachments)
        sys.stdout.write("< bug {0}\n".format(result[0].id))
        sys.stdout.write(pyfaf.cache.rhbz_bug.parser.to_text(result[0]).encode('utf-8'))
        sys.stdout.write("< ok\n")
        result.pop(0)

        if with_comments:
            for comment in result[0]:
                sys.stdout.write("< comment {0}\n".format(comment.id))
                sys.stdout.write(pyfaf.cache.rhbz_comment.parser.to_text(comment).encode('utf-8'))
                sys.stdout.write("< ok\n")
            result.pop(0)

        if with_attachments:
            for attachment in result[0]:
                sys.stdout.write("< attachment {0}\n".format(attachment.id))
                sys.stdout.write(pyfaf.cache.rhbz_attachment.parser.to_text(attachment).encode('utf-8'))
                sys.stdout.write("< ok\n")
            result.pop(0)

        if with_comments or with_attachments:
            sys.stdout.write("< ok all comments and attachments\n")

    elif command == "bug-fields":
        excessive_arguments(argv)
        pyfaf.bugzilla.bug_fields()
    elif command == "comment":
        comment_id = positional_argument(argv)
        raw = boolean_argument(argv, "--raw")
        excessive_arguments(argv)
        comment = bugzilla.comment(comment_id, raw=raw)
        sys.stdout.write("< comment {0}\n".format(comment.id))
        sys.stdout.write(pyfaf.cache.rhbz_comment.parser.to_text(comment).encode('utf-8'))
        sys.stdout.write("< ok\n")

    elif command == "user":
        user_id = positional_argument(argv)
        raw = boolean_argument(argv, "--raw")
        excessive_arguments(argv)
        user = pyfaf.cache.user(user_id, raw=raw)
        sys.stdout.write("< user {0}\n".format(user.id))
        sys.stdout.write(pyfaf.cache.rhbz_user.parser.to_text(user).encode('utf-8'))
        sys.stdout.write("< ok\n")
    elif command == "attachment":
        attachment_id = positional_argument(argv)
        raw = boolean_argument(argv, "--raw")
        excessive_arguments(argv)
        attachment = bugzilla.attachment(attachment_id,
                                         raw=raw)
        sys.stdout.write("< attachment {0}\n".format(attachment.id))
        sys.stdout.write(pyfaf.cache.rhbz_attachment.parser.to_text(attachment).encode('utf-8'))
        sys.stdout.write("< ok\n")
    elif command == "search-bugs":
        raw = boolean_argument(argv, "--raw")
        whiteboard = string_argument(argv, "--whiteboard")
        whiteboard_type = string_argument(argv, "--whiteboard-type")
        order = string_argument(argv, "--order")
        chfield_from = string_argument(argv, "--chfield-from")
        chfield_to = string_argument(argv, "--chfield-to")
        chfield = string_argument(argv, "--chfield")
        product = string_argument(argv, "--product")
        product_version = string_argument(argv, "--product-version")
        output_format = string_argument(argv, "--output-format")
        excessive_arguments(argv)
        bugzilla.search_bugs(raw=raw,
                             whiteboard=whiteboard,
                             whiteboard_type=whiteboard_type,
                             order=order,
                             chfield_from=chfield_from,
                             chfield_to=chfield_to,
                             chfield=chfield,
                             product=product,
                             product_version=product_version,
                             output_format=output_format)
    elif command == "new-bug":
        new_bug_raw = boolean_argument(argv, "--raw")
        new_bug_product = string_argument(argv, "--product")
        new_bug_version = string_argument(argv, "--version")
        new_bug_component = string_argument(argv, "--component")
        new_bug_summary = string_argument(argv, "--summary")
        new_bug_depends_on = string_argument(argv, "--depends-on")
        new_bug_blocks = string_argument(argv, "--blocks")
        new_bug_description = []
        excessive_arguments(argv)
        state = command
    else:
        sys.stdout.write("< error: invalid command '{0}'\n".format(command))

# Command line parsing
while True:
    line = sys.stdin.readline()
    if not line:
        break
    try:
        parse_line(line)
    except Exception as ex:
        if len(str(ex)) > 0:
            sys.stdout.write("< error: {0}\n".format(ex))
    sys.stdout.flush()
