#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import subprocess
import sys
import logging

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Pull attachments from Bugzilla to local cache.")
cmdline_parser.add_argument("--user", help="Bugzilla user name")
cmdline_parser.add_argument("--password", help="Bugzilla user password")
cmdline_parser.add_argument("--url", help="Bugzilla URL")
cmdline_parser.add_argument("--only-missing", action="store_true", default=False, help="Skip attachments already stored in the cache")
cmdline_args = cmdline_parser.parse_args()

# Build the list of required attachments
logging.info("Searching local cache for bugs.")
bug_id_list = pyfaf.run.cache_list_id("rhbz-bug")
logging.info("Searching {0} local bugs for attachments.".format(len(bug_id_list)))
required_attachments = set()
offset = 0
for bug_id in bug_id_list:
    offset += 1
    logging.debug("[{0}/{1}] Processing bug #{2}.".format(offset, len(bug_id_list), bug_id))
    bug = pyfaf.run.cache_get("rhbz-bug", bug_id)
    required_attachments |= set([int(a) for a in bug.attachments])
logging.info("Found {0} attachments in local cache bugs.".format(len(required_attachments)))

# Build the list of attachments present in the cache
logging.info("Searching local cache for attachments.")
cache_attachments, cache_mtimes = pyfaf.run.cache_list_id_mtime("rhbz-attachment")
logging.info("Found {0} attachments in local cache.".format(len(cache_attachments)))

# Build ordered list for attachment download/update
# Remove items from cache_attachments which are not present in required_attachments.
cache_attachments = set(cache_attachments)
cache_attachments &= required_attachments
logging.info("Found {0} bug-related attachments in local cache.".format(len(cache_attachments)))
# Remove items from required_attachments, which are present in cache_attachments
required_attachments -= cache_attachments
# The final, ordered list
# TODO: limit the list (the cache_attachments part) to include only
# attachments which have newer LastChangedTime in Bugzilla than in the cache.
update_attachments = list(required_attachments)
if not cmdline_args.only_missing:
     update_attachments.extend(sorted(cache_attachments, key=lambda x:cache_mtimes[x]))

bz_args = ["faf-bugzilla"]
if cmdline_args.user:
    bz_args.append("--user", cmdline_args.user)
if cmdline_args.password:
    bz_args.append("--password", cmdline_args.password)
if cmdline_args.url:
    bz_args.append("--url", cmdline_args.url)
bz_proc = subprocess.Popen(bz_args, stdin=subprocess.PIPE,
                           stdout=subprocess.PIPE)

offset = 0
for attachment_id in update_attachments:
    offset += 1
    logging.info("[{0}/{1}] Downloading attachment #{2}.".format(offset, len(update_attachments), attachment_id))
    if attachment_id in cache_mtimes:
        logging.debug("  - cache entry mtime: {0}".format(cache_mtimes[attachment_id]))
    bz_proc.stdin.write("attachment {0}\n".format(attachment_id))
    bz_proc.stdin.flush()
    line = bz_proc.stdout.readline()
    if not line.startswith("< attachment {0}".format(attachment_id)):
        sys.stderr.write("Failed to get attachment #{0} from Bugzilla.\n".format(attachment_id))
        exit(1)
    lines = []
    while not line.startswith("< ok"):
        line = bz_proc.stdout.readline()
        if not line.startswith("< ok"):
            lines.append(line)
    pyfaf.run.cache_add_text("".join(lines), attachment_id, "rhbz-attachment", overwrite=True)
bz_proc.stdin.close()
bz_proc.wait()
