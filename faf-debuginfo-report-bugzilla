#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Releases.getReleaseComponents to get components filed to 6.2, the
# rest should be filed to 6.3
import pyfaf
import sys
import rpm
import rpmUtils.miscutils
import subprocess
import logging

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Report debuginfo issues to Bugzilla.")
cmdline_parser.add_argument("os_prefix")
cmdline_parser.add_argument("bugzilla_url",
                            help="location of Bugzilla XML-RPC interface (usually https://baseurl/xmlrpc.cgi)")
cmdline_parser.add_argument("bugzilla_product",
                            help="operating system name used in the product field in Bugzilla.")
cmdline_parser.add_argument("bugzilla_version",
                            help="product version")
cmdline_parser.add_argument("tracker_bug_number",
                            help="id of a tracker bug for all debuginfo issues")
cmdline_parser.add_argument("--dry-run", action="store_true",
                            default=False,
                            help="print bugs this tool would create but not create them in Bugzilla")
cmdline_args = cmdline_parser.parse_args()

# Load report ids from local cache
logging.info("Loading debuginfo report list from {0}-debuginfo-report.".format(cmdline_args.os_prefix))
debuginfo_report_id_list = pyfaf.run.cache_list_id("{0}-debuginfo-report".format(cmdline_args.os_prefix))
logging.info("  - found {0} reports".format(len(debuginfo_report_id_list)))

class Bug:
    def __init__(self):
        # Bug summary/caption
        self.summary = None
        # Bug component
        self.component = None
        # Associated build from faf cache
        self.build = None
        # Multiline description of bug.
        self.description = None

class IssueType:
    def __init__(self, issues, build):
        self.issues = issues
        self.build = build
    def bug_summary(self):
        """Bug summary when just this single issue is filed in a
        bug."""
        raise "Not implemented"
    def bug_text_caption(self):
        """One line header for bug text when multiple issues are
        filed."""
        raise "Not implemented"
    def bug_text_explanation(self):
        """Explain in depth what the issue is about, and some example
        how to investigate it and check that it is fixed."""
        raise "Not implemented"
    def format_issues(self):
        if len(self.issues) <= 1:
            return "\n".join(self.format_issue(self.issues[0])) + "\n"

        result = []
        for issue in self.issues:
            issue_entries = self.format_issue(issue)
            issue_entries[0] = "- " + issue_entries[0]
            result.append("\n  ".join(issue_entries))
        return "\n".join(result) + "\n"
    def format_issue(self, issue):
        raise "Not implemented"

class SymlinksPointingToAnotherPath(IssueType):
    def __init__(self, issues, build):
        IssueType.__init__(self, issues, build)

    def bug_summary(self):
        link = "links" if len(self.issues) > 1 else "link"
        return "Invalid symbolic {0} in debuginfo package".format(link)

    def bug_text_caption(self):
        link = "links" if len(self.issues) > 1 else "link"
        return "Debuginfo symbolic {0} pointing to another path".format(link)

    def bug_text_explanation(self):
        count = "one"
        link = "link"
        do = "does"
        if len(self.issues) > 1:
            if len(self.issues) == 2:
                count = "two"
            elif len(self.issues) == 3:
                count = "three"
            elif len(self.issues) == 4:
                count = "four"
            else:
                count = len(self.issues)
            link = "links"
            do = "do"
        message = "Debuginfo package includes a symbolic link to each binary that has the debugging symbols stored there. For {0}, {1} symbolic {2} {3} not point to the right binary, and that makes it impossible to use build ids from a coredump to get a list of packages required by it. Usually, this is a packaging error caused usually by placing identical binary into several locations instead of creating a symlink. If one copy of the binary is SUID/SGID, it is not possible to use symlink. You can add a dependency on bug #727872 and rebuild {0} when that bug is fixed.\n\n".format(self.build.name, count, link, do)
        message += self.format_issues()
        message += "\n"
        message += "This issue has been solved in Fedora by /usr/lib/rpm/find-debuginfo.sh creating additional symlinks for identical binaries. However, symlinks should be used instead of duplicating a binary when possible.\n"
        return message

    def format_issue(self, issue):
        message = []
        message.append("affected binary: {0}".format(issue.path))
        message.append("affected package: {0}".format(issue.package))
        message.append("referenced binary: {0}".format(issue.symlink_path))
        if issue.symlink_path_package is not None:
            message.append("referenced package: {0}".format(issue.symlink_path_package))
        message.append("debuginfo symlink: {0}".format(issue.debuginfo_symlink_path))
        return message

class DebuginfoMissingForBinary(IssueType):
    def __init__(self, issues, build):
        IssueType.__init__(self, issues, build)

    def bug_summary(self):
        if len(self.issues) > 1:
            return "Debug files missing in debuginfo package for {0} binaries".format(len(self.issues))
        return "Debug file missing in debuginfo package for a binary"

    def bug_text_caption(self):
        return "Debuginfo missing for binaries"

    def bug_text_explanation(self):
        file = "A debuginfo file for a binary is"
        if len(self.issues) > 1:
            file = "Debuginfo files for some binaries are"
        message = "{0} not present in the debuginfo package. This might be caused by:\n".format(file)
        message += " - binary being compiled without debugging information\n"
        message += " - debugging information being removed from the binary by a build script\n"
        message += " - rpmbuild failing to extract debugging information from a binary in a buildroot because of permissions (eg. suid binaries, binaries without executable flag set)\n\n"

        if len(self.issues) > 1:
            message += "List of binaries without corresponding debuginfo file:\n"
        message += self.format_issues()

        message += "\n"
        message += "This issue can be investigated by using eu-readelf tool from the elfutils package. Use `eu-readelf --notes /path/to/binary` to get build ID of a binary. Then check that the debuginfo package does not contain /usr/lib/debug/.build-id/<aa>/<bbbbbbbb>, where <aa> are the first two chars of the build ID, and <bbbbbbbb> is the rest of it. It should be a symlink pointing back to the binary.\n"

        return message

    def format_issue(self, issue):
        message = []
        message.append("affected binary: {0}".format(issue.path))
        message.append("affected package: {0}".format(issue.package))
        if issue.stripped:
            message.append("binary doesn't contain debug sections (it was probably stripped)")
        else:
            message.append("binary contains debug sections (debuginfo script failed to find/strip it)")
        message.append("affected binary file mode: {0:o}".format(issue.mode))
        return message

class UnusedDebuginfo(IssueType):
    def __init__(self, issues, build):
        IssueType.__init__(self, issues, build)

    def bug_summary(self):
        file = "files" if len(self.issues) > 1 else "file"
        return "Unused debuginfo {0} in debuginfo package".format(file)

    def bug_text_caption(self):
        return "Unused debuginfo files"

    def bug_text_explanation(self):
        file = "several superfluous files" if len(self.issues) > 1 else "a superfluous file"
        message = "The debuginfo package contains {0} with debugging symbols. This is usually caused by using %exclude in package's spec file instead of deleting the unwanted binary from the build root. This is a low priority issue, unnecessary files cause no harm except wasted space.\n\n".format(file)
        message += self.format_issues()
        return message

    def format_issue(self, issue):
        message = []
        message.append("debuginfo path: {0}".format(issue.debuginfo_path))
        message.append("associated (missing) binary: {0}".format(issue.binary_path))
        message.append("wasted disk space: {0}".format(pyfaf.human_byte_count(issue.size)))
        return message

class MissingSourceFileAfterBuild(IssueType):
    def __init__(self, issues, build):
        IssueType.__init__(self, issues, build)

    def multiple_files(self):
        return len(self.issues) > 1 or \
            len(self.issues[0].debug_files) > 1 or \
            len(self.issues[0].debug_files[0].source_file_paths) > 1

    def bug_summary(self):
        f = "file"
        p = "package"
        if self.multiple_files():
            f = "files"
        if len(self.issues) > 1:
            p = "packages"
        return "Source {0} missing in debuginfo {1}".format(f, p)

    def bug_text_caption(self):
        return "Source file missing in debuginfo package"

    def bug_text_explanation(self):
        file = "A source file that was used by the compiler to generate a binary is"
        if self.multiple_files():
            file = "Multiple source files that were used by the compiler to generate a binary are"
        message = "{0} missing from the debuginfo package. This is usually caused by the build script creating temporary source files during the build and deleting them after usage, or by moving source files between directories. Missing source files in debuginfo packages make debugging of crashes more difficult.\n\n".format(file)
        message += self.format_issues()
        message += "\n"
        message += "Please consider changing the package build script (if that is the cause of this issue) to keep the source files on their compilation place, so rpmbuild can find them when generating debuginfo package.\n"
        return message

    def format_issue(self, issue):
        message = []
        message.append("debuginfo package: {0}".format(issue.package))
        for debug_file in issue.debug_files:
            message.append("  debuginfo file: {0}".format(debug_file.debug_path))
            for source_file_path in debug_file.source_file_paths:
                message.append("    missing source: {0}".format(source_file_path))
        return message

class MissingDebuginfoSymlink(IssueType):
    def __init__(self, issues, build):
        IssueType.__init__(self, issues, build)

    def bug_summary(self):
        link = "links" if len(self.issues) > 1 else "link"
        return "Missing symbolic {0} in debuginfo package".format(link)

    def bug_text_caption(self):
        return "Missing symlinks in debuginfo package"

    def bug_text_explanation(self):
        return self.format_issues()

    def format_issue(self, issue):
        message = []
        message.append("missing debuginfo symlink: {0}".format(issue.debuginfo_symlink))
        message.append("binary symlink: {0}".format(issue.binary_symlink))
        message.append("package: {0}".format(issue.package))
        return message

class DebugInfoSectionNotFoundInDebugFile(IssueType):
    def __init__(self, issues, build):
        IssueType.__init__(self, issues, build)
    def bug_summary(self):
        file = "debuginfo files" if len(self.issues) > 1 else "a debuginfo file"
        return "Failed to find the .debug_info section in {0}".format(file)

    def bug_text_caption(self):
        return "No .debug_info section in a debug file"

    def bug_text_explanation(self):
        message = "When a binary is compiled without gcc's -g option, no debugging information is generated and rpmbuild creates almost-empty debuginfo file, which cannot be used for debugging. Please fix the package build process to use $RPM_OPT_FLAGS, which include the -g option among others.\n\n"
        message += self.format_issues()
        message += "\n"
        message += "This issue can be investigated and tested by using eu-readelf tool from the elfutils package. Use `eu-readelf --section-headers /usr/lib/debug/usr/bin/<debuginfofile>.debug` to see if debuginfo file contains .debug_info section. It is supposed to be there.\n"
        return message

    def format_issue(self, issue):
        message = []
        message.append("path: {0}".format(issue.path))
        message.append("package: {0}".format(issue.package))
        return message

bug_list = []

# First create bug entry for every report.
index = 0
for report_id in debuginfo_report_id_list:
    index += 1
    logging.info("[{0}/{1}] Processing report #{2}.".format(index, len(debuginfo_report_id_list), report_id))
    report = pyfaf.run.cache_get("{0}-debuginfo-report".format(cmdline_args.os_prefix), report_id, parser_module=pyfaf.cache.debuginfo_report)

    # Check if the report contain at least some issue.
    PAIRS = [[report.symlinks_pointing_to_another_path, SymlinksPointingToAnotherPath],
             [report.debuginfo_missing_for_binary, DebuginfoMissingForBinary],
             [report.unused_debuginfo, UnusedDebuginfo],
             [report.missing_source_file_after_build, MissingSourceFileAfterBuild],
             [report.missing_debuginfo_symlink, MissingDebuginfoSymlink],
             [report.debug_info_section_not_found_in_debug_file, DebugInfoSectionNotFoundInDebugFile]]
    issue_type_count = len(filter(lambda i: len(i[0]) > 0, PAIRS))
    if issue_type_count == 0:
        logging.info("  - no issues worth filing to Bugzilla")
        continue

    # Some kinds of issues are not worth filing alone.
    if issue_type_count == 1:
        if len(report.unused_debuginfo) > 0:
            logging.info("  - skipping report with only unused debuginfo file, this is not important enough to file a bug")
            continue
        if len(report.missing_source_file_after_build) > 0:
            logging.info("  - skipping report with only missing source files, this is not important enough to file a bug")
            continue

    build = pyfaf.run.cache_get("{0}-koji-build".format(cmdline_args.os_prefix), report.id, parser_module=pyfaf.cache.koji_build)

    # compat- packages are not actively maintained, so we skip them
    if build.name.startswith("compat-"):
        logging.info("  - skipping compat package (not actively maintained)")
        continue

    issues = map(lambda i: i[1](i[0], build),
                 filter(lambda i: len(i[0]) > 0, PAIRS))

    bug = Bug()
    bug.component = build.name
    bug.build = build

    # Create good bug summary
    bug.summary = "Debuginfo package issues in {0}".format(build.name)
    if issue_type_count == 1:
        bug.summary = issues[0].bug_summary()

    # Create good bug message. Start with a header.
    message = ""
    if issue_type_count == 1:
        message += "A problem related to debuginfo was found in the {0} package. This issue "
    else:
        message += "Several problems related to debuginfo were found in the {0} package. These issues "
    message = message.format(build.nvr())
    message += "might affect crash analysis done by Automatic Bug Reporting Tool and its retrace server, and also prevent proper debugging of crashes via GDB.\n\n"

    if len(issues) == 1:
        message += issues[0].bug_text_explanation()
        message += "\n"
    else:
        for issue in issues:
            message += issue.bug_text_caption()
            message += "\n"
            message += "-" * len(issue.bug_text_caption())
            message += "\n"
            message += issue.bug_text_explanation()
            message += "\n"

    # A footer.
    message += "(This bug was detected and filed by a script.)\n"

    bug.description = message
    bug_list.append(bug)

# Catch entries which would be filed on the same component.
for bug1 in bug_list[:]:
    for bug2 in bug_list[:]:
        if bug1 != bug2 and bug1.component == bug2.component:
            logging.info("Duplicate builds found for {0}, removing the older one.".format(bug1.component))
            # return 1: a is newer than b; 0: a and b are the same version; -1: b is newer than a
            rc = rpm.labelCompare((str(bug1.build.epoch), str(bug1.build.version), str(bug1.build.release)),
                                  (str(bug2.build.epoch), str(bug2.build.version), str(bug2.build.release)))
            if rc == 0:
                sys.stderr.write("Same build was found twice.\n")
                exit(1)
            # delete bug associated with an older build
            if rc > 0:
                bug_list.remove(bug2)
            elif bug1 in bug_list:
                bug_list.remove(bug1)
                break

# Search for already reported bugs so we do not report something twice.
# TODO

# Create the bugs in Bugzilla.
bz_args = ["faf-bugzilla", "--url", cmdline_args.bugzilla_url]
bz_proc = subprocess.Popen(bz_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)

if cmdline_args.dry_run:
    sys.stdout.write("{0} bugs would be created.\n".format(len(bug_list)))
index = 0
for bug in bug_list:
    index += 1
    if cmdline_args.dry_run:
        sys.stdout.write("==================================================================\n")
        sys.stdout.write("Summary: {0}\n".format(bug.summary))
        sys.stdout.write("Component: {0}\n\n".format(bug.component))
        sys.stdout.write("Description:\n{0}\n\n".format(bug.description))
    else:
        logging.info("[{0}/{1}] Opening a new bug.".format(index, len(bug_list)))
        bz_proc.stdin.write("new-bug --product \"{0}\" --version \"{1}\"".format(cmdline_args.bugzilla_product, cmdline_args.bugzilla_version))
        bz_proc.stdin.write(" --component \"{0}\" --summary \"{1}\" --blocks \"{2}\"\n".format(bug.component, bug.summary, cmdline_args.tracker_bug_number))
        bz_proc.stdin.write(bug.description)
        bz_proc.stdin.write("\n< ok\n")
        bz_proc.stdin.flush()
        # Read response
        rbug = bz_proc.stdout.readline()
        if not rbug.startswith("< bug"):
            sys.stderr.write("Invalid response from Bugzilla: expected \"< bug\", received \"{0}\".\n".format(rbug))
            continue
        rbug_id = bz_proc.stdout.readline()
        if not rbug_id.startswith("Id:"):
            sys.stderr.write("Invalid response from Bugzilla: expected \"Id: xx\", received \"{0}\".\n".format(rbug_id))
            continue
        rok = bz_proc.stdout.readline()
        if not rok.startswith("< ok"):
            sys.stderr.write("Invalid response from Bugzilla: expected \"< ok\", received \"{0}\".\n".format(rok))
            continue
        logging.info("  - new bug id #{0}".format(rbug_id[3:].strip()))

bz_proc.stdin.close()
bz_proc.wait()
