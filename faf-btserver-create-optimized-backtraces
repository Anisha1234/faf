#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
# Copyright (C) 2011 Jan Smejda
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import os
import pyfaf
import subprocess
import logging

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_args = cmdline_parser.parse_args()

bug_ids = pyfaf.run.cache_list_id("rhbz-bug")
index = 0
for bug_id in bug_ids:
    index += 1
    logging.info("Checking {0}/{1} #{2}".format(index, len(bug_ids), bug_id))

    path = pyfaf.run.cache_get_path("rhbz-optimized-backtrace", bug_id,
                                    failure_allowed=True)
    if path is not None and os.path.isfile(path):
        logging.debug("Optimized backtrace exists")
        continue

    # Get the bug and its attachment
    bug = pyfaf.run.cache_get("rhbz-bug", bug_id)
    backtrace_attachment = None
    for attachment_id in bug.attachments:
        attachment = pyfaf.run.cache_get("rhbz-attachment", attachment_id,
                                         failure_allowed=True)
        if attachment is None or attachment.is_patch or \
                attachment.is_url or attachment.is_obsolete or \
                attachment.file_name != "backtrace":
            continue
        backtrace_attachment = attachment
        break

    if backtrace_attachment is None:
        logging.debug("Backtrace not found in local cache.")
        continue

    # Parse the attachment into backtrace
    btparser_proc = subprocess.Popen(['btparser', '-i', '-o'],
                                     stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = btparser_proc.communicate(backtrace_attachment.contents)
    if btparser_proc.returncode != 0:
        logging.debug("btparser exited with {0}.\n\n{1}\n\n{2}".format(btparser_proc.returncode, stdout, stderr))
        continue

    # Write optimized backtrace into cache
    pyfaf.run.cache_add_text(stdout, bug_id, "rhbz-optimized-backtrace", overwrite=False)
