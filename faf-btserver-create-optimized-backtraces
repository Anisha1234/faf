#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
# Copyright (C) 2011 Jan Smejda
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import os
import pyfaf
import btparser
import logging

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Generate optimized backtraces from local cache attachments and comments.")
cmdline_parser.add_argument("--only-missing", action="store_true", default=False, help="Skip already existing optimized backtraces")
cmdline_parser.add_argument("--overwrite", action="store_true", default=False, help="Overwrite existing optimized backtraces")
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.cache.Database()

logging.info("Searching db for abrt bugs.")
db.execute("SELECT id FROM rhbz_bug WHERE whiteboard LIKE '%%abrt_hash:%%'")

rows = db.fetchall()
for (i, row) in enumerate(rows):
    bug_id = row[0]
    path = pyfaf.run.cache_get_path("rhbz-optimized-backtrace", bug_id, failure_allowed=True)
    if not path is None and cmdline_args.only_missing and os.path.isfile(path):
        logging.debug("[{0}/{1}] Skipping bug #{2}.".format(i + 1, len(rows), bug_id))
        continue

    logging.info("[{0}/{1}] Processing bug #{2}.".format(i + 1, len(rows), bug_id))

    try:
        backtrace = pyfaf.btserver.get_backtrace(bug_id)
        optimized_thread = pyfaf.btserver.get_optimized_thread(backtrace)
    except Exception as e:
        logging.debug("{0}".format(e))
        continue

    funs = optimized_thread.format_funs()

    # Write optimized backtrace into cache
    logging.debug("Saving optimized backtrace for bug #{0}.".format(bug_id))
    pyfaf.run.cache_add_text(funs, bug_id, "rhbz-optimized-backtrace", overwrite=cmdline_args.overwrite)

db.close()
