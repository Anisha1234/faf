#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import fedora.client
import pyfaf
import sys
import subprocess
import logging
from pyfaf.storage import *

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_parser.add_argument("opsys", help="Operating System")
cmdline = cmdline_parser.parse_args()

db = pyfaf.storage.Database(debug=cmdline.verbose > 2)
opsys = db.session.query(OpSys).filter(OpSys.name == cmdline.opsys).one()

logging.info("Loading collection list from Fedora Package Database.")
pkgdb = fedora.client.PackageDB()
collection_list = [c[0] for c in pkgdb.get_collection_list()]

i = 0
for collection in collection_list:
    i += 1
    logging.info("[{0}/{1}] Processing collection #{2}.".format(i, len(collection_list), collection.id))
    if collection.name.lower() != opsys.name.lower():
        continue

    status = OpSysReleaseStatus.enums[collection.statuscode]
    opsys_release = db.session.query(OpSysRelease).filter((OpSysRelease.opsys_id == opsys.id) & \
                                                          (OpSysRelease.version == collection.version)).first()
    if opsys_release:
        if opsys_release.status != status:
            logging.info("{0} {1} changed status: {2} -> {3}".format(opsys.name, opsys_release.version,
                                                                     opsys_release.status, status))
            opsys_release.status = status

        continue

    logging.debug("Creating new opsysrelease in storage for {0} {1}.".format(opsys.name, collection.version))
    opsys_release = OpSysRelease()
    opsys_release.opsys_id = opsys.id
    opsys_release.version = collection.version
    opsys_release.status = status
    db.session.add(opsys_release)

db.session.flush()
