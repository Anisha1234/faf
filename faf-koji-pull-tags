#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import koji
import logging
import pyfaf

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Download tags from Koji.")
cmdline_parser.add_argument("os", help="Operating system")
cmdline_parser.add_argument("--use-cache", action="store_true", default=False, help="Use cache instead of storage (deprecated)")
cmdline = cmdline_parser.parse_args()

if cmdline.use_cache:
    # old behaviour - cache
    import subprocess
    koji_url_args = ["--fedora"] if cmdline.os == "fedora" else ["--brew"]

    logging.info("Loading tag list from Koji.")
    koji_args = ["faf-koji"] + koji_url_args + ["tags"]
    tag_list_text = pyfaf.run.process(koji_args, stdout=subprocess.PIPE,
                                      timeout=20*60, timeout_attempts=1,
                                      returncode_attempts=2)[0]
    tag_list = [tag_line.split()[0] for tag_line in tag_list_text.splitlines()]
    logging.info("Loading {0} tags from Koji.".format(len(tag_list)))

    index = 0
    for tag_id in tag_list:
        index += 1
        logging.info("[{0}/{1}] Processing tag #{2}.".format(
                index, len(tag_list), tag_id))
        koji_args = ["faf-koji"] + koji_url_args + ["tag", tag_id]
        tag_text = pyfaf.run.process(koji_args, stdout=subprocess.PIPE,
                                     timeout=5*60, timeout_attempts=1,
                                     returncode_attempts=2)[0]
        pyfaf.run.cache_add_text(
            tag_text, tag_id,
            "{0}-koji-tag".format(cmdline.os),
            overwrite=True)

    exit(0)

# storage
from pyfaf.storage import *
from sqlalchemy.orm.exc import NoResultFound

db = Database(debug=cmdline.verbose > 2)

try:
    opsys = db.session.query(OpSys).filter(OpSys.name == cmdline.os).one()
except NoResultFound:
    logging.error("OS '{0}' is not supported.".format(cmdline.os))
    exit(1)

try:
    buildsys = db.session.query(BuildSystem).filter((BuildSystem.opsys_id == opsys.id) & \
                                                    (BuildSystem.xmlrpc_url != None)).one()
except NoResultFound:
    logging.error("{0} does not support koji.".format(cmdline.os))
    exit(1)

logging.info("Downloading tags for {0}.".format(cmdline.os))
logging.debug("Using {0} as XML-RPC URL.".format(buildsys.xmlrpc_url))

koji_session = koji.ClientSession(buildsys.xmlrpc_url)
tags = koji_session.listTags()

localarches = {}
for arch in db.session.query(Arch).all():
    localarches[arch.name] = arch.id

# We need not to save tags under their real IDs. These are
# only unique within one buildsystem. That's why we
# need to map real tag IDs (Tag.secondary_id) to UUIDs (Tag.id)

# We may safely create a reverse mapping, as the script only
# operates with one buildsystem at any time.
tagid_map = {}

i = 0
for tag in tags:
    i += 1
    logging.info("[{0}/{1}] Processing tag {2}".format(i, len(tags), tag["name"]))
    exists = db.session.query(Tag).filter((Tag.secondary_id == tag["id"]) &
                                          (Tag.opsys_id == opsys.id)).first()
    if exists:
        logging.debug("Skipping existing tag '{0}'".format(tag["name"]))
        continue

    newtag = Tag()
    newtag.opsys_id = opsys.id
    newtag.secondary_id = tag["id"]
    newtag.name = tag["name"]
    newtag.perm = tag["perm_id"]
    newtag.locked = tag["locked"]
    db.session.add(newtag)

    # flush - we need the id
    db.session.flush()
    tagid_map[tag["id"]] = newtag.id

    if tag["arches"]:
        arches = tag["arches"].split(" ")
        # bug somewhere - some arches appear multiple times
        arches = set(arches)
        for arch in arches:
            if not arch:
                continue

            logging.debug("Adding architecture {0} to tag {1}".format(arch, tag["name"]))
            newarchtag = ArchTag()
            newarchtag.tag_id = newtag.id
            newarchtag.arch_id = localarches[arch]
            db.session.add(newarchtag)

db.session.flush()

dbtags = db.session.query(Tag.id, Tag.secondary_id).filter(Tag.opsys_id == opsys.id).all()
for id, secondary_id in dbtags:
    if not secondary_id in tagid_map:
        tagid_map[secondary_id] = id

# another loop, inheritances change, they are dropped and rebuilt each time
logging.info("Downloading inheritances")
db.session.query(TagInheritance).delete()
for tag in tags:
    inheritances = koji_session.getInheritanceData(tag["id"])
    for inheritance in inheritances:
        logging.debug("Adding inheritance #{0} to tag {1}" \
                      .format(tagid_map[inheritance["parent_id"]], tag["name"]))

        newinh = TagInheritance()
        newinh.tag_id = tagid_map[tag["id"]]
        newinh.parent_id = tagid_map[inheritance["parent_id"]]
        newinh.intransitive = inheritance["intransitive"]
        newinh.priority = inheritance["priority"]
        newinh.noconfig = inheritance["noconfig"]
        db.session.add(newinh)

db.session.flush()
