#!/usr/bin/python
#
# This is FAF LD wrapper
#

import os
import fakeargs
import re
import sys
from subprocess import *

if __name__ == "__main__":
    args = fakeargs.FakeArgs(sys.argv)
    if os.getenv("FAF_LLVM_BUILD") is None:
        args.use_binary("/usr/bin/.ld")
        sys.exit(call(args))

    if os.getenv("FAF_USE_LLVM_LD") is None:
        args.use_binary("/usr/bin/ld.gold")
        args.add_unique(["--build-id", "--plugin=/usr/lib64/llvm/LLVMgold.so", "--plugin-opt=also-emit-llvm"])
        sys.exit(call(args))

    args.use_binary("/usr/bin/llvm-ld")
    args.remove_regex(re.compile("^-dynamic-linker"))
    args.remove_regex(re.compile("^-as-needed"))
    args.remove_regex(re.compile("^--as-needed"))
    args.remove_regex(re.compile("^--no-as-needed"))
    args.remove_regex(re.compile("^-shared"))
    args.remove_regex(re.compile("^--hash-style"))
    args.remove_regex(re.compile("^--build-id"))
    args.remove_regex(re.compile("^--no-add-needed"))
    args.remove_regex(re.compile("^-z"))
    args.remove_regex(re.compile("^relro"))
    args.remove_regex(re.compile("^defs"))
    args.remove_regex(re.compile("^--plugin"))
    args.remove_regex(re.compile("^-Bdynamic"))
    args.remove_regex(re.compile("^-Bstatic"))
    args.remove_regex(re.compile("^-Bsymbolic"))
    args.remove_regex(re.compile("^--dynamic-linker"))
    args.remove_regex(re.compile("^-e"))
    args.remove_regex(re.compile("^-E"))
    args.remove_regex(re.compile("^--enable-new-dtags"))
    args.remove_regex(re.compile("^-fini"))
    args.remove_regex(re.compile("^-G"))
    args.remove_regex(re.compile("^--gc-sections"))
    args.remove_regex(re.compile("^-hash-style"))
    args.remove_regex(re.compile("^-h"))
    args.remove_regex(re.compile("^-init"))
    args.remove_regex(re.compile("^-ldaemon"))
    args.remove_regex(re.compile("^-ldap"))
    args.remove_regex(re.compile("^-ldapserver"))
    args.remove_regex(re.compile("^-Map"))
    args.remove_regex(re.compile("^--no-undefined"))
    args.remove_regex(re.compile("^--no-whole-archive"))
    args.remove_regex(re.compile("^-O1"))
    args.remove_regex(re.compile("^-pie"))
    args.remove_regex(re.compile("^--retain-symbols-file"))
    args.remove_regex(re.compile("^-rpath"))
    args.remove_regex(re.compile("^-R"))
    args.remove_regex(re.compile("^-static"))
    args.remove_regex(re.compile("^-T"))
    args.remove_regex(re.compile("^-warn-common"))
    args.remove_regex(re.compile("^--warn-common"))
    args.remove_regex(re.compile("^--warn-multiple-gp"))
    args.remove_regex(re.compile("^-warn-once"))
    args.remove_regex(re.compile("^-whole-archive"))
    args.remove_regex(re.compile("^--whole-archive"))
    args.remove_regex(re.compile("^-Wl"))
    args.remove_regex(re.compile("^-wrap"))
    args.remove_regex(re.compile("^--wrap"))
    args.remove_regex(re.compile("^-x"))

    retcode = call(args)
    if retcode:
        sys.exit(retcode)
