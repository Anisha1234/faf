#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
# Copyright (C) 2011 Jan Smejda
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import btparser
import gettext
import sys
import re
import os
import logging

SAVE_PREFIX = "SAVE "
SHOW_PREFIX = "SHOW "

GETTEXT_DOMAIN = "faf"

#characters, numbers, dash (utf-8, iso-8859-2 etc.)
INPUT_CHARSET_PARSER = re.compile("^([a-zA-Z0-9\-]+)(,.*)?$")
#en_GB, sk-SK, cs, fr etc.
INPUT_LANG_PARSER = re.compile("^([a-z]{2}([_\-][A-Z]{2})?)(,.*)?$")

def gettext_init():
    logging.debug("Initializing gettext")
    result = lambda x: x
    if not "HTTP_ACCEPT_LANGUAGE" in os.environ or \
       not "HTTP_ACCEPT_CHARSET" in os.environ:
        logging.debug("Language env variables are not set")
        return result

    lang_match = INPUT_LANG_PARSER.match(os.environ["HTTP_ACCEPT_LANGUAGE"])
    charset_match = INPUT_CHARSET_PARSER.match(os.environ["HTTP_ACCEPT_CHARSET"])
    if lang_match and charset_match:
        try:
            result = gettext.translation(GETTEXT_DOMAIN,
                                         languages=[lang_match.group(1)],
                                         codeset=charset_match.group(1)).gettext
        except Exception as ex:
            logging.debug(str(ex))
    else:
        logging.debug("Unexpected format of env variables")

    return result

def compare((d1, bug1), (d2, bug2)):
    # distance
    if d1 > d2:
        return -1
    if d1 < d2:
        return 1

    # open > closed
    if bug1.status != bug2.status:
        if bug1.status == pyfaf.cache.rhbz_bug.BS_CLOSED:
            return 1
        if bug2.status == pyfaf.cache.rhbz_bug.BS_CLOSED:
            return -1

    # closed whatever > closed duplicate
    if bug1.status == pyfaf.cache.rhbz_bug.BS_CLOSED:
        if bug1.resolution == pyfaf.cache.rhbz_bug.BR_DUPLICATE:
            return 1
        if bug2.resolution == pyfaf.cache.rhbz_bug.BR_DUPLICATE:
            return -1

    # new > old
    if bug1.creation_time > bug2.creation_time:
        return -1
    if bug1.creation_time < bug2.creation_time:
        return 1

    return 0

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_parser.add_argument("component")
cmdline_parser.add_argument("backtrace")
cmdline_args = cmdline_parser.parse_args()

_ = gettext_init()

# Optimize the provided backtrace for comparsion.
try:
    with open(cmdline_args.backtrace, 'r') as f:
        backtrace = btparser.Backtrace(f.read())
except ValueError:
    sys.stderr.write("Crash thread and crash frame can not be found.")
    sys.exit(2)

optimized_thread = pyfaf.btserver.get_optimized_thread(backtrace)

# Load database and bugs
logging.debug("Connecting to DB.")
db = pyfaf.cache.Database()

logging.info("Getting all referenced components.")
component_deps = pyfaf.btserver.all_referenced_components(db, cmdline_args.component)

# Get bug ids for the components
component_list = ",".join(["\"{0}\"".format(dep) for dep in component_deps])
logging.debug("Found components: {0}.".format(component_list))
db.execute("SELECT DISTINCT rhbz_bug.id FROM rhbz_attachment, rhbz_bug WHERE file_name = 'backtrace' AND bug_id = rhbz_bug.id AND rhbz_bug.component IN ({0})".format(component_list))

bug_ids = [row[0] for row in db.fetchall()]

db.close()

logging.info("Loading relevant bugs.")
bug_threads = []
for bug_id in bug_ids:
    # Checking for the other bug's file
    bug_optimized_backtrace = pyfaf.run.cache_get_path("rhbz-optimized-backtrace", bug_id, failure_allowed=True)
    if bug_optimized_backtrace is None:
        logging.debug("No optimized backtrace for bug {0}.".format(bug_id))
        continue

    with open(bug_optimized_backtrace, 'r') as f:
        thread = btparser.Thread(f.read(), True)
        logging.debug("Read optimized backtrace for bug {0}.".format(bug_id))

        bug = pyfaf.run.cache_get("rhbz-bug", bug_id, failure_allowed=True)
        if bug is None:
            logging.debug("Skipping bug {0}.".format(bug_id))
            continue

        logging.debug("Adding bug {0}.".format(bug_id))
        bug_threads.append((bug, thread))

threads = [thread for (bug, thread) in bug_threads]

logging.info("Comparing bugs.")

try:
    distances = pyfaf.btserver.get_distances_to_threads(optimized_thread, threads)
except ValueError as ex:
    # there are no bugs to compare with, exit
    sys.exit(0)

distances_bugs = zip([int(100 * (1 - d)) for d in distances],
                     [bug for (bug, thread) in bug_threads])

logging.debug("Finishing")

ordered = sorted(distances_bugs, cmp=compare)
bestdistance = ordered[0][0]
if bestdistance == 100:
    print "{0}DUPLICATE {1}".format(SAVE_PREFIX, ordered[0][1].id)
#needs to be synchronized with the clustering (60 = 100 * (1 - 0.4))
elif bestdistance >= 60:
    result = ordered[:5]
    all_closed = all([b.status == pyfaf.cache.rhbz_bug.BS_CLOSED for d, b in result])

    if all_closed:
        for distance, bug in ordered:
            if bug.status != pyfaf.cache.rhbz_bug.BS_CLOSED:
                result[len(result) - 1] = (distance, bug)
                break

    for distance, bug in result:
        if distance != bestdistance:
            break

        line = "{0}{1} {2} {3} {4}".format(SAVE_PREFIX, bug.id, bug.component, distance, bug.status)
        if bug.status == pyfaf.cache.rhbz_bug.BS_CLOSED:
            line += " {0}".format(bug.resolution)
        print line
        print _("{0}Your problem is a possible duplicate of bug #{1} (from {2})").format(SHOW_PREFIX, bug.id, bug.component)
