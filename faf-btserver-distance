#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
# Copyright (C) 2011 Jan Smejda
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import subprocess
import sys
import re
import os
import tempfile

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_parser.add_argument("component")
cmdline_parser.add_argument("backtrace")
cmdline_args = cmdline_parser.parse_args()

# Optimize the provided backtrace for comparsion.
optimized_backtrace = tempfile.NamedTemporaryFile()
btparser_proc = subprocess.Popen(['btparser', '-o', cmdline_args.backtrace],
                                 stdout=optimized_backtrace)
btparser_proc.communicate()
if btparser_proc.returncode != 0:
    sys.exit(2)
optimized_backtrace.flush()
optimized_backtrace.seek(0)

# Load database and bugs
db = pyfaf.cache.db_connect()
cursor = db.cursor()

component_deps = pyfaf.btserver.all_referenced_components(
    cursor, cmdline_args.component)

# Get bug ids for the components
component_list = ",".join(["\"{0}\"".format(dep) for dep in component_deps])
cursor.execute("SELECT id, component FROM rhbz_bug WHERE component in ({0})".format(component_list))
bugs = [(d[0], d[1]) for d in cursor.fetchall()]

# Cycle comparing bugs
similarities = []
for bug_id, bug_component in bugs:
    # Checking for the other bug's file
    bug_optimized_backtrace = pyfaf.run.cache_get_path("rhbz-optimized-backtrace", bug_id, failure_allowed=True)
    if bug_optimized_backtrace is None:
        continue

    similarity = pyfaf.btserver.backtrace_similarity(optimized_backtrace.name, bug_optimized_backtrace)
    if similarity is None:
        continue

    similarities.append((similarity[0], bug_id, bug_component))

similarities = sorted(similarities, key=lambda x:x[0])[:5]
for similarity in similarities:
    for distance, bug_id, bug_component in similarity:
        print "{0} {1} {2}".format(bug_id, bug_component, distance)
