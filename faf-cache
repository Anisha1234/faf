#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import sys

# Command line operations
def list(cmdline_args, target_list):
    target = target_list.from_directory_name(cmdline_args.target)
    for (ident, mtime) in target.list():
        output = cmdline_args.format.replace("%id", ident)
        if "%mtime" in output:
            output = output.replace("%mtime", mtime)
        sys.stdout.write("{0}\n".format(output))

def show(cmdline_args, target_list):
    target = target_list.from_directory_name(cmdline_args.target)
    if cmdline_args.path:
        sys.stdout.write(target._entry_path(cmdline_args.id))
        sys.stdout.write("\n")
    else:
        contents = target.get(cmdline_args.id)
        if isinstance(contents, unicode):
            contents = contents.encode("utf-8")
        sys.stdout.write(contents)

def verify(cmdline_args, target_list):
    if cmdline_args.target is None:
        target_list.verify_all(cmdline_args.remove_broken, cmdline_args.check_database)
    else:
        target = target_list.from_directory_name(cmdline_args.target)
        if cmdline_args.id is None:
            target.verify_all(cmdline_args.remove_broken, cmdline_args.check_database)
        else:
            target.verify(cmdline_args.id, cmdline_args.remove_broken, cmdline_args.check_database)

def add(cmdline_args, target_list):
    target = target_list.from_directory_name(cmdline_args.target)
    # Assume that standard input comes in UTF-8 encoding.
    value = unicode(sys.stdin.read(), "utf-8")
    target.add(cmdline_args.id, value, cmdline_args.overwrite)

def remove(cmdline_args, target_list):
    if cmdline_args.target is None:
        target_list.remove_all()
    else:
        target = target_list.from_directory_name(cmdline_args.target)
        if cmdline_args.id is None:
            target.remove_all()
        else:
            target.remove(cmdline_args.id)

def stats(cmdline_args, target_list):
    if cmdline_args.target is None:
        target_list.stats()
    else:
        target = target_list.from_directory_name(cmdline_args.target)
        target.stats(oneline=False)

def rebuild_db(cmdline_args, target_list):
    if cmdline_args.target is None:
        target_list.rebuild_db()
    else:
        target = target_list.from_directory_name(cmdline_args.target)
        target.rebuild_db()

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(
    description="Add, view, remove data from the local cache.")
cmdline_parser.add_argument("--cache-dir", default=pyfaf.run.config_get_cache_directory())
cmdline_parser.add_argument("--db-type", default=pyfaf.run.config_get("cache.db_type"))
cmdline_parser.add_argument("--mysql-host", default=pyfaf.run.config_get("cache.mysql_host"))
cmdline_parser.add_argument("--mysql-socket", default=None)
cmdline_parser.add_argument("--mysql-user", default=pyfaf.run.config_get("cache.mysql_user"))
cmdline_parser.add_argument("--mysql-passwd", default=pyfaf.run.config_get("cache.mysql_passwd"))
cmdline_parser.add_argument("--mysql-db", default=pyfaf.run.config_get("cache.mysql_db"))
cmdline_subparsers = cmdline_parser.add_subparsers(title="subcommands")
cmdline_parser_list = cmdline_subparsers.add_parser(
    'list', help="show simple list of all stored objects")
cmdline_parser_list.add_argument("target")
cmdline_parser_list.add_argument("--format", default="%id")
cmdline_parser_list.set_defaults(func=list)
cmdline_parser_show = cmdline_subparsers.add_parser(
    'show', help="show contents of a single object")
cmdline_parser_show.add_argument("target")
cmdline_parser_show.add_argument("id")
cmdline_parser_show.add_argument("--path",
                                 action="store_true", default=False)
cmdline_parser_show.set_defaults(func=show)
cmdline_parser_verify = cmdline_subparsers.add_parser(
    'verify', help="check internal consistency")
cmdline_parser_verify.add_argument("-t", "--target")
cmdline_parser_verify.add_argument("-i", "--id")
cmdline_parser_verify.add_argument("--remove-broken",
                                   action="store_true", default=False)
cmdline_parser_verify.add_argument("--check-database",
                                   action="store_true", default=False)
cmdline_parser_verify.set_defaults(func=verify)
cmdline_parser_add = cmdline_subparsers.add_parser(
    'add', help="add new object to the cache")
cmdline_parser_add.add_argument("target")
cmdline_parser_add.add_argument("id")
cmdline_parser_add.add_argument("--overwrite",
                                action="store_true", default=False)
cmdline_parser_add.set_defaults(func=add)
cmdline_parser_remove = cmdline_subparsers.add_parser(
    'remove', help="remove object from the cache")
cmdline_parser_remove.add_argument("-t", "--target")
cmdline_parser_remove.add_argument("-i", "--id")
cmdline_parser_remove.set_defaults(func=remove)
cmdline_parser_stats = cmdline_subparsers.add_parser(
    "stats", help="show statistics about objects")
cmdline_parser_stats.add_argument("-t", "--target")
cmdline_parser_stats.set_defaults(func=stats)
cmdline_parser_rebuild_db = cmdline_subparsers.add_parser(
    'rebuild-db', help="rebuild cache database")
cmdline_parser_rebuild_db.add_argument("-t", "--target")
cmdline_parser_rebuild_db.set_defaults(func=rebuild_db)
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.cache.Database(db_type=cmdline_args.db_type,
                          sqlite3_cache_dir=cmdline_args.cache_dir,
                          mysql_host=cmdline_args.mysql_host,
                          mysql_socket=cmdline_args.mysql_socket,
                          mysql_user=cmdline_args.mysql_user,
                          mysql_passwd=cmdline_args.mysql_passwd,
                          mysql_db=cmdline_args.mysql_db)
target_list = pyfaf.cache.TargetList(db, cmdline_args.cache_dir)
cmdline_args.func(cmdline_args, target_list)
db.commit()
db.close()
