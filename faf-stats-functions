#!/usr/bin/env python

import logging

import pyfaf
from sqlalchemy import func

from pyfaf.storage.symbol import Symbol, SymbolSource
from pyfaf.storage.report import Report, ReportBtFrame, ReportBacktrace

if __name__ == "__main__":
    parser = pyfaf.argparse.ArgumentParser(
        description='Hot/longterm problem statistics.')
    parser.add_argument('--type', help='Report type', default=None)
    parser.add_argument('--limit', help='Report type', default=None)

    args = vars(parser.parse_args())

    logging.basicConfig(level=logging.DEBUG)
    db = pyfaf.storage.getDatabase()

    query = (db.session.query(Symbol.name,
            func.count(Symbol.id).label('count'))
        .join(SymbolSource)
        .join(ReportBtFrame)
        .join(ReportBacktrace)
        .join(Report))

    lim = args['limit']
    if lim:
        lim = int(lim)

    if args['type']:
        query = query.filter(Report.type == args['type'])

    functions = query.group_by(Symbol.name).order_by('count').all()

    for n, fun in enumerate(reversed(functions)):
        if lim and n == lim: break

        print('{0:<40} {1:>7}'.format(fun.name, fun.count))

