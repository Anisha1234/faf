#!/usr/bin/python
# Copyright (C) 2012 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import logging
import json
import glob
import os

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Process reports in spool directory.")
cmdline_parser.add_argument("--spool-dir", help="Specify report spool directory",
        default=pyfaf.config.get("Report.SpoolDirectory"))
cmdline_parser.add_argument("--report", nargs="+",
        help="Save specified files instead of searching spool directory")
cmdline_args = cmdline_parser.parse_args()

if not cmdline_args.report and not cmdline_args.spool_dir:
    cmdline_parser.error("No spool directory or report specified.")

db = pyfaf.storage.Database(debug=cmdline_args.verbose > 2)

if cmdline_args.report:
    filenames = cmdline_args.report
    save_directory = None
    defer_directory = None
elif cmdline_args.spool_dir:
    incoming_directory = os.path.join(cmdline_args.spool_dir, "incoming")
    save_directory = os.path.join(cmdline_args.spool_dir, "saved")
    defer_directory = os.path.join(cmdline_args.spool_dir, "deferred")

    # Create missing directories
    for d in [incoming_directory, save_directory, defer_directory]:
        if not os.path.isdir(d):
            os.makedirs(d)

    filenames = glob.glob(os.path.join(incoming_directory, "*"))
else:
    assert False

def move_file(filename, where):
    basename = os.path.basename(filename)
    target = os.path.join(where, basename)
    os.rename(filename, target)

for filename in filenames:
    with open(filename, 'r') as f:
        logging.info("Processing report {0}.".format(filename))
        try:
            report = pyfaf.ureport.convert_to_str(json.loads(f.read()))
            pyfaf.ureport.validate(report)
            pyfaf.ureport.add_report(report, db)
        except Exception as e:
            logging.debug("Processing failed: {0}".format(e))
            if defer_directory:
                logging.debug("Moving report {0} to deferred directory.".format(filename))
                move_file(filename, defer_directory)
            continue

        if save_directory:
            logging.debug("Moving report {0} to saved directory.".format(filename))
            move_file(filename, save_directory)

        db.session.flush()
