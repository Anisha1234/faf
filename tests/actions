#!/usr/bin/python
# -*- encoding: utf-8 -*-
import unittest2 as unittest
import logging
import json

import faftests

from pyfaf.storage.opsys import Arch
from pyfaf.solutionfinders import find_solution
from pyfaf.queries import get_opsys_by_name, get_arch_by_name
from pyfaf.opsys import systems


class CmdLine(object):

    """
    Wrapper to access dict with attributes
    """

    def __init__(self, d):
        if d is None:
            d = {}
        self._data = d

    def __getattr__(self, name):
        if name[0] == '_':
            super(CmdLine, self).__getattr__(name)
        else:
            if name in self._data:
                return self._data[name]
            else:
                return None

    def __setattr__(self, name, value):
        if name[0] == '_':
            super(CmdLine, self).__setattr__(name, value)
        else:
            raise Exception("Command line should be read-only.")


class ActionsTestCase(faftests.DatabaseCase):

    """
    Test case for pyfaf.actions
    """

    def setUp(self):
        super(ActionsTestCase, self).setUp()

        self.call_action("init")

        self.arch_noarch = get_arch_by_name(self.db, "noarch")
        self.arch_x86_64 = get_arch_by_name(self.db, "x86_64")

        self.op_sys_fedora = get_opsys_by_name(
            self.db, systems['fedora'].nice_name)

    def test_releaseadd(self):
        self.assertEqual(self.call_action("releaseadd"), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "FooBarOS",
        }), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "FooStatus",
        }), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "ACTIVE",
        }), 0)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "ACTIVE",
        }), 0)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "10",
            "status": "EOL",
        }), 0)

    def test_archadd(self):
        init_archs = self.db.session.query(Arch).all()

        self.assertEqual(self.call_action("archadd", {
            "NAME": "FooArch"
        }), 0)

        archs = self.db.session.query(Arch).all()
        self.assertEqual(len(archs), len(init_archs) + 1)

        # Adding an existing Arch should return 1 and not add it
        self.assertEqual(self.call_action("archadd", {
            "NAME": "FooArch"
        }), 1)
        archs = self.db.session.query(Arch).all()
        self.assertEqual(len(archs), len(init_archs) + 1)

    def test_releasemod(self):
        self.assertEqual(self.call_action("releasemod"), 1)
        self.assertEqual(self.call_action("releasemod", {
            "opsys": "FooBarOS",
        }), 1)

        # missing release
        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "FooStatus",
        }), 1)

        # add F20 release
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "EOL",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "ACTIVE",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "ACTIVE",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "EOL",
        }), 0)

    def test_kb(self):

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "VLC Media Player",
            "NOTE": "VLC unsupported.",
            "note-html": "<html><b>VLC unsupported.</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "VLC Media Player",
            "NOTE": "VLC unsupported.",
            "note-html": "<html><b>VLC unsupported.</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "Unsupported",
            "NOTE": "Unsupported",
            "note-html": "<html><b>Unsupported</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "FooSolution",
            "btpath": "^.*/systemd-logind$",
        }), 1)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "FooSolution",
            "opsys": "fedora",
            "btpath": "^.*/systemd-logind$",
        }), 1)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "Unsupported",
            "opsys": "fedora",
            "btpath": "^.*/systemd-logind$",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "Unsupported",
            "opsys": "fedora",
            "pkgname": "^ibus-table",
        }), 0)

        sample_report_names = ('ureport1', 'ureport2', 'ureport_core',
                               'ureport_python', 'ureport_kerneloops', 'ureport_java')
        sample_reports = {}
        for report_name in sample_report_names:
            with open("sample_reports/{0}".format(report_name), "r") as file:
                sample_reports[report_name] = json.load(file)

        solution = find_solution(sample_reports['ureport_core'])
        self.assertIsNotNone(solution)
        self.assertEqual(solution.cause, "Unsupported")

        solution = find_solution(sample_reports['ureport_python'])
        self.assertIsNotNone(solution)
        self.assertEqual(solution.cause, "Unsupported")

        solution = find_solution(sample_reports['ureport_java'])
        self.assertIsNone(solution)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    unittest.main()
