#!/usr/bin/python
# -*- encoding: utf-8 -*-
try:
    import unittest2 as unittest
except ImportError:
    import unittest
import logging
import json

import glob
import tempfile
import shutil
import os

import faftests

from pyfaf.utils.proc import popen
from pyfaf.storage.opsys import (Arch,
                                 OpSysReleaseRepo,
                                 BuildOpSysReleaseArch,
                                 )
from pyfaf.solutionfinders import find_solution


class ActionsTestCase(faftests.DatabaseCase):

    """
    Test case for pyfaf.actions
    """

    def setUp(self):
        super(ActionsTestCase, self).setUp()
        self.basic_fixtures()

    def test_releaseadd(self):
        self.assertEqual(self.call_action("releaseadd"), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "FooBarOS",
        }), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "23",
            "status": "FooStatus",
        }), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "ACTIVE",
        }), 0)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "ACTIVE",
        }), 0)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "10",
            "status": "EOL",
        }), 0)

    def test_archadd(self):
        init_archs = self.db.session.query(Arch).all()

        self.assertEqual(self.call_action("archadd", {
            "NAME": "FooArch"
        }), 0)

        archs = self.db.session.query(Arch).all()
        self.assertEqual(len(archs), len(init_archs) + 1)

        # Adding an existing Arch should return 1 and not add it
        self.assertEqual(self.call_action("archadd", {
            "NAME": "FooArch"
        }), 1)
        archs = self.db.session.query(Arch).all()
        self.assertEqual(len(archs), len(init_archs) + 1)

    def test_repoassign_opsysrelease(self):
        # add repo
        self.assertEqual(self.call_action_ordered_args("repoadd", [
            "sample_repo", # NAME
            "yum", # TYPE
            "file:///sample_rpms", # URL
        ]), 0)

        # add release
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "24",
            "status": "ACTIVE",
        }), 0)

        init_opsysreleaserepo = self.db.session.query(OpSysReleaseRepo).count()
        self.assertEqual(self.call_action_ordered_args("repoassign", [
            "sample_repo", # NAME
            "Fedora 24", # OPSYS
            "x86_64",# ARCH
        ]), 0)

        opsysreleaserepo = self.db.session.query(OpSysReleaseRepo).count()
        self.assertEqual(opsysreleaserepo, init_opsysreleaserepo + 1)

    def test_reposync(self):
        self.rpm = glob.glob("sample_rpms/sample*.rpm")[0]

        self.tmpdir = tempfile.mkdtemp()
        shutil.copyfile(self.rpm,
                        os.path.join(self.tmpdir, os.path.basename(self.rpm)))

        proc = popen("createrepo", self.tmpdir)
        self.assertIn("Workers Finished", proc.stdout)

        self.call_action_ordered_args("repoadd", [
            "sample_repo", # NAME
            "yum", # TYPE
            "file://{0}".format(self.tmpdir), # URL
        ])

        # add release
        self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "24",
            "status": "ACTIVE",
        })

        self.call_action_ordered_args("repoassign", [
            "sample_repo", # NAME
            "Fedora 24", # OPSYS
            "x86_64",# ARCH
        ])

        init_bosra = self.db.session.query(BuildOpSysReleaseArch).count()
        self.assertEqual(self.call_action("reposync", {
            "NAME": "sample_repo",
            "no-download-rpm": ""
        }), 0)

        bosra = self.db.session.query(BuildOpSysReleaseArch).count()
        self.assertEqual(bosra, init_bosra + 1)

        shutil.rmtree(self.tmpdir)

    def test_releasemod(self):
        self.assertEqual(self.call_action("releasemod"), 1)
        self.assertEqual(self.call_action("releasemod", {
            "opsys": "FooBarOS",
        }), 1)

        # missing release
        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "FooStatus",
        }), 1)

        # add F20 release
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "EOL",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "ACTIVE",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "ACTIVE",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "EOL",
        }), 0)

    def test_kb(self):
        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "VLC Media Player",
            "NOTE": "VLC unsupported.",
            "note-html": "<html><b>VLC unsupported.</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "VLC Media Player",
            "NOTE": "VLC unsupported.",
            "note-html": "<html><b>VLC unsupported.</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "Unsupported",
            "NOTE": "Unsupported",
            "note-html": "<html><b>Unsupported</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "FooSolution",
            "btpath": "^.*/systemd-logind$",
        }), 1)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "FooSolution",
            "opsys": "fedora",
            "btpath": "^.*/systemd-logind$",
        }), 1)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "Unsupported",
            "opsys": "fedora",
            "btpath": "^.*/systemd-logind$",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "Unsupported",
            "opsys": "fedora",
            "pkgname": "^ibus-table",
        }), 0)

        sample_report_names = ("ureport1", "ureport2", "ureport_core",
                               "ureport_python", "ureport_kerneloops",
                               "ureport_java", "ureport_ruby")
        sample_reports = {}
        for report_name in sample_report_names:
            with open("sample_reports/{0}".format(report_name), "r") as file:
                sample_reports[report_name] = json.load(file)

        solution = find_solution(sample_reports['ureport_core'])
        self.assertIsNotNone(solution)
        self.assertEqual(solution.cause, "Unsupported")

        solution = find_solution(sample_reports['ureport_python'])
        self.assertIsNotNone(solution)
        self.assertEqual(solution.cause, "Unsupported")

        solution = find_solution(sample_reports['ureport_java'])
        self.assertIsNone(solution)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    unittest.main()
