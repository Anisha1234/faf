#!/usr/bin/python
# -*- encoding: utf-8 -*-
import unittest2 as unittest
import logging
import json

import faftests

from pyfaf.storage.opsys import Arch
from pyfaf.solutionfinders import find_solution


class ActionsTestCase(faftests.DatabaseCase):

    """
    Test case for pyfaf.actions
    """

    def setUp(self):
        super(ActionsTestCase, self).setUp()
        self.basic_fixtures()

    def test_releaseadd(self):
        self.assertEqual(self.call_action("releaseadd"), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "FooBarOS",
        }), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "23",
            "status": "FooStatus",
        }), 1)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "ACTIVE",
        }), 0)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "ACTIVE",
        }), 0)
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "10",
            "status": "EOL",
        }), 0)

    def test_archadd(self):
        init_archs = self.db.session.query(Arch).all()

        self.assertEqual(self.call_action("archadd", {
            "NAME": "FooArch"
        }), 0)

        archs = self.db.session.query(Arch).all()
        self.assertEqual(len(archs), len(init_archs) + 1)

        # Adding an existing Arch should return 1 and not add it
        self.assertEqual(self.call_action("archadd", {
            "NAME": "FooArch"
        }), 1)
        archs = self.db.session.query(Arch).all()
        self.assertEqual(len(archs), len(init_archs) + 1)

    def test_releasemod(self):
        self.assertEqual(self.call_action("releasemod"), 1)
        self.assertEqual(self.call_action("releasemod", {
            "opsys": "FooBarOS",
        }), 1)

        # missing release
        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "FooStatus",
        }), 1)

        # add F20 release
        self.assertEqual(self.call_action("releaseadd", {
            "opsys": "fedora",
            "opsys-release": "20",
            "status": "EOL",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "ACTIVE",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "ACTIVE",
        }), 0)

        self.assertEqual(self.call_action("releasemod", {
            "opsys": "fedora",
            "opsys-release": 20,
            "status": "EOL",
        }), 0)

    def test_kb(self):
        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "VLC Media Player",
            "NOTE": "VLC unsupported.",
            "note-html": "<html><b>VLC unsupported.</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "VLC Media Player",
            "NOTE": "VLC unsupported.",
            "note-html": "<html><b>VLC unsupported.</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-soladd", {
            "CAUSE": "Unsupported",
            "NOTE": "Unsupported",
            "note-html": "<html><b>Unsupported</b><html>",
            "url": "http://www.fedoraproject.org",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "FooSolution",
            "btpath": "^.*/systemd-logind$",
        }), 1)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "FooSolution",
            "opsys": "fedora",
            "btpath": "^.*/systemd-logind$",
        }), 1)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "Unsupported",
            "opsys": "fedora",
            "btpath": "^.*/systemd-logind$",
        }), 0)

        self.assertEqual(self.call_action("sf-prefilter-patadd", {
            "SOLUTION": "Unsupported",
            "opsys": "fedora",
            "pkgname": "^ibus-table",
        }), 0)

        sample_report_names = ('ureport1', 'ureport2', 'ureport_core',
                               'ureport_python', 'ureport_kerneloops', 'ureport_java')
        sample_reports = {}
        for report_name in sample_report_names:
            with open("sample_reports/{0}".format(report_name), "r") as file:
                sample_reports[report_name] = json.load(file)

        solution = find_solution(sample_reports['ureport_core'])
        self.assertIsNotNone(solution)
        self.assertEqual(solution.cause, "Unsupported")

        solution = find_solution(sample_reports['ureport_python'])
        self.assertIsNotNone(solution)
        self.assertEqual(solution.cause, "Unsupported")

        solution = find_solution(sample_reports['ureport_java'])
        self.assertIsNone(solution)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    unittest.main()
