#!/usr/bin/python
# -*- encoding: utf-8 -*-
try:
    import unittest2 as unittest
except ImportError:
    import unittest

import logging
import datetime
import random

import faftests
from pyfaf.storage import Report, Problem


class CreateProblemsTestCase(faftests.DatabaseCase):

    """
    Test case for pyfaf.actions.create_problems
    """

    def setUp(self):
        super(CreateProblemsTestCase, self).setUp()
        self.basic_fixtures()

    def test_create_problems_problemtypes(self):
        """
        Test create problems functionality for each of supported problemtype
        """

        problemtypes = ["core", "python", "java", "kerneloops"]
        for problemtype in problemtypes:
            self.save_report("ureport_{0}".format(problemtype))

        self.call_action("create-problems")

        self.assertEqual(len(self.db.session.query(Problem).all()),
                         len(problemtypes))

    def test_create_problems_removes_empty_problems(self):
        """
        Test create problems removes problems without reports
        """

        p = Problem(first_occurrence=datetime.date.today(),
                    last_occurrence=datetime.date.today())

        self.db.session.add(p)
        self.db.session.flush()

        self.call_action("create-problems")

        self.assertEqual(self.db.session.query(Problem).count(), 0)

    def test_create_problems_removes_invalid_reports_from_problems(self):
        """
        Test create problems removes reports with invalid stacktrace
        """

        self.save_report("ureport_core")
        self.save_report("ureport_core_invalid")

        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 1)

    def randomize_ureport(self, ureport, rnd, mode, amount=1):
        result = ureport.copy()
        frames = result["problem"]["stacktrace"][0]["frames"]
        # Drop random frame
        if mode == 0:
            for i in range(amount):
                if len(frames) > 2:
                    frames.pop(rnd.randint(0, len(frames)-1))
        # Insert random frame
        if mode == 1:
            for i in range(amount):
                f = {
                    "address": rnd.randint(1000, 1000000),
                    "build_id": str(rnd.randint(10000000000, 99999999999)),
                    "build_id_offset": rnd.randint(1000, 1000000),
                    "function_name": "func_"+str(rnd.randint(10000000000, 99999999999)),
                    "file_name": "/usr/bin/fn_"+str(rnd.randint(10000000000, 99999999999))
                }
                frames.insert(rnd.randint(0, len(frames)), f)
        # Shuffle
        if mode == 2:
            rnd.shuffle(frames)

        return result

    def test_create_problems_clustering(self):
        ureport_core = self.load_report("ureport_core")
        ureport_core1 = self.load_report("ureport_core1")

        self.save_report_dict(ureport_core1)
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        rnd = random.Random()
        rnd.seed(1337)

        # Drop 1 frame
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 0, 1))
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        # Drop 2 frames
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 0, 2))
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        # Insert 1 random frame
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 1))
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        # Insert 2 random frames
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 1, 2))
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 1)

        # Shuffle
        self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 2))
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 2)

        # Different report
        self.save_report_dict(ureport_core)
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 3)

        # E-E-Everyday I'm shufflin'
        for i in range(50):
            self.save_report_dict(self.randomize_ureport(ureport_core1, rnd, 2))
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 53)

        ureport_s = self.randomize_ureport(ureport_core1, rnd, 2)
        self.save_report_dict(ureport_s)
        self.save_report_dict(self.randomize_ureport(ureport_s, rnd, 0, 2))
        self.save_report_dict(self.randomize_ureport(ureport_s, rnd, 1, 2))
        self.save_report_dict(self.randomize_ureport(ureport_s, rnd, 1, 2))
        self.call_action("create-problems")
        self.assertEqual(self.db.session.query(Problem).count(), 54)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    unittest.main()
