#!/usr/bin/python
# -*- encoding: utf-8 -*-
import os
import sys
import logging
import unittest2 as unittest

sys.path.insert(0, os.path.abspath(".."))
os.environ["PATH"] = "{0}:{1}".format(os.path.abspath(".."), os.environ["PATH"])

import pyfaf
from pyfaf.storage.report import Report
from pyfaf.storage.problem import Problem
from utils import faftests

class BacktraceTestCase(faftests.RealworldCase):
    '''
    Test functionality related to backtrace processing.
    '''

    def test_backtrace_quality_low(self):
        '''
        Check if report has low quality
        reported correctly as it's missing
        source path and line number.
        '''
        self.save_report('f17_will_abort')
        rep = self.db.session.query(Report).one()
        bt = rep.sorted_backtraces[0]
        print bt
        self.assertEqual(bt.quality, -6)
        self.db.session.query(Report).delete()

    def test_backtrace_quality_lower(self):
        '''
        Check if report has low quality
        reported correctly as it's missing
        source path, line number and its
        symbol name is '??'.
        '''
        self.save_report('f17_will_abort_blanked')
        rep = self.db.session.query(Report).one()
        bt = rep.sorted_backtraces[0]
        self.assertEqual(bt.quality, -9)

    def test_backtrace_ordering(self):
        '''
        Make sure that backtraces are
        sorted correctly according to their
        quality.
        '''
        self.save_report('f17_will_abort')
        # alter build id so the next report
        # will use another SymbolSource
        rep = self.db.session.query(Report).one()
        f0 = rep.backtraces[0].frames[0]
        f0.symbolsource.build_id = 42
        self.db.session.flush()

        self.save_report('f17_will_abort_blanked')
        pyfaf.cluster.create_problems(self.db)
        prob = self.db.session.query(Problem).one()
        qs = map(lambda x: x.quality, prob.sorted_backtraces)
        self.assertGreater(qs[0], qs[1])

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    unittest.main()
