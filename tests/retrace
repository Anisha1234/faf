#!/usr/bin/python
# -*- encoding: utf-8 -*-
import Queue
import collections
import os
import sys
import logging
import unittest2 as unittest

sys.path.insert(0, os.path.abspath(".."))
os.environ["PATH"] = "{0}:{1}".format(os.path.abspath(".."), os.environ["PATH"])
from pyfaf.retrace import prepare_debuginfo_map, prepare_tasks, retrace_task, FafAsyncRpmUnpacker

from utils import faftests

WILL_CRASH_RESULT = [
                ('raise', '/lib64/libc.so.6', '64'),
                ('abort', '/lib64/libc.so.6', '93'),
                ('main', '/usr/bin/will_abort', '6')]

WILL_CRASH_RESULT_BLANKED = [
                ('raise', '/lib64/libc.so.6', '64'),
                ('abort', '/lib64/libc.so.6', '93'),
                ('??', '/usr/bin/will_abort', '6')]

class RetraceTestCase(faftests.RealworldCase):
    def do_retrace(self):
        workers_count = 2
        debuginfo_map = prepare_debuginfo_map(self.db)
        tasks = prepare_tasks(self.db, debuginfo_map)

        inqueue = collections.deque(tasks)
        outqueue = Queue.Queue(3 * workers_count)
        workers = []
        for i in xrange(workers_count):
            workers.append(FafAsyncRpmUnpacker("Worker #{0}".format(i), inqueue, outqueue))

        for worker in workers:
            logging.info("Spawning {0}".format(worker.name))
            worker.start()

        total = len(tasks)
        i = 0
        while True:
            i += 1
            wait = any([w.is_alive() for w in workers])
            try:
                task = outqueue.get(wait)
            except Queue.Empty:
                logging.info("All done!")
                break

            logging.info("[{0}/{1}] {2}".format(i, total, task["source"]["package"].nvr()))
            retrace_task(self.db, task)

        self.db.session.flush()

    def test_retrace_simple(self):
        self.save_report('f17_will_abort')
        self.do_retrace()
        self.compare_symbols(WILL_CRASH_RESULT)

    def test_retrace_blanked(self):
        self.save_report('f17_will_abort_blanked')
        self.do_retrace()
        self.compare_symbols(WILL_CRASH_RESULT_BLANKED)

    def test_retrace_usr_add(self):
        self.save_report('f17_will_abort_usr_add_required')
        self.do_retrace()
        self.compare_symbols(WILL_CRASH_RESULT)

    def test_retrace_usr_strip(self):
        self.save_report('f17_will_abort_usr_strip_required')
        self.do_retrace()
        self.compare_symbols(WILL_CRASH_RESULT)

    def test_retrace_duplicates(self):
        self.save_report('f17_will_abort')
        self.save_report('f17_will_abort_usr_add_required')
        self.save_report('f17_will_abort_usr_strip_required')
        self.do_retrace()
        self.compare_symbols(WILL_CRASH_RESULT)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    unittest.main()
