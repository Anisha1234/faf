#!/usr/bin/python
# -*- encoding: utf-8 -*-
import os
import sys
import logging
import datetime
import unittest2 as unittest

sys.path.insert(0, os.path.abspath(".."))
os.environ["PATH"] = "{0}:{1}".format(os.path.abspath(".."), os.environ["PATH"])

import pyfaf
from utils import faftests, mockzilla

from pyfaf.storage.opsys import (OpSysRelease, OpSysComponent)
from pyfaf.storage.problem import Problem


class BugzillaTestCase(faftests.RealworldCase):
    '''
    Tests bugzilla functionality.
    '''
    def setUp(self):
        '''
        Set up bugzilla instance with mockzilla.
        '''
        super(BugzillaTestCase, self).setUp()
        self.bz = pyfaf.bugzilla.Bugzilla(self.db, bz_url=None)
        self.mz = mockzilla.Mockzilla()
        self.bz.bz = self.mz

    def create_dummy_bug(self):
        '''
        Create dummy bug with pre-defined values.
        '''
        bug = dict(
            component='will-crash',
            product='Fedora',
            version='17',
            summary='Crashed...',
            description='Desc',
            status_whiteboard='abrt_hash:123 reports:15')
        self.bz.create_bug(**bug)

    def test_query_bugs(self):
        '''
        Check if bugzilla query uses correct parameters.
        '''
        from_date = datetime.date(2013, 1, 1)
        to_date = from_date + datetime.timedelta(days=1)
        self.bz.query_bugs(to_date, from_date,
                           limit=1, offset=1,
                           custom_fields=dict(test=True))

        params = self.mz.last_query_params
        self.assertEqual(params['chfieldfrom'], '2013-01-01')
        self.assertEqual(params['chfieldto'], '2013-01-02')
        self.assertEqual(params['test'], True)

    def test_all_bugs(self):
        '''
        Check if all_bugs works correctly.
        '''
        self.create_dummy_bug()

        from_date = datetime.date(2013, 1, 1)
        to_date = from_date + datetime.timedelta(days=7)
        ret = list(self.bz.all_bugs(
            to_date=to_date,
            from_date=from_date,
            step=2,
            stop_after_empty_steps=1))

        self.assertEqual(len(ret), 1)

        params = self.mz.last_query_params
        self.assertEqual(params['chfieldfrom'], '2013-01-04')
        self.assertEqual(params['chfieldto'], '2013-01-05')

    def test_all_abrt_bugs(self):
        '''
        Check if all_abrt_bugs updates query parameters correctly.
        '''
        list(self.bz.all_abrt_bugs())

        params = self.mz.last_query_params
        self.assertEqual(params['status_whiteboard'], 'abrt_hash')
        self.assertEqual(params['status_whiteboard_type'],
                         'allwordssubstr')
        self.assertEqual(params['product'], 'Fedora')

    def test_process_bug(self):
        '''
        Check if process_bug returns correct data.
        '''
        self.create_dummy_bug()
        bug = self.mz.bugs[1]
        bug.resolution = 'DUPLICATE'
        bug.dupe_id = '15'
        processed = self.bz.process_bug(bug)

        self.assertIs(type(processed), dict)
        self.assertIn('history', processed)
        self.assertEqual(processed['dupe_id'], '15')

    def test_process_bug_returns_none_correctly(self):
        '''
        Check if process_bug returns None in case of missing fields.
        '''
        self.assertIsNone(self.bz.process_bug(None))

    def test_user_handling(self):
        '''
        Check if user downloading and saving works correctly.
        '''
        user = self.bz.download_user('')
        self.bz.save_user(user)
        dbuser = self.bz.get_user(user.email)
        self.assertEqual(dbuser.id, user.userid)
        self.assertEqual(dbuser.name, user.name)
        self.assertEqual(dbuser.email, user.email)
        self.assertEqual(dbuser.can_login, user.can_login)
        self.assertEqual(dbuser.real_name, user.real_name)

    def test_save_user_handles_email_changes(self):
        '''
        Check if save_user can match users based on userid.
        '''
        user = self.bz.download_user('')
        dbuser1 = self.bz.save_user(user)
        user.email = 'changed@example.org'
        dbuser2 = self.bz.save_user(user)
        self.assertEqual(dbuser1, dbuser2)
        self.assertEqual(dbuser1.id, dbuser2.id)
        self.assertEqual(dbuser1.email, 'changed@example.org')

    def test_bug_handling(self):
        '''
        Check if bug downloading and saving works correctly.
        '''
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        dbbug = self.bz.save_bug(downloaded)
        self.assertIsNotNone(dbbug)
        self.assertEqual(len(dbbug.ccs), 1)
        self.assertEqual(len(dbbug.history), 1)
        self.assertEqual(len(dbbug.attachments), 1)
        self.assertEqual(len(dbbug.comments), 1)

        com = dbbug.comments.pop()
        att = dbbug.attachments.pop()

        self.assertEqual(com.attachment, att)

    def test_save_bug_updates_bugs(self):
        '''
        Check if save_bug updates bug when last change time
        differs.
        '''
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        dbbug = self.bz.save_bug(downloaded)
        downloaded['last_change_time'] += datetime.timedelta(days=1)
        downloaded['status'] = 'ON_QA'

        dbbug2 = self.bz.save_bug(downloaded)
        self.assertEqual(dbbug, dbbug2)
        self.assertEqual(dbbug2.status, 'ON_QA')
        self.assertEqual(dbbug2.last_change_time, downloaded['last_change_time'])

    def test_save_bug_missing_component(self):
        '''
        Check if save_bug return None if there's missing component.
        '''
        self.db.session.query(OpSysComponent).delete()
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        self.assertIsNone(self.bz.save_bug(downloaded))

    def test_save_bug_missing_release(self):
        '''
        Check if save_bug return None if there's missing OpSysRelease.
        '''
        self.db.session.query(OpSysRelease).delete()
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        self.assertIsNone(self.bz.save_bug(downloaded))

    def test_save_bug_add_component(self):
        '''
        Check if save_bug adds missing component.
        '''
        self.db.session.query(OpSysComponent).delete()
        self.create_dummy_bug()
        self.bz.add_components = True
        downloaded = self.bz.download_bug(1)
        self.assertIsNotNone(self.bz.save_bug(downloaded))

    def test_save_bug_add_release(self):
        '''
        Check if save_bug adds missing release.
        '''
        self.db.session.query(OpSysRelease).delete()
        self.create_dummy_bug()
        self.bz.add_opsysreleases = True
        downloaded = self.bz.download_bug(1)
        self.assertIsNotNone(self.bz.save_bug(downloaded))

    def test_comment_handling(self):
        '''
        Check if comments are saved correctly.
        '''
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        dbbug = self.bz.save_bug(downloaded)

        comment = dbbug.comments.pop()
        self.assertEqual(comment.id, self.mz.comment.id)
        self.assertEqual(comment.user.email, self.mz.comment.creator)
        self.assertEqual(comment.is_private, self.mz.comment.is_private)
        self.assertEqual(comment.creation_time, self.mz.comment.time)

    def test_cc_handling(self):
        '''
        Check if CCs are saved correctly.
        '''
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        dbbug = self.bz.save_bug(downloaded)

        cc = dbbug.ccs.pop()
        self.assertEqual(cc.user.email, downloaded['cc'][0])

    def test_history_handling(self):
        '''
        Check if history events are saved correctly.
        '''
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        dbbug = self.bz.save_bug(downloaded)

        event = dbbug.history.pop()
        orig = self.mz.history_event
        self.assertEqual(event.user.email, orig.who)
        self.assertEqual(event.time, orig.when)
        self.assertEqual(event.field, orig.changes[0].field_name)
        self.assertEqual(event.added, orig.changes[0].added)
        self.assertEqual(event.removed, orig.changes[0].removed)

    def test_attachment_handling(self):
        '''
        Check if attachments are saved correctly.
        '''
        self.create_dummy_bug()
        downloaded = self.bz.download_bug(1)
        dbbug = self.bz.save_bug(downloaded)

        new = dbbug.attachments.pop()
        orig = self.mz.attachment
        self.assertEqual(new.user.email, orig.attacher)
        self.assertEqual(new.mimetype, orig.content_type)
        self.assertEqual(new.description, orig.description)
        self.assertEqual(new.filename, orig.file_name)
        self.assertEqual(new.is_private, orig.is_private)
        self.assertEqual(new.is_patch, orig.is_patch)
        self.assertEqual(new.is_obsolete, orig.is_obsolete)
        self.assertEqual(new.creation_time, orig.creation_time)
        self.assertEqual(new.last_change_time, orig.last_change_time)

    def test_create_bugs_creates_correct_data(self):
        '''
        Check if bug created in mockzilla has appropriate information.
        '''
        pyfaf.config.CONFIG['hub.serverurl'] = 'https://example.org'
        pyfaf.config.CONFIG['hub.serveremail'] = 'server@example.org'

        self.save_report('f17_will_abort')
        pyfaf.cluster.create_problems(self.db)
        probs = self.db.session.query(Problem).all()
        self.bz.create_bugs(probs)

        self.assertEqual(len(self.mz.bugs), 1)
        bug = self.mz.bugs[1]

        self.assertEqual(bug['component'], 'will-crash')
        self.assertEqual(bug['product'], 'Fedora')
        self.assertEqual(bug['version'], '17')

        self.assertIn('will-crash', bug['summary'])
        self.assertIn('SIGABRT', bug['summary'])
        self.assertIn('in unknown function', bug['summary'])

        self.assertIn('reports count', bug['description'])
        self.assertIn('https://example.org/problems/1/', bug['description'])
        self.assertIn('server@example.org', bug['description'])

        self.assertNotIn('None', bug['summary'])
        self.assertNotIn('None', bug['description'])

        self.assertIn('abrt_hash', bug['status_whiteboard'])
        report_hash = probs[0].reports[0].backtraces[0].hash.hash
        self.assertIn(report_hash, bug['status_whiteboard'])
        self.assertIn('reports', bug['status_whiteboard'])
        self.assertIn(str(probs[0].reports_count), bug['status_whiteboard'])

    def test_create_bugs_downloads_bug(self):
        '''
        Check if create_bugs assigns newly created bugs correctly.
        '''
        self.save_report('f17_will_abort')
        pyfaf.cluster.create_problems(self.db)
        probs = self.db.session.query(Problem).all()
        self.bz.create_bugs(probs)

        prob = probs.pop()
        self.assertEqual(len(prob.bugs), 1)

    def test_create_bugs_with_query_no_ticket(self):
        '''
        Check if query_no_ticket returns correct candidates.
        '''
        self.save_report('f17_will_abort')
        pyfaf.cluster.create_problems(self.db)
        probs = pyfaf.bugzilla.query_no_ticket(self.db, 'Fedora',
                                               minimal_reports_threshold=3)

        self.assertEqual(probs, [])
        for i in range(2):
            self.save_report('f17_will_abort')
        probs = pyfaf.bugzilla.query_no_ticket(self.db, 'Fedora',
                                               minimal_reports_threshold=3)

        self.bz.create_bugs(probs)
        self.assertEqual(len(self.mz.bugs), 1)

    def test_update_bugs(self):
        '''
        Check if update_bugs updates appropriate tickets
        with correct data.
        '''
        pyfaf.config.CONFIG['hub.serverurl'] = 'https://example.org'

        self.save_report('f17_will_abort')
        pyfaf.cluster.create_problems(self.db)
        probs = self.db.session.query(Problem).all()
        self.bz.create_bugs(probs)
        bug = self.mz.bugs[1]
        old_whiteboard = bug['status_whiteboard']

        for i in range(2):
            self.save_report('f17_will_abort')

        self.bz.update_bugs(probs)

        new_whiteboard = bug['status_whiteboard']
        self.assertIn('reports:', new_whiteboard)
        self.assertIn('abrt_hash:', new_whiteboard)
        self.assertNotEqual(old_whiteboard, new_whiteboard)

        expected_wb = old_whiteboard.replace('reports:1',
                                             'reports:3')

        self.assertEqual(new_whiteboard, expected_wb)
        prob = probs.pop()
        dbbug = prob.bugs.pop()
        self.assertEqual(dbbug.whiteboard, expected_wb)
        for comment in dbbug.comments:
            if comment.id == 123:
                break

        text = comment.get_lob('content')
        self.assertIn('https://example.org/problems/1/', text)
        self.assertIn(str(prob.reports_count), text)

    def test_update_bugs_doesnt_update_too_soon(self):
        '''
        Check if update_bugs only updates bugs when neccessary -
        when previous reported count is twice as low as current.
        '''
        self.save_report('f17_will_abort')
        pyfaf.cluster.create_problems(self.db)
        probs = self.db.session.query(Problem).all()
        self.bz.create_bugs(probs)
        bug = self.mz.bugs[1]
        old_whiteboard = bug['status_whiteboard']

        # no update expected (reports count: 1)
        self.bz.update_bugs(probs)

        new_whiteboard = bug['status_whiteboard']
        self.assertEqual(old_whiteboard, new_whiteboard)

        self.save_report('f17_will_abort')

        # no update expected (reports count: 2)
        self.bz.update_bugs(probs)

        new_whiteboard = bug['status_whiteboard']
        self.assertEqual(old_whiteboard, new_whiteboard)

        self.save_report('f17_will_abort')

        # update expected (reports count: 3)
        self.bz.update_bugs(probs)

        new_whiteboard = bug['status_whiteboard']
        self.assertNotEqual(old_whiteboard, new_whiteboard)

        for i in range(4):
            self.save_report('f17_will_abort')

        # update expected (reports count: 7)
        self.bz.update_bugs(probs)

        newer_whiteboard = bug['status_whiteboard']
        self.assertNotEqual(new_whiteboard, newer_whiteboard)


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    unittest.main()
