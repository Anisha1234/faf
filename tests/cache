#!/usr/bin/python
# Test local cache implementation, including the
# command line client faf-cache.
import unittest
import tempfile
import shutil
import subprocess
import os
import sys
sys.path.insert(0, os.path.join(os.getcwd(), '..'))
import pyfaf

# Test command-line functionality
class CommandLineInterface(unittest.TestCase):
    def setUp(self):
        self.cache_dir = tempfile.mkdtemp(prefix="faf-cache-test")

    def tearDown(self):
        shutil.rmtree(self.cache_dir)

    USER_10_TEXT = """Id: 10
Email: test
CanLogin: True
Name: testuser
RealName: Test User
"""
    USER_10_DB_ROW = (10, "test", 1, "testuser", "Test User")

    def _cache_args(self, *args):
        return ["../faf-cache",
                "--cache-dir", self.cache_dir,
                "--db-type", "sqlite3"] + list(args)

    def _user_path(self, user_id):
        return os.path.join(self.cache_dir, "rhbz-user", str(user_id))

    def _add_user(self, user_id, user_text, user_db_row):
        # Test that add works with right parameters
        args = self._cache_args("add", "rhbz-user", str(user_id))
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate(user_text)
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

        with open(self._user_path(user_id), 'r') as f:
            self.assertEqual(f.read(), user_text)

        # Test database
        db = pyfaf.cache.db_connect(db_type="sqlite3",
                                    sqlite3_cache_dir=self.cache_dir)
        cursor = db.cursor()
        cursor.execute("select * from rhbz_user")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 1)
        self.assertEqual(rows[0], user_db_row)
        db.close()

    def test_add(self):
        # Valid add of one user.
        self._add_user(10, self.USER_10_TEXT, self.USER_10_DB_ROW)

    def test_show(self):
        # Test that show works with right parameters
        self._add_user(10, self.USER_10_TEXT, self.USER_10_DB_ROW)
        args = self._cache_args("show", "rhbz-user", "10")
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, self.USER_10_TEXT)
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

    def test_list(self):
        # Test list with no item
        args = self._cache_args("list", "rhbz-user")
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

        # Test list with one item
        self._add_user(10, self.USER_10_TEXT, self.USER_10_DB_ROW)
        args = self._cache_args("list", "rhbz-user")
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        self.assertEqual(proc.returncode, 0)
        self.assertEqual(stdout, "10\n")
        self.assertEqual(stderr, "")

        # Test list with %mtime formatting
        args = self._cache_args("list", "rhbz-user", "--format", "%id %mtime")
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        self.assertEqual(proc.returncode, 0)
        self.assertEqual(stdout, "10 {0}\n".format(os.stat(self._user_path(10)).st_mtime))
        self.assertEqual(stderr, "")

    def test_verify(self):
        # Test verify of a correct user
        self._add_user(10, self.USER_10_TEXT, self.USER_10_DB_ROW)
        args = self._cache_args("verify")
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

    def test_stats(self):
        # Full stats with single rhbz-user.
        self._add_user(10, self.USER_10_TEXT, self.USER_10_DB_ROW)
        args = self._cache_args("stats")
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        self.assertIn("rhbz-user: 1 entries, {0} bytes total (max {0} bytes, min {0} bytes)".format(
                len(self.USER_10_TEXT)), stdout)
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

    def test_remove(self):
        # Remove an user.
        self._add_user(10, self.USER_10_TEXT, self.USER_10_DB_ROW)
        args = self._cache_args("remove", "--target", "rhbz-user", "--id", "10")
        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

        # Test database
        db = pyfaf.cache.db_connect(db_type="sqlite3",
                                    sqlite3_cache_dir=self.cache_dir)
        cursor = db.cursor()
        cursor.execute("select * from rhbz_user")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 0)
        db.close()

if __name__ == '__main__':
    unittest.main()
