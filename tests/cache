#!/usr/bin/python
# Test local cache implementation, including the
# command line client faf-cache.
import unittest
import tempfile
import shutil
import subprocess
import os
import sys
import datetime
toplevel_path = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), ".."))
sys.path.insert(0, toplevel_path)
os.environ["PATH"] = "{0}:{1}".format(toplevel_path, os.environ["PATH"])
import pyfaf

class TestCase(unittest.TestCase):
    USER_10_TEXT = """Id: 10
Email: test
CanLogin: True
Name: testuser
RealName: Test User
"""

    def _cache_popen(self, args, stdin=None):
        args = ["faf-cache", "--cache-dir", self.cache_dir, "--db-type", "sqlite3"] + args
        return subprocess.Popen(args, stdout=subprocess.PIPE, stdin=stdin, stderr=subprocess.PIPE)

    def _create_user_10(self):
        # Test that add works with right parameters
        proc = self._cache_popen(args=["add", "rhbz-user", str(10)], stdin=subprocess.PIPE)
        stdout, stderr = proc.communicate(self.USER_10_TEXT)
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

    def setUp(self):
        self.cache_dir = tempfile.mkdtemp(prefix="faf-cache-test")

    def tearDown(self):
        shutil.rmtree(self.cache_dir)

# Test command-line functionality
class CommandLineInterface(TestCase):
    def _user_path(self, user_id):
        return os.path.join(self.cache_dir, "rhbz-user", str(user_id))

    def test_add(self):
        # Valid add of one user.
        self._create_user_10()

        # Test cache file
        with open(self._user_path(10), 'r') as f:
            self.assertEqual(f.read(), self.USER_10_TEXT)

        # Test cache database
        db = pyfaf.cache.db_connect(db_type="sqlite3", sqlite3_cache_dir=self.cache_dir)
        cursor = db.cursor()
        cursor.execute("SELECT * FROM rhbz_user")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 1)
        self.assertEqual(rows[0], (10, "test", 1, "testuser", "Test User"))
        db.close()

    def test_show(self):
        # Test that show works with right parameters
        self._create_user_10()
        proc = self._cache_popen(args=["show", "rhbz-user", "10"])
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, self.USER_10_TEXT)
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

    def test_list(self):
        # Test list with no item
        proc = self._cache_popen(args=["list", "rhbz-user"])
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

        # Test list with one item
        self._create_user_10()
        proc = self._cache_popen(args=["list", "rhbz-user"])
        stdout, stderr = proc.communicate()
        self.assertEqual(proc.returncode, 0)
        self.assertEqual(stdout, "10\n")
        self.assertEqual(stderr, "")

        # Test list with %mtime formatting
        proc = self._cache_popen(args=["list", "rhbz-user", "--format", "%id %mtime"])
        stdout, stderr = proc.communicate()
        self.assertEqual(proc.returncode, 0)
        self.assertEqual(stdout, "10 {0}\n".format(os.stat(self._user_path(10)).st_mtime))
        self.assertEqual(stderr, "")

    def test_verify(self):
        # Test verify of a correct user
        self._create_user_10()
        proc = self._cache_popen(args=["verify"])
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

    def test_stats(self):
        # Full stats with single rhbz-user.
        self._create_user_10()
        proc = self._cache_popen(args=["stats"])
        stdout, stderr = proc.communicate()
        self.assertIn("rhbz-user: 1 entries, {0} bytes total (max {0} bytes, min {0} bytes)".format(
                len(self.USER_10_TEXT)), stdout)
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

    def test_remove(self):
        # Remove an user.
        self._create_user_10()
        proc = self._cache_popen(args=["remove", "--target", "rhbz-user", "--id", "10"])
        stdout, stderr = proc.communicate()
        self.assertEqual(stdout, "")
        self.assertEqual(stderr, "")
        self.assertEqual(proc.returncode, 0)

        # Test database
        db = pyfaf.cache.db_connect(db_type="sqlite3", sqlite3_cache_dir=self.cache_dir)
        cursor = db.cursor()
        cursor.execute("SELECT * FROM rhbz_user")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 0)
        db.close()

# Test database functionality
class Database(TestCase):

    def _create_bug(self, bug_id=738387):
        proc = self._cache_popen(args=["add", "rhbz-bug", str(bug_id)], stdin=subprocess.PIPE)
        stdout, stderr = proc.communicate("""
Id: {0}
Summary: ipw2200 driver deadlocks with itself trying to take rtnl_mutex
Status: CLOSED
Resolution: ERRATA
CreationTime: 2011-09-14T17:06:00.000000
LastChangeTime: 2011-09-24T04:37:25.000000
Product: Fedora
ProductVersion: 16
Component: kernel
Whiteboard: AcceptedBlocker
CreatorId: 5319
Comments: 4017008, 4017016, 4017270, 4017404
Attachments: 523202, 523203, 523255, 523524
Cc: 273090, 281569, 182415, 211762, 176318
History:
- UserId: 163460
  Time: 2011-09-15T15:38:38.000000
  Field: cc
  Added: wwoods@redhat.com
- UserId: 140047
  Time: 2011-09-15T23:03:43.500000
  Field: cc
  Added: orion@cora.nwra.com
""".format(bug_id))
        self.assertEqual(proc.returncode, 0)

    def test_table_create_sqlite(self):
        self._create_bug(bug_id=738387)

        # Test that the table has been created.
        db = pyfaf.cache.db_connect(db_type="sqlite3", sqlite3_cache_dir=self.cache_dir)
        cursor = db.cursor()
        cursor.execute("SELECT * FROM sqlite_master")
        rows3 = [row[:3] for row in cursor.fetchall()]
        rows2 = [row[:2] for row in rows3]
        self.assertIn((u"table", u"rhbz_bug"), rows2)
        self.assertIn((u"table", u"rhbz_bug_comments"), rows2)
        self.assertIn((u"table", u"rhbz_bug_attachments"), rows2)
        self.assertIn((u"table", u"rhbz_bug_cc"), rows2)
        self.assertIn((u"table", u"rhbz_bug_history"), rows2)
        self.assertIn((u"index", u"rhbz_bug_id", "rhbz_bug"), rows3)
        self.assertIn((u"index", u"rhbz_bug_component", "rhbz_bug"), rows3)

        cursor.execute("PRAGMA table_info(rhbz_bug)")
        rows = [row[:3] for row in cursor.fetchall()]
        self.assertEqual(len(rows), 12)
        self.assertEqual(rows[0], (0, u"id", u"INTEGER"))
        self.assertEqual(rows[1], (1, u"summary", u"TEXT"))
        self.assertEqual(rows[2], (2, u"status", u"TEXT"))
        self.assertEqual(rows[3], (3, u"resolution", u"TEXT"))
        self.assertEqual(rows[4], (4, u"resolution_dup_id", u"INTEGER"))
        self.assertEqual(rows[5], (5, u"creation_time", u"TIMESTAMP"))
        self.assertEqual(rows[6], (6, u"last_change_time", u"TIMESTAMP"))
        self.assertEqual(rows[7], (7, u"product", u"TEXT"))
        self.assertEqual(rows[8], (8, u"product_version", u"TEXT"))
        self.assertEqual(rows[9], (9, u"component", u"TEXT"))
        self.assertEqual(rows[10], (10, u"whiteboard", u"TEXT"))
        self.assertEqual(rows[11], (11, u"creator_id", u"INTEGER"))

        cursor.execute("PRAGMA table_info(rhbz_bug_history)")
        rows = [row[:3] for row in cursor.fetchall()]
        self.assertEqual(len(rows), 6)
        self.assertEqual(rows[0], (0, u"rhbz_bug_id", u"INTEGER"))
        self.assertEqual(rows[1], (1, u"user_id", u"INTEGER"))

        cursor.execute("PRAGMA table_info(rhbz_bug_attachments)")
        rows = [row[:3] for row in cursor.fetchall()]
        self.assertEqual(len(rows), 2)
        self.assertEqual(rows[0], (0, u"rhbz_bug_id", u"INTEGER"))
        self.assertEqual(rows[1], (1, u"value", u"INTEGER"))

    def test_table_data_sqlite(self):
        self._create_bug(bug_id=738387)

        db = pyfaf.cache.db_connect(db_type="sqlite3", sqlite3_cache_dir=self.cache_dir)
        cursor = db.cursor()
        cursor.execute("SELECT * FROM rhbz_bug")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 1)
        row = rows[0]
        self.assertEqual(len(row), 12)
        self.assertEqual(row[0], 738387) # id
        self.assertEqual(row[1], u"ipw2200 driver deadlocks with itself trying to take rtnl_mutex") # summary
        self.assertEqual(row[2], u"CLOSED") # status
        self.assertEqual(row[3], u"ERRATA") # resolution
        self.assertEqual(row[4], None) # resolution_dup_id
        self.assertEqual(row[5], datetime.datetime(2011, 9, 14, 17, 6)) # creation_time
        self.assertEqual(row[6], datetime.datetime(2011, 9, 24, 4, 37, 25)) # last_change_time
        self.assertEqual(row[7], u"Fedora") # product
        self.assertEqual(row[8], u"16") # product_version
        self.assertEqual(row[9], u"kernel") # component
        self.assertEqual(row[10], u"AcceptedBlocker") # whiteboard
        self.assertEqual(row[11], 5319) # creatir_id

        cursor.execute("SELECT * FROM rhbz_bug_comments")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 4)
        # bug_id, value
        self.assertEqual(rows[0], (738387, 4017008))
        self.assertEqual(rows[1], (738387, 4017016))
        self.assertEqual(rows[2], (738387, 4017270))
        self.assertEqual(rows[3], (738387, 4017404))

        cursor.execute("SELECT * FROM rhbz_bug_history")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 2)
        # bug_id, user_id, time, field, added, removed
        self.assertEqual(rows[0], (738387, 163460, datetime.datetime(2011, 9, 15, 15, 38, 38), u"cc", u"wwoods@redhat.com", None))
        self.assertEqual(rows[1], (738387, 140047, datetime.datetime(2011, 9, 15, 23, 3, 43, 500000), u"cc", u"orion@cora.nwra.com", None))

        # Also test user data as it contains a boolean entry
        self._create_user_10()
        cursor.execute("SELECT * FROM rhbz_user")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 1)
        # id, email, can_login, name, real_name
        self.assertEqual(rows[0], (10, u"test", 1, u"testuser", u"Test User"))

    def test_table_data_remove_sqlite(self):
        db = pyfaf.cache.db_connect(db_type="sqlite3", sqlite3_cache_dir=self.cache_dir)
        cursor = db.cursor()

        # Test basic removal of single user.
        self._create_user_10()
        proc = self._cache_popen(args=["remove", "--target", "rhbz-user", "--id", "10"])
        stdout, stderr = proc.communicate()
        self.assertEqual(proc.returncode, 0)

        cursor.execute("SELECT * FROM rhbz_user")
        self.assertEqual(len(cursor.fetchall()), 0)

        # Test removal of a bug with subtables.  TODO: Insert two
        # bugs, remove one, check consistency of the remaining bug,
        # remove it, check that tables are empty.
        self._create_bug(bug_id=738387)
        self._create_bug(bug_id=738388)
        proc = self._cache_popen(args=["remove", "--target", "rhbz-bug", "--id", "738387"])
        stdout, stderr = proc.communicate()
        self.assertEqual(proc.returncode, 0)

        cursor.execute("SELECT * FROM rhbz_bug")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 1)
        self.assertEqual(rows[0][0], 738388)
        cursor.execute("SELECT * FROM rhbz_bug_comments")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 4)
        [self.assertEqual(row[0], 738388) for row in rows]
        cursor.execute("SELECT * FROM rhbz_bug_attachments")
        self.assertEqual(len(cursor.fetchall()), 4)
        cursor.execute("SELECT * FROM rhbz_bug_cc")
        self.assertEqual(len(cursor.fetchall()), 5)
        cursor.execute("SELECT * FROM rhbz_bug_history")
        rows = cursor.fetchall()
        self.assertEqual(len(rows), 2)
        [self.assertEqual(row[0], 738388) for row in rows]

        proc = self._cache_popen(args=["remove", "--target", "rhbz-bug", "--id", "738388"])
        stdout, stderr = proc.communicate()
        self.assertEqual(proc.returncode, 0)

        cursor.execute("SELECT * FROM rhbz_bug")
        self.assertEqual(len(cursor.fetchall()), 0)
        cursor.execute("SELECT * FROM rhbz_bug_comments")
        self.assertEqual(len(cursor.fetchall()), 0)
        cursor.execute("SELECT * FROM rhbz_bug_attachments")
        self.assertEqual(len(cursor.fetchall()), 0)
        cursor.execute("SELECT * FROM rhbz_bug_cc")
        self.assertEqual(len(cursor.fetchall()), 0)
        cursor.execute("SELECT * FROM rhbz_bug_history")
        self.assertEqual(len(cursor.fetchall()), 0)

        db.close()

if __name__ == '__main__':
    unittest.main()
