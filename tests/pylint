#!/usr/bin/python
# -*- encoding: utf-8 -*-
# Test code quality
import unittest
import subprocess
import os.path
import re

class PylintTest(unittest.TestCase):

    def setUp(self):
        pylint_proc = subprocess.Popen(["pylint", "./pyfaf", "--output-format=parseable", "--include-ids=yes"],
                                       cwd=os.path.abspath(".."),
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE)
        stdout, stderr = pylint_proc.communicate()
        #self.assertEqual(pylint_proc.returncode, 0)

        # Parse the output.
        self.issues = []
        for line in stdout.splitlines():
            match = re.match("^(pyfaf/[a-zA-Z0-9\\._/]+):(\\d+): \\[([A-Z])(\d+) ?([^\\]]*)\\] (.*)$", line)
            if match is None:
                continue
            self.issues.append(match.group(1, 2, 3, 4, 5, 6))

    def test_noErrors(self):
        # We fail on fatal errors and errors.
        for path, line, type, number, context, message in self.issues:
            self.assertNotEqual(type, "E", msg="Error {0}{1} found in {2}:{3}: {4} {5}".format(type, number, path, line, context, message))
            self.assertNotEqual(type, "F", msg="Fatal error {0}{1} found in {2}:{3}: {4} {5}".format(type, number, path, line, context, message))

    def test_limitNumberOfIssues(self):
        refactor = 0
        convention = 0
        warning = 0
        for path, line, type, number, context, message in self.issues:
            if type == "R":
                refactor += 1
            elif type == "C":
                convention += 1
            elif type == "W":
                warning += 1
            elif type == "I":
                # Ingore informational messages, such as:
                # pyfaf/cache/__init__.py:455 Locally disabling E1121.
                pass
            else:
                self.fail("Unknown pylint issue type {0}: {1}:{2}: {3}.".format(type, path, line, message))

        REFACTOR_LIMIT = 90
        self.assertLessEqual(refactor, REFACTOR_LIMIT, "Too many ({0}) refactor issues found by pylint. Run `pylint ./pyfaf` from the toplevel directory and fix at least {1} of them.".format(refactor, refactor - REFACTOR_LIMIT))

        CONVENTION_LIMIT = 540
        self.assertLessEqual(convention, CONVENTION_LIMIT, "Too many ({0}) code convention issues found by pylint. Run `pylint ./pyfaf` from the toplevel directory and fix at least {1} of them.".format(convention, convention - CONVENTION_LIMIT))

        WARNING_LIMIT = 510
        self.assertLessEqual(warning, WARNING_LIMIT, "Too many ({0}) warnings found by pylint. Run `pylint ./pyfaf` from the toplevel directory and fix at least {1} of them.".format(warning, warning - WARNING_LIMIT))

if __name__ == '__main__':
    unittest.main()
