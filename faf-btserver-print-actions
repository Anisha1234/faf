#!/usr/bin/python
# Copyright (C) 2012 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import logging
import btparser

def get_distance(name, thread1, thread2):
    distances = btparser.Distances(name, [thread1, thread2], 2)
    return distances.get_distance(0, 1)

def print_threads(threads):
    for level in xrange(max(map(lambda thread: len(thread.frames), threads))):
        if level == pyfaf.btserver.optimized_thread_max_frames:
            print
        print "{0:5}|".format(level),
        for thread in threads:
            if level < len(thread.frames):
                frame = thread.frames[level]
                print "{0:50.50} |".format(str(frame.get_function_name()) + " (" +
                        str(frame.get_library_name()) + ")"),
        print

def print_cluster(bugs):
    print "  cluster:"
    for bug in bugs:
        orig_component = pyfaf.btserver.get_original_component(db, bug)
        if orig_component != bug.component and orig_component != None:
            print "{0} =>".format(str(orig_component)),
        print "    {0}({1}):".format(bug.id, bug.component),
        print "{1:3} comments, last modified on {2}, {3:2} CC, {0}".format(str(bug.status) + ":" + str(bug.resolution), len(bug.comments), bug.last_change_time, len(bug.cc))
    print "  frame components:"
    for bug in bugs:
        print "    {0}: {1}".format(bug.id, pyfaf.btserver.get_frame_components(db, bug.id))

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.cache.Database()

logging.info("Searching DB for actions.")

action_ids = pyfaf.run.cache_list_id("rhbz-action")
actions = [pyfaf.run.cache_get("rhbz-action", i) for i in action_ids]

action_clusters = dict()
for action in actions:
    if action.cluster_id not in action_clusters:
        action_clusters[action.cluster_id] = []
    action_clusters[action.cluster_id].append(action)

dups = 0
change_comps = 0
add_comments = 0
dups_counts = dict()
dups_dst_counts = dict()
comps_src_counts = dict()
comps_dst_counts = dict()

logging.info("Printing actions.")
for (cluster_id, actions) in action_clusters.iteritems():
    print "=" * 46, "cluster ID: {0:6}".format(cluster_id), "=" * 46
    bug_ids = pyfaf.run.cache_get("rhbz-cluster", cluster_id).bugs

    bugs = dict()
    crash_threads = dict()
    optimized_threads = dict()

    for bug_id in bug_ids:
        bugs[bug_id] = pyfaf.run.cache_get("rhbz-bug", bug_id)
    actions.sort(key=lambda a: a.id)

    for action in actions:
        print
        if action.action == "CLOSE_AS_DUPLICATE":
            bug_src = bugs[action.bug_id]
            bug_dst = bugs[int(action.value)]

            for bug_id in [bug_src.id, bug_dst.id]:
                if bug_id not in crash_threads:
                    backtrace = pyfaf.btserver.get_backtrace(db, bug_id)
                    crash_threads[bug_id] = pyfaf.btserver.get_crash_thread(backtrace.dup())
                    optimized_threads[bug_id] = pyfaf.btserver.get_optimized_thread(backtrace)

            print "CLOSE_AS_DUPLICATE: {0}({2}) => {1}({3})".format(bug_src.id, bug_dst.id, bug_src.component, bug_dst.component)
            print "  distances: ol:{0:3.2f} oj:{1:3.2f} fl:{2:3.2f} fj:{3:3.2f}".format(
                    get_distance("levenshtein", optimized_threads[bug_src.id], optimized_threads[bug_dst.id]),
                    get_distance("jaccard", optimized_threads[bug_src.id], optimized_threads[bug_dst.id]),
                    get_distance("levenshtein", crash_threads[bug_src.id], crash_threads[bug_dst.id]),
                    get_distance("jaccard", crash_threads[bug_src.id], crash_threads[bug_dst.id]))

            print "  threads:"
            print_threads([crash_threads[bug.id] for bug in [bug_src, bug_dst]])

            dups += 1
            if bug_src.component not in dups_counts:
                dups_counts[bug_src.component] = 0
            dups_counts[bug_src.component] += 1
        elif action.action == "CHANGE_COMPONENT":
            components = str(action.value).split()
            print "CHANGE_COMPONENT({0}): {1} => {2} ({3})".format(action.bug_id, bugs[action.bug_id].component, components[0], components)
            print_cluster(bugs.values())
            change_comps += 1
            comp_src = bugs[action.bug_id].component
            comp_dst = components[0]
            if comp_src not in comps_src_counts:
                comps_src_counts[comp_src] = 0
            comps_src_counts[comp_src] += 1
            if comp_dst not in comps_dst_counts:
                comps_dst_counts[comp_dst] = 0
            comps_dst_counts[comp_dst] += 1
        elif action.action == "ADD_COMMENT":
            print "ADD_COMMENT({2}): {0}({1})".format(action.bug_id, bugs[action.bug_id].component, action.value)
            print_cluster(bugs.values())
            add_comments += 1
        else:
            assert False
    print

comps_src_counts = comps_src_counts.items()
comps_dst_counts = comps_dst_counts.items()
dups_counts = dups_counts.items()
comps_src_counts.sort(key=lambda x: x[1], reverse=True)
comps_dst_counts.sort(key=lambda x: x[1], reverse=True)
dups_counts.sort(key=lambda x: x[1], reverse=True)

print "=" * 51, "SUMMARY", "=" * 51
print "\nACTIONS:"
print "  CLOSE_AS_DUPLICATE: {0}".format(dups)
print "  CHANGE_COMPONENT: {0}".format(change_comps)
print "  ADD_COMMENT: {0}".format(add_comments)
print "\nCOMPONENTS:"
print "  TOP10 closed as dup:"
for x in dups_counts[:10]:
    print "    {0}: {1}".format(x[1], x[0])
print "  TOP10 unassigned:"
for x in comps_src_counts[:10]:
    print "    {0}: {1}".format(x[1], x[0])
print "  TOP10 assigned:"
for x in comps_dst_counts[:10]:
    print "    {0}: {1}".format(x[1], x[0])

db.close()
