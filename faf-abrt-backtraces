#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import subprocess
import sys
import re

pyfaf.handle_verbosity_args(sys.argv)
pyfaf.log1("Searching local cache for ABRT-reported bugs.\n")
cache_bugs = pyfaf.run.cache_list_id("rhbz-bug")
pyfaf.log1("Found {0} ABRT-reported bugs in local cache.\n".format(len(cache_bugs)))

offset = 0
for bug_id in cache_bugs:
    offset += 1
    pyfaf.log1("[{0}/{1}] Bug #{2}.\n".format(offset, len(cache_bugs), bug_id))
    bug = pyfaf.run.cache_get("rhbz-bug", bug_id)

    # Check if it's ABRT-reported bug
    if not bug.summary.startswith("[abrt]") and "abrt" not in bug.whiteboard:
        pyfaf.log2(" - not an ABRT-reported bug\n")
        continue

    backtrace_attachment = None
    for attachment_id in bug.attachments:
        attachment = pyfaf.run.cache_get("rhbz-attachment", attachment_id, failure_allowed=True)
        if attachment is None:
            pyfaf.log1(" - missing attachment #{0}\n".format(attachment_id))
            continue
        if attachment.is_url or attachment.is_patch or attachment.is_obsolete or attachment.file_name != "backtrace":
            continue
        backtrace_attachment = attachment
        break

    if backtrace_attachment is None:
        pyfaf.log2(" - failed to find backtrace attachment\n")
        continue

    # Recognize GDB backtraces and Python backtraces.
    bt_type = "c"
    lines = backtrace_attachment.contents.splitlines()
    if len(lines) <= 2:
        pyfaf.log2(" - backtrace too short!\n")
        continue

    if "Traceback (most recent call last):" in lines[2]:
        bt_type = "python"

    with file("backtraces_{0}/{1}".format(bt_type, bug.id), "wb") as f:
        f.write(backtrace_attachment.contents)
