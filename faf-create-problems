#!/usr/bin/python
# Copyright (C) 2012 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import logging
from pyfaf.storage import *

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Create problems from reports.")
cmdline_parser.add_argument("--only-new", action="store_true", default=False, help="Keep old problems.")
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.storage.Database(debug=cmdline_args.verbose > 2)

logging.info("Searching reports.")
if cmdline_args.only_new:
    reports = db.session.query(Report).filter(Report.problem == None).all()
else:
    reports = db.session.query(Report).all()
    logging.info("Removing old problems.")
    for problemcomponent in db.session.query(ProblemComponent).all():
        db.session.delete(problemcomponent)
    for problem in db.session.query(Problem).all():
        db.session.delete(problem)

# For now, just create one problem per report.
logging.info("Creating problems.")
for report in reports:
    logging.debug("Creating problem for report #{0}.".format(report.id))
    problem = Problem()
    problem.first_occurence = report.first_occurence
    problem.last_occurence = report.last_occurence

    for i, component in enumerate([report.component]):
        problemcomponent = ProblemComponent()
        problemcomponent.problem = problem
        problemcomponent.component = component
        problemcomponent.order = i
        db.session.add(problemcomponent)

    db.session.add(problem)
    report.problem = problem

db.session.flush()
