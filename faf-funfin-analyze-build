#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# funfin = Function Fingerprint
import pyfaf
import logging
import os
import subprocess
import shutil
import sys

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Analyze builds.")
cmdline_parser.add_argument("os_prefix")
cmdline_parser.add_argument("build_id", type=int, help="build id")
cmdline_args = cmdline_parser.parse_args()

KOJI_BUILD_TARGET = "{0}-koji-build".format(cmdline_args.os_prefix)
FUNFIN_REPORT_TARGET = "{0}-koji-build-funfin-report".format(cmdline_args.os_prefix)

# Load the rpms from cache
rpms = pyfaf.koji.get_rpm_entries(cmdline_args.os_prefix, cmdline_args.build_id)

report = pyfaf.cache.koji_build_funfin_report.KojiBuildFunfinReport()
report.id = cmdline_args.build_id

# Unpacking the RPMs
for rpm_entry in rpms:
    logging.debug("Unpacking #{0}: {1}".format(rpm_entry.id, rpm_entry.envra()))
    pyfaf.koji.unpack_rpm_entry(cmdline_args.os_prefix, rpm_entry)

    # Set sane access rights. This is necessary to for removing the
    # files.
    rpm_entry.file_modes = {}
    for root, dirs, files in os.walk(rpm_entry.nvra()):
        for f in files:
            fullpath = os.path.join(root, f)
            if not os.path.islink(fullpath):
                rpm_entry.file_modes[fullpath] = os.stat(fullpath).st_mode
                os.chmod(fullpath, 0644)
        for d in dirs:
            fullpath = os.path.join(root, d)
            if not os.path.islink(fullpath):
                os.chmod(fullpath, 0755)

for rpm_entry in rpms:
    report_rpm = pyfaf.cache.koji_build_funfin_report.Rpm()
    report_rpm.id = rpm_entry.id

    rpm_files = []
    for root, dirs, files in os.walk(rpm_entry.nvra()):
        rpm_files.extend([os.path.join(root, f) for f in files])

    for rpm_file in rpm_files:
        # The file utility recognizes an ELF binary.
        file_proc = subprocess.Popen(["file", rpm_file], stdout=subprocess.PIPE)
        file_out = file_proc.communicate()[0]
        if file_proc.returncode != 0:
            sys.stderr.write("File call failed.\n")
            exit(1)
        if " ELF " not in file_out:
            continue

        # Do not analyze debuginfo files.
        if rpm_file.endswith(".debug"):
            continue

        # Find the corresponding debuginfo
        debuginfo_path = os.path.join("usr/lib/debug", rpm_file.replace(rpm_entry.nvra(), "")[1:] + ".debug")
        debuginfo_file = None
        for debug_rpm_entry in rpms:
            if debug_rpm_entry.architecture != rpm_entry.architecture:
                continue
            debuginfo_fullpath = os.path.join(debug_rpm_entry.nvra(), debuginfo_path)
            if os.path.isfile(debuginfo_fullpath):
                debuginfo_file = debuginfo_fullpath
                break

        if debuginfo_file is None:
            logging.info("  - failed to find debuginfo for {0}: {1}".format(rpm_file, debuginfo_path))
            for debug_rpm_entry in rpms:
                if debug_rpm_entry.architecture != rpm_entry.architecture:
                    continue
                debuginfo_fullpath = os.path.join(debug_rpm_entry.nvra(), debuginfo_path)
                logging.info("    - tried: {0}".format(debuginfo_fullpath))
            continue

        logging.info("  - checking {0}".format(rpm_file))
        logging.info("  - debuginfo {0}".format(debuginfo_file))
        # Run binary analysis and parse the output
        bin_proc = subprocess.Popen(["faf-funfin-analyze-binary", rpm_file, debuginfo_file], stdout=subprocess.PIPE)
        bin_out = bin_proc.communicate()[0]
        if bin_proc.returncode != 0:
            sys.stderr.write("faf-funfin-analyze-binary call failed.\n")
            exit(1)

        binary_output = pyfaf.cache.koji_build_funfin_report.binary_parser.from_text(bin_out, failure_allowed=False)
        binary_output.id = binary_output.id.replace(rpm_entry.nvra(), "")
        report_rpm.binaries.append(binary_output)
    report.rpms.append(report_rpm)

for rpm_entry in rpms:
    shutil.rmtree(rpm_entry.nvra())
    os.remove(rpm_entry.filename())

# Store the report
pyfaf.run.cache_add(report, overwrite=True, target_name=FUNFIN_REPORT_TARGET)
