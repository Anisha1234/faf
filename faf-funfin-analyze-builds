#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import sys
import subprocess
import logging

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Analyze builds.")
cmdline_parser.add_argument("os_prefix")
cmdline_parser.add_argument("--only-missing", action="store_true", default=False,
                            help="check only builds that were not analyzed yet")
cmdline_parser.add_argument("--build-id", type=int, help="check single build")
cmdline_args = cmdline_parser.parse_args()

KOJI_BUILD_TARGET = "{0}-koji-build".format(cmdline_args.os_prefix)
FUNFIN_REPORT_TARGET = "{0}-koji-build-funfin-report".format(cmdline_args.os_prefix)

# Load build ids from local cache
logging.info("Loading Koji build list from {0}.".format(KOJI_BUILD_TARGET))
build_id_list = pyfaf.run.cache_list_id(KOJI_BUILD_TARGET)
logging.info("Found {0} Koji builds in {1}.".format(len(build_id_list), KOJI_BUILD_TARGET))

if cmdline_args.only_missing:
    # Load reports from local cache
    logging.info("Loading funfin reports from {0}.".format(FUNFIN_REPORT_TARGET))
    funfin_report_list = pyfaf.run.cache_list_id(FUNFIN_REPORT_TARGET)
    logging.info("Found {0} funfin reports in {1}.".format(len(funfin_report_list), FUNFIN_REPORT_TARGET))

    # Remove builds from build_id_list with already existing funfin report.
    old_size = len(build_id_list)
    for bid in build_id_list[:]:
        if bid in funfin_report_list:
            build_id_list.remove(bid)
    logging.info("Skipping {0} builds with existing reports.".format(old_size - len(build_id_list)))

# Single build
if cmdline_args.build_id is not None:
    if cmdline_args.build_id in build_id_list:
        build_id_list = [cmdline_args.build_id]
    else:
        build_id_list = []

index = 0
for build_id in build_id_list:
    index += 1
    logging.info("[{0}/{1}] Processing build #{2}.".format(index, len(build_id_list), build_id))
    build = pyfaf.run.cache_get(KOJI_BUILD_TARGET, build_id, parser_module=pyfaf.cache.koji_build)

    analyze_args = ["faf-funfin-analyze-build", cmdline_args.os_prefix, str(build_id)]
    # Make the child tool verbose as this tool is.
    analyze_args.extend(cmdline_args.verbose * ["-v"])
    analyze_proc = subprocess.Popen(analyze_args, stderr=subprocess.PIPE)
    stdout, stderr = analyze_proc.communicate()
    if stderr:
        stderr = stderr.decode('utf-8')
    if analyze_proc.returncode != 0:
        if "Failed to get {0}-koji-rpm".format(cmdline_args.os_prefix) in stderr:
            logging.info("  - terminated processing because an rpm is missing")
            continue
        else:
            sys.stderr.write("Unexpected return code {0} from {1}.\nError output: {2}\n".format(analyze_proc.returncode, analyze_args, stderr))
            exit(1)
