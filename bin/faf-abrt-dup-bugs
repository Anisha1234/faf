#!/usr/bin/python
# Find duplicates in ABRT-reported Bugzilla bugs.
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Search for duplicates using local btparser duplication checker.
# Some bugs in Bugzilla were reported by older ABRT versions, which
# had poor duplication detection.
import pyfaf
import bugzilla
import sys
import subprocess
import cPickle
import glob

def close_bug_as_duplicate(bz, item, master, dry_run=False):
    """Close a bug in a Bugzilla instance as a duplicate of another bug.

    Arguments:
    * `bz` -- An object representing opened connection to Bugzilla.
    * `item` -- The bug to be closed as a duplicate. It's an instance of
    the dictionary object.
    * `master` -- The bug that the closed bug will refer to. It's an
    instance of the dictionary object.
    * `dry_run` -- Don't actually close the bug. Instead, just show the
    message documenting how the bug would otherwise be closed (default
    False).

    Close `item` as a duplicate of `master`.  Both `item` and `master`
    are dictionaries that must contain keys "id", "comments", and
    "product_version". The key "id" is associated with a value
    representing a bug number, such as "565411". The value associated
    with the "comments" key is an array with one item per one
    comment. The key "product_version" is associated with a value
    representing the version of Fedora the bug is reported to, such as
    "12", or "13".

    """
    print "Closing bug #{0} with {1} comments from F-{2}" \
        " as a duplicate of #{3} from F-{4}.".format(item['id'],
                                                     len(item['comments']),
                                                     item['product_version'],
                                                     master['id'],
                                                     master['product_version'])
    print

    if dry_run:
        return

    bug = bz.getbug(int(item['id']))

    message = "This bug appears to have been filled using a buggy version of ABRT, because\n" \
        "it contains a backtrace which is a duplicate of backtrace from bug #{0}.\n\n" \
        "Sorry for the inconvenience.".format(master['id'])
    bug.close("DUPLICATE", int(master['id']), "", message)

def print_bug_comments(comments, terminal_controller, color):
    """Print the bug comments to the standard output.

    The `comments` is an array with one item per one comment. Every item
    in this array is a dictionary, which must contain the following keys
    and associated values:
    * "count" -- the comment number in the particular bug, starting from
      zero
    * "body" -- the text of the comment
    * "author" -- a dictionary representing the author of the comment
    * "time" -- the time this comment was added to the bug (a string in
      format "YYYY-MM-DD HH:MM:SS")
    * "email" -- email address of the comment author
    * "type" -- represents the type of the comment:
      - 0 is a common comment
      - 1 is a comment about marking this bug being a duplicate of
        another bug
      - 2 is a comment about other bug being closed as a duplicate of
        this bug
      - 5 is a comment made when attaching a new file
    * "bug_id" -- the bug number this comment is associated to
    * "extra_data" -- when the comment type is 1 or 2, this field
      contains the associated bug id; when the comment type is 5
      (attaching a new file), this field contains the attachment id
      (for example 455634)

    The dictionary representing the comment author must contain the
    following keys and associated values:
    * "realname" -- the name of the author (may be empty)
    * "login_name" -- the Bugzilla login of the author

    """
    for comment in comments:
        author = comment['author']['realname'].encode("utf-8")
        if len(author) == 0:
            author = comment['author']['login_name']

        if terminal_controller and color:
            print terminal_controller.DIM + "== " + \
                terminal_controller.NORMAL + \
                terminal_controller.YELLOW + "Comment #{0}".format(comment['count']) + \
                terminal_controller.NORMAL + \
                "  {0}  {1}".format(author, comment['time'])
        else:
            print "== Comment #{0}  {1}  {2}".format(comment['count'],
                                                     author,
                                                     comment['time'])

        if int(comment['type']) == 0:
            pass
        elif int(comment['type']) == 1:
            print "This bug was marked as a duplicate of bug #{1}.".format(comment['extra_data'])
        elif int(comment['type']) == 2:
            print "Bug #{0} was marked as a duplicate of this bug.".format(comment['extra_data'])
        elif int(comment['type']) == 5:
            print "A new attachment #{0} was added.".format(comment['extra_data'])
        else:
            print "Error: unknown comment type {0} in bug {1}".format(comment['type'],
                                                                      comment['bug_id'])
        print comment['body']
        print

def print_h1_header(header, terminal_controller, color):
    """Print a header."""
    if terminal_controller and color:
        print terminal_controller.BOLD + "*** " + header + " ***" + terminal_controller.NORMAL
    else:
        print "*** " + header + " ***"

def manual_bug_action_show_commands(item, master, terminal_controller=None, color=False):
    """Display available commands about what to do with a detected bug
    duplicate to user.

    Arguments:
    * `item` -- The bug to be closed as a duplicate. It's an instance of
      the dictionary object.
    * `master` -- The bug that the closed bug will refer to. It's an
      instance of the dictionary object.
    * `terminal_controller` -- Must be either None or an instance of
      `TerminalController` class.  If it is a `TerminalController`, it
      is used to improve the standard output depending on terminal
      width and height.
    * `color` -- Colorize output if `terminal_controller` is available.

    """
    print_h1_header("Commands", terminal_controller, color)
    c1 = "1: Close #{0} as a duplicate of #{1}" \
        " (F-{2}, {3} comments)".format(item['id'],
                                       master['id'],
                                       master['product_version'],
                                       len(master['comments']))
    c2 = "2: Close #{0} as a duplicate of #{1}" \
        " (F-{2}, {3} comments)".format(master['id'],
                                       item['id'],
                                       item['product_version'],
                                       len(item['comments']))
    c3 = "3: Display comments of bug #{0}".format(item['id'])
    c4 = "4: Display comments of bug #{0}".format(master['id'])
    c5 = "5: Open bug #{0} in web browser".format(item['id'])
    c6 = "6: Open bug #{0} in web browser".format(master['id'])

    if terminal_controller:
        middle = terminal_controller.cols() / 2
        if middle > len(c1) + 2 and \
                middle > len(c2) and \
                middle > len(c3) + 2 and \
                middle > len(c4) and \
                middle > len(c5) + 2 and \
                middle > len(c6):
            print "  " + c1 + " " * (middle - len(c1) - 2) + c2
            print "  " + c3 + " " * (middle - len(c3) - 2) + c4
            print "  " + c5 + " " * (middle - len(c5) - 2) + c6
        else:
            print "  " + c1
            print "  " + c2
            print "  " + c3
            print "  " + c4
            print "  " + c5
            print "  " + c6
    else:
        print "  " + c1
        print "  " + c2
        print "  " + c3
        print "  " + c4
        print "  " + c5
        print "  " + c6

    print "  7: Display the backtrace"
    print "  8: Skip this one"
    print "  9: Exit"

def manual_bug_action_ask(bz, item, master, dry_run=False,
                          terminal_controller=None, color=False):
    """Ask user what to do with a detected bug duplicate.

    Arguments:
    * `bz` -- An object representing opened connection to Bugzilla.
    * `item` -- The bug to be closed as a duplicate. It's an instance of
      the dictionary object.
    * `master` -- The bug that the closed bug will refer to. It's an
      instance of the dictionary object.
    * `backtrace` -- The backtrace extract that led to the duplication
      discovery. It's a string.
    * `dry_run` -- Don't actually close any bug. Instead, just show
      the message documenting how the bug would otherwise be closed
      (default False).
    * `terminal_controller` -- Must be either None or an instance of
      `TerminalController` class.  If it is a `TerminalController`, it
      is used to improve the standard output depending on terminal
      width and height.
    * `color` -- Colorize output if `terminal_controller` is available.

    Both `item` and `master` are dictionaries that must contain keys
    "id", "comments", and "product_version". The key "id" is associated
    with a value representing a bug number, such as "565411". The value
    associated with the "comments" key is an array with one item per one
    comment. The key "product_version" is associated with a value
    representing the version of Fedora the bug is reported to, such as
    "12", or "13".

    The "comments" value in `item` and `master` must satisfy all the
    requirements of the function `print_bug_comments`, because this
    function is called with the comments arrays.

    """
    manual_bug_action_show_commands(item, master, terminal_controller, color)
    sys.stdout.write("What now> ")
    char = faf.terminal.getch()
    sys.stdout.write(char + "\n\n")

    if char == '1':
        return close_bug_as_duplicate(bz, item, master, dry_run)
    elif char == '2':
        return close_bug_as_duplicate(bz, master, item, dry_run)
    elif char == '3':
        print_h1_header("Comments of #{0}".format(item['id']),
                        terminal_controller, color)
        print_bug_comments(item['comments'],
                           terminal_controller,
                           color)
        return manual_bug_action_ask(bz, item, master, dry_run,
                                     terminal_controller, color)
    elif char == '4':
        print_h1_header("Comments of #{0}".format(master['id']),
                        terminal_controller, color)
        print_bug_comments(master['comments'],
                           terminal_controller,
                           color)
        return manual_bug_action_ask(bz, item, master, dry_run,
                                     terminal_controller, color)
    elif char == '5':
        arg1 = "https://bugzilla.redhat.com/" \
            "show_bug.cgi?id={0}".format(item['id'])
        open_args = [ "/usr/bin/xdg-open", arg1 ]
        subprocess.Popen(open_args).communicate()
        return manual_bug_action_ask(bz, item, master, dry_run,
                                     terminal_controller, color)
    elif char == '6':
        arg1 = "https://bugzilla.redhat.com/" \
            "show_bug.cgi?id={0}".format(master['id'])
        open_args = [ "/usr/bin/xdg-open", arg1 ]
        subprocess.Popen(open_args).communicate()
        return manual_bug_action_ask(bz, item, master, dry_run,
                                     terminal_controller, color)
    elif char == '7':
        print_h1_header("Backtrace of #{0} and #{1}".format(item['id'],
                                                            master['id']),
                        terminal_controller, color)
        print item['backtrace_duplication_hash']
        return manual_bug_action_ask(bz, item, master, dry_run,
                                     terminal_controller, color)
    elif char == '8':
        print "Skipping."
        return False
    elif char == '9':
        print "Bye."
        exit(0)
    else:
        return manual_bug_action_ask(bz, item, master, dry_run,
                                     terminal_controller, color)

def manual_bug_action(bz, item, master, dry_run=False,
                      terminal_controller=None, color=False):
    """Print the additional bug comments that prevent to close a
    detected bug duplicate, and ask user what to do with it.

    Arguments:
    * `bz` -- See function `manual_bug_action_ask`, which needs this
      parameter.
    * `item` -- The bug to be closed as a duplicate. It's an instance of
      the dictionary object. It must contain a "comments" key and the
      associated value must satisfy all the requirements of the function
      `print_bug_comments` on its parameter. See also the function
      `manual_bug_action_ask`, which uses this parameter.
    * `master` -- See the function `manual_bug_action_ask`, which uses
      this parameter.
    * `backtrace` -- See the function `manual_bug_action_ask`, which
      uses this parameter.
    * `dry_run` -- See the function `manual_bug_action_ask`, which uses
      this parameter (default False).
    * `terminal_controller` -- Must be either None or an instance of
      `TerminalController` class.  If it is a `TerminalController`, it
      is used to improve the standard output depending on terminal
      width and height.
    * `color` -- Colorize output if `terminal_controller` is available.

    """
    print_h1_header("A bug with too many comments: #{0}".format(item['id']),
                    terminal_controller,
                    color)
    print_bug_comments(item['comments'][2:],
                       terminal_controller,
                       color)
    return manual_bug_action_ask(bz, item, master, dry_run,
                                 terminal_controller, color)

def bug_duplicates_compare(x, y):
    """Compare two bugs `x` and `y`. Return -1, zero or +1 number
    depending on whether the first bug is considered less important
    than, equal to, or more important than the second bug.

    The compared bugs are recognized duplicates.  The goal is to sort
    the duplicates and close all of them except the most important one
    as a duplicate of it.

    The bug which is not going to be closed due to Fedora release end of
    life is considered more important. So, when Fedora 12 is going to be
    end-of-life soon, Fedora 12 bugs should be closed as a duplicate of
    Fedora 13 bugs. Otherwise the only remaining Fedora 12 bug would be
    automatically closed by a script soon.

    When the Fedora versions do not make the difference, the bug with
    more comments is considered to be more important, because people (or
    machines) discuss it.

    When the comment count does not make the difference, the older bug
    is considered to be more important, because it was discovered first.

    Both `x` and `y` are dictionaries that must contain keys "id",
    "comments", and "product_version". The key "id" is associated with a
    value representing a bug number, such as "565411". The value
    associated with the "comments" key is an array with one item per one
    comment. The key "product_version" is associated with the version of
    Fedora the bug is reported to, such as "12", "13", or "rawhide".

    """
    # Lower priority to end-of-life bugs.
    try:
        if int(x['product_version']) == 12 and int(y['product_version']) != 12:
            return 1
        elif int(x['product_version']) != 12 and int(y['product_version']) == 12:
            return -1
    except ValueError:
        # The product version is "rawhide", or something else
        # nonconvertible to int.
        pass

    # Lower priority to bugs with less comments.
    if len(x['comments']) < len(y['comments']):
        return 1
    elif len(x['comments']) > len(y['comments']):
        return -1

    # Lower priority to newer bugs.
    if int(x['id']) > int(y['id']):
        return 1
    elif int(x['id']) < int(y['id']):
        return -1

    # Ok, the bugs are identical.
    return 0

def close_duplicates(dups, dry_run=False, terminal_controller=None, color=False):
    """
    dups - array of bugdata maps
    """
    bz = bugzilla.RHBugzilla()
    bz.connect(cmdline_args.bugzilla)
    bz.login(cmdline_args.user, cmdline_args.password)

    for bugitems in dups:
        # Find the master bug item
        # Its the one with the most comments.

        # Sort the duplicates by the number of comments.
        # Select the bug with the highest number of comments as the master bug.
        # All other bugs without user comments will be closed as a duplicate of
        # the master bug.
        sorteditems = sorted(bugitems, bug_duplicates_compare)
        master = sorteditems[0]

        for item in sorteditems[1:]:
            master_bug =  bz.getbug(int(master['id']))
            if master_bug.bug_status not in ["NEW", "ASSIGNED"]:
                print "Error: master bug #{0} is no longer in the right status, " \
                    "now it has status {1}, skipping close.".format(master['id'],
                                                                    master_bug.bug_status)
                continue

            # Check the bug status AGAIN to make sure the bug is still opened.
            item_bug = bz.getbug(int(item['id']))
            if item_bug.bug_status not in ["NEW", "ASSIGNED"]:
                print "Error: bug #{0} is no longer in the right status, " \
                    "now it has status {1}, skipping close.".format(item['id'],
                                                                    item_bug.bug_status);
                continue

            if len(item['comments']) > 2:
                manual_bug_action(bz, item, master, dry_run, terminal_controller, color)
            else:
                close_bug_as_duplicate(bz, item, master, dry_run)

    bz.logout()

def get_duplicates_from_cache(terminal_controller=None, color=False, verbose=False):
    """Return a list of bug lists. Every bug list contains only
    duplicates that can be closed.

    """
    files = glob.glob('cache/*.info')
    index = 0

    progress_bar = faf.terminal.ProgressBar(terminal_controller)

    backtrace_dups = {}
    for file in files:
        if verbose:
            print "[{0}/{1} #{2}]".format(index,
                                          len(files),
                                          file.replace("cache/", "").replace(".info", ""))
        else:
            progress_bar.render((100 * (index + 1)) / len(files), "[{0}/{1}]".format(index + 1, len(files)))

        index += 1

        f = open(file, 'rb')
        bugdata = cPickle.load(f)
        f.close()

        if bugdata['status'] not in ["NEW", "ASSIGNED"]:
            if verbose:
                print " - status {1}, skipping".format(bugdata['id'], bugdata['status'])
            continue

        if bugdata['product'] != "Fedora":
            continue

        filename = "cache/{0}.bt".format(bugdata['id'])
        command = ["btparser"]
        command.append(filename)
        command.append("--duplication-hash")

        helper = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        backtrace, err = helper.communicate()
        helper.wait()

        if helper.returncode != 0:
            if verbose:
                print " - parsing problem, filename {0}, btparser returncode {1}".format(filename, helper.returncode)
            continue

        # Empty backtrace is provided by Python apps.
        if len(backtrace) == 0:
            continue

        bugdata['backtrace_duplication_hash'] = backtrace

        if backtrace in backtrace_dups:
            backtrace_dups[backtrace].append(bugdata)
            if verbose:
                print " - duplicate found (among all components)"
        else:
           backtrace_dups[backtrace] = [ bugdata ]

    dups = []
    for backtrace, bugs in backtrace_dups.iteritems():
        # Sort bugs by components
        component_dups = {}
        for bug in bugs:
            if bug['component'] in component_dups:
                component_dups[bug['component']].append(bug)
            else:
                component_dups[bug['component']] = [ bug ]

        for duplist in component_dups.values():
            if len(duplist) > 1:
                dups.append(duplist)

    return dups

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_parser.add_option("-i", "--wiki", help="Generate output in wiki syntax",
                  action="store_true", default=False)
cmdline_parser.add_option("-n", "--dry-run", dest="dry_run",
                  action="store_true", default=False);
cmdline_parser.add_option("", "--color", dest="color",
                  action="store_true", default=False);
cmdline_parser.add_option("-c", "--close",
                          help="Close some of the bugs in Bugzilla (VERY DANGEROUS)",
                          action="store_true", default=False)
cmdline_parser.add_option("-u", "--user", dest="user",
                  help="Bugzilla user name", metavar="USERNAME")
cmdline_parser.add_option("-p", "--password", dest="password",
                  help="Bugzilla password", metavar="PASSWORD")
cmdline_parser.add_option("-b", "--bugzilla", dest="bugzilla", default="https://bugzilla.redhat.com/xmlrpc.cgi",
                  help="Bugzilla URL (defaults to Red Hat Bugzilla)", metavar="URL")
cmdline_args = cmdline_parser.parse_args()

terminal_controller = faf.terminal.Controller()

dups = get_duplicates_from_cache(terminal_controller,
                                 cmdline_args.color,
                                 cmdline_args.verbose)

if cmdline_args.close:
    close_duplicates(dups,
                     cmdline_args.dry_run,
                     terminal_controller,
                     cmdline_args.color)
    exit(0)

# Print the duplicates sorted by package owner.
def cmp(x, y):
    if x[0]['component_owner'] < y[0]['component_owner']:
        return -1
    elif x[0]['component_owner'] == y[0]['component_owner']:
        return 0
    else:
        return 1

for bugitems in sorted(dups, cmp):
    if cmdline_args.wiki:
        print "----"
        print "* component: '''{0}''' ({1})".format(bugitems[0]['component'], bugitems[0]['component_owner'])
        print "* duplicates: {0}".format(
            reduce(lambda x,y: x+", "+y,
                   map(lambda x: "#[https://bugzilla.redhat.com/show_bug.cgi?id={0} {0}] ({1} comments)".format(x['id'],x['comments']),
                       bugitems)))
        print "* backtrace:"
        for line in bugitems[0]['backtrace_duplication_hash'].replace("Thread\n", "").splitlines():
            print "*# {0}".format(line)
    else:
        print "Component: {0} ({1})".format(bugitems[0]['component'], bugitems[0]['component_owner'])
        print "Duplicates: {0}".format(
            reduce(lambda x,y: x+", "+y,
                   map(lambda x: "{0} ({1})".format(x['id'], len(x['comments'])),
                       bugitems)))
        print "Backtrace: {0}".format(bugitems[0]['backtrace_duplication_hash'])
