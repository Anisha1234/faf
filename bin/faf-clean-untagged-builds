#!/usr/bin/python
import koji
import logging
import pyfaf
from pyfaf.storage import *

if __name__ == "__main__":
    cmdline_parser = pyfaf.argparse.ArgumentParser(
        description="Removes untagged package lobs from storage and keeps just metadata")
    cmdline_parser.add_argument("--refresh-tags", default=False, action="store_true",
                                help="Refresh tags for all builds before deleting")
    cmdline_parser.add_argument("--dry-run", default=False, action="store_true",
                                help="Do not actually delete, just print what would be deleted")
    cmdline_parser.add_argument("opsys", help="Operating system")
    cmdline = cmdline_parser.parse_args()

    db = Database(debug=cmdline.verbose > 2)

    koji_client = None
    if cmdline.refresh_tags:
        logging.info("Refreshing tags enabled")
        logging.info("Initializing connection to the build system")
        buildsys = db.session.query(BuildSystem) \
                             .join(OpSys) \
                             .filter(OpSys.name == cmdline.opsys) \
                             .one()

        if buildsys.xmlrpc_url:
            koji_client = koji.ClientSession(buildsys.xmlrpc_url)

    db_tags = {}
    for tag in db.session.query(Tag):
        db_tags[tag.name] = tag

    result = {}
    builds = db.session.query(Build) \
                       .join(OpSysComponent) \
                       .join(OpSys) \
                       .filter(OpSys.name == cmdline.opsys)

    for build in builds:
        nvr = build.nvr()

        if koji_client:
            remote_tags = set(t['name'] for t in koji_client.listTags(build.secondary_id))
            local_tags = set(t.name for t in build.tags)

            for tag in remote_tags - local_tags:
                logging.info("Adding tag '{0}' to build '{1}'".format(tag, nvr))

                new = BuildTag()
                new.build_id = build.id
                new.tag_id = db_tags[tag].id

                db.session.add(new)

            for tag in local_tags - remote_tags:
                logging.info("Removing tag '{0}' from build '{1}'".format(tag, nvr))
                build_tag = db.session.query(BuildTag) \
                                      .join(Tag) \
                                      .filter(BuildTag.build_id == build.id) \
                                      .filter(Tag.name == tag) \
                                      .one()

                db.session.delete(build_tag)

            db.session.flush()

        tags = set(t.name for t in build.tags)
        if len(tags) < 1:
            logging.info("Build has no tags: {0}".format(nvr))
            logging.info("Removing associated lobs from the filesystem")
            for package in build.packages:
                for lob in Package.__lobs__:
                    path = package.get_lob_path(lob)
                    if os.path.isfile(path):
                        if cmdline.dry_run:
                            sys.stdout.write("Would remove package '{0}': {1}\n" \
                                             .format(package.nvra(), path))
                        else:
                            logging.debug("Removing package '{0}': {1}" \
                                          .format(package.nvra(), path))
                            os.unlink(path)

            continue
