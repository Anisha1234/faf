#!/usr/bin/env python

import logging
import datetime

import pyfaf
import report as libreport

from pyfaf.storage import Report, ReportHistoryDaily

from sqlalchemy import func

logging.basicConfig(level=logging.DEBUG)

def send_oops(oops_body):
    pd = libreport.problem_data()
    pd.add('analyzer', 'faf')
    pd.add('backtrace', oops_body)

    global res
    res = False

    def post(dump_dir_name):
        global res
        res = True
        logging.debug('Post dir name {0}'.format(dump_dir_name))
        return 0

    def log(log_line):
        logging.debug('Log {0}'.format(log_line))

    state = libreport.run_event_state()
    state.post_run_callback = post
    state.logging_callback = log

    state.run_event_on_problem_data(pd, 'report_Kerneloops')
    if res:
        logging.info('Sent successfully')
    else:
        logging.error('Failed')

    return res

if __name__ == "__main__":
    parser = pyfaf.argparse.ArgumentParser(description='Report kerneloopses')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--to', help='Send oopses recieved to specified date',
        metavar='TO [YYYY-MM-DD]')
    group.add_argument('--yesterday', help='Send yesterdays oopses',
        action='store_true', default=False)
    parser.add_argument('--dryrun', action='store_true', default=False)
    parser.add_argument('--retry', help='Retry N times',
        metavar='N', default=10)

    args = vars(parser.parse_args())
    db = pyfaf.storage.getDatabase()

    if args['yesterday']:
        yest = datetime.datetime.utcnow() - datetime.timedelta(days=1)
        upto = yest.replace(hour=23, minute=59, second=59)
        since = yest.replace(hour=0, minute=0, second=0)
        logging.debug('Searching for yesterdays reports')
    else:
        upto = datetime.datetime.strptime(args['to'], '%Y-%m-%d').date()
        since = None
        logging.debug('Searching for reports up to {0}'.format(upto))

    query = (db.session.query(Report,
        func.sum(ReportHistoryDaily.count))
        .join(ReportHistoryDaily)
        .filter(Report.type=='KERNELOOPS')
        .filter(ReportHistoryDaily.day <= upto))

    if since:
        query = query.filter(ReportHistoryDaily.day >= since)

    reports = query.group_by(Report, ReportHistoryDaily.count).all()

    total = len(reports)
    logging.info('Number of reports to process {0}'.format(total))

    if args['dryrun']:
        logging.info('Dry run enabled. Bye')
    else:
        for i, (report, count) in enumerate(reports):
            logging.debug('Processing {0} of {1}'.format(i, total))
            if not report.oops():
                logging.debug('Skipping report with no oops')
                continue

            logging.debug('Sending report {0} times'.format(count))
            for j in range(count):
                ret = send_oops(report.oops())
                if not ret:
                    for k in range(args['retry']):
                        logging.debug('Retrying {0}/{1}'.format(k,
                            args['retry']))

                        ret = send_oops(report.oops())
                        if ret:
                            break
