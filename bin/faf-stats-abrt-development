#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Calculates bug statistics.
import optparse
import sys
import os.path
import subprocess
import glob
import datetime
import cPickle
import operator

def bug(count):
  if count == 1:
    return "%d bug" % count
  else:
    return "%d bugs" % count

def crash(count):
  if count == 1:
    return "%d crash" % count
  else:
    return "%d crashes" % count

def parse_args():
  #
  # Parse the command line input
  #
  parser = optparse.OptionParser(version="%prog 1.0")
  # Weekly stats shows the impact of changes in ABRT early.
  parser.add_option("-s", "--span",
                    default="month",
                    help="time span for stats [default: %default]: month, week")
  # HTML output for blogs etc.
  parser.add_option("-f", "--format",
                    default="wiki",
                    help="output format [default: %default]: wiki, html, csv")
  parser.add_option("-o", "--order",
                    default="newest-first",
                    help="order of results [default: %default]: newest-first, oldest-first")
  parser.add_option("-c", "--contents",
                    default="overview",
                    help="contents of the output [default: %default]: overview, newly-opened-bugs, "
                    "sum-of-opened-bugs, closed-bugs, crashing-applications")
  # Debugging
  parser.add_option("-d", "--debug", help="Display what the program do",
                    action="store_true", default=False, dest="debug")
  return parser.parse_args()

#
# Interpret data from Bugzilla
#
# Bugs reported this month/week by ABRT
# Bugs closed as useful this month/week by ABRT
# Bugs closed as waste this month/week by ABRT
# Top crashers this month/week.
#
class TimeSpan:
  """
  It's either a week or month.
  """
  def __init__(self):
    # Number of bugs reported to certain component this month.
    self.reported_crashes_component = {}
    self.reported_crashes_product = {}
    self.closed_as_useful = 0
    self.closed_as_waste = 0
    self.closed_as_other = 0
    self.closed_crashes_product = {}

  def bugs_reported(self):
    result = 0
    for crash_count in self.reported_crashes_component.values():
      result += crash_count
    return result

  def top_crashers(self, n = 10):
    """
    Top n components causing crash this month.
    Returns list of tuples (component, number of crashes)
    """
    result = sorted(self.reported_crashes_component.items(), key=lambda x: x[1])
    result.reverse()
    return result[0:n]

  def closed_as_useful_percentage(self):
    return int(100 * self.closed_as_useful / self.closed())

  def closed_as_waste_percentage(self):
    return int(100 * self.closed_as_waste / self.closed())

  def closed_as_other_percentage(self):
    return 100 - self.closed_as_useful_percentage() \
        - self.closed_as_waste_percentage()

  def closed(self):
    return self.closed_as_useful + self.closed_as_waste + self.closed_as_other

  def add_reported_crash(self, component, product):
    if component in self.reported_crashes_component:
      self.reported_crashes_component[component] += 1
    else:
      self.reported_crashes_component[component] = 1

    if product in self.reported_crashes_product:
      self.reported_crashes_product[product] += 1
    else:
      self.reported_crashes_product[product] = 1

  def add_closed_crash(self, resolution, product):
    # Catches only resolutions starting with "CLOSED_"
    if resolution in ["CLOSED_CURRENTRELEASE", "CLOSED_RAWHIDE", "CLOSED_ERRATA",
                      "CLOSED_UPSTREAM", "CLOSED_NEXTRELEASE"]:
      self.closed_as_useful += 1
    elif resolution in ["CLOSED_DUPLICATE", "CLOSED_CANTFIX",
                        "CLOSED_INSUFFICIENT_DATA"]:
      self.closed_as_waste += 1
    elif resolution in ["CLOSED_NOTABUG", "CLOSED_WONTFIX",
                           "CLOSED_DEFERRED", "CLOSED_WORKSFORME"]:
      self.closed_as_other += 1
    else:
      # Unknown resolution, do not continue
      return

    if product in self.closed_crashes_product:
      self.closed_crashes_product[product] += 1
    else:
      self.closed_crashes_product[product] = 1

def print_overview_html(span, order):
  """
  span - either "month" or "week"
  order - either "newest-first" or "oldest-first"
  """
  stats = weekly_stats
  if span == "month":
    stats = monthly_stats

  times = stats.keys()
  times.sort()
  if reversed:
    times.reverse()
  for time in times:
    time_span = stats[time]
    print "<h2>%s</h2>" % time
    print "<ul><li>%s reported</li>\n" % bug(time_span.bugs_reported())
    if time_span.closed() > 0:
      print "<li>%s closed\n<ul>" % bug(time_span.closed())
      if time_span.closed_as_useful > 0:
        print "<li>%s (%d%%) as fixed, so ABRT was useful</li>" % (bug(time_span.closed_as_useful), time_span.closed_as_useful_percentage())
      if time_span.closed_as_waste > 0:
        print "<li>%s (%d%%) as duplicate, can't fix, insuf. data, so ABRT was not useful</li>" % \
            (bug(time_span.closed_as_waste), time_span.closed_as_waste_percentage())
      if time_span.closed_as_other > 0:
        print "<li>%s (%d%%) as notabug, wontfix, worksforme</li>" % \
            (bug(time_span.closed_as_other), time_span.closed_as_other_percentage())
      print  "</ul></li>"
    if len(time_span.top_crashers()) > 0:
      print "<li>top crashers:<ol>"
      for (component, num_crashes) in time_span.top_crashers():
        print "    <li>%s: %s</li>" % (component, crash(num_crashes))
      print "</ol></li>"
    print "</ul>"

def print_overview_wiki(span, order):
  """
  span - either "month" or "week"
  order - either "newest-first" or "oldest-first"
  """
  stats = weekly_stats
  if span == "month":
    stats = monthly_stats

  times = stats.keys()
  times.sort()
  if order == "newest-first":
    times.reverse()
  for time in times:
    time_span = stats[time]
    print "==%s==" % time
    print "* %s reported" % bug(time_span.bugs_reported())
    if time_span.closed() > 0:
      print "* %s closed" % bug(time_span.closed())
      if time_span.closed_as_useful > 0:
        print "** %s (%d%%) as fixed, so ABRT was useful" % (bug(time_span.closed_as_useful), time_span.closed_as_useful_percentage())
      if time_span.closed_as_waste > 0:
        print "** %s (%d%%) as duplicate, can't fix, insuf. data, so ABRT was not useful" % \
            (bug(time_span.closed_as_waste), time_span.closed_as_waste_percentage())
      if time_span.closed_as_other > 0:
        print "** %s (%d%%) as notabug, wontfix, worksforme" % \
            (bug(time_span.closed_as_other), time_span.closed_as_other_percentage())
    if len(time_span.top_crashers()) > 0:
      print "* top crashers:"
      for (component, num_crashes) in time_span.top_crashers():
        print "*# %s: %s" % (component, crash(num_crashes))

def print_newly_opened_bugs_csv(span, order):
  """
  span - either "month" or "week"
  order - either "newest-first" or "oldest-first"
  """
  stats = weekly_stats
  if span == "month":
    stats = monthly_stats

  times = stats.keys()
  times.sort()
  if order == "newest-first":
    times.reverse()

  # Write the header to stdout
  sys.stdout.write("date, total_count")
  for product in products:
    sys.stdout.write(", {0}".format(product))
  sys.stdout.write("\n")

  # Write the contents to stdout
  for time in times:
    time_span = stats[time]
    sys.stdout.write("{0}, {1}".format(time, time_span.bugs_reported()))
    for product in products:
      count = 0
      if product in time_span.reported_crashes_product:
        count = time_span.reported_crashes_product[product]
      sys.stdout.write(", {0}".format(count))
    sys.stdout.write("\n")

def print_closed_bugs_csv(span, order):
  """
  span - either "month" or "week"
  order - either "newest-first" or "oldest-first"
  """
  stats = weekly_stats
  if span == "month":
    stats = monthly_stats

  times = stats.keys()
  times.sort()
  if order == "newest-first":
    times.reverse()

  # Write the header to stdout
  sys.stdout.write("date, total_count, closed_as_fixed, closed_as_duplicate_cantfix_insuffdata, closed_as_notabug_worksforme_wontfix\n")

  # Write the contents to stdout
  for time in times:
    time_span = stats[time]
    sys.stdout.write("{0}, {1}, {2}, {3}, {4}\n".format(time,
                                                        time_span.closed(),
                                                        time_span.closed_as_useful,
                                                        time_span.closed_as_waste,
                                                        time_span.closed_as_other))

def print_sum_of_opened_bugs_csv(span, order):
  """
  span - either "month" or "week"
  order - either "newest-first" or "oldest-first"
  """
  stats = weekly_stats
  if span == "month":
    stats = monthly_stats

  times = stats.keys()
  times.sort()
  if order == "newest-first":
    times.reverse()

  # Write the header to stdout
  sys.stdout.write("date, total_count")
  for product in products:
    sys.stdout.write(", {0}".format(product))
  sys.stdout.write("\n")

  # Prepare accumulation structure
  sum_total = 0
  sum_per_product = {}
  for product in products:
    sum_per_product[product] = 0

  # Write the contents to stdout
  for time in times:
    time_span = stats[time]
    sum_total += time_span.bugs_reported()
    sum_total -= time_span.closed()
    sys.stdout.write("{0}, {1}".format(time, sum_total))

    #debug = ""
    for product in products:
      if product in time_span.reported_crashes_product:
        #debug += "Reported crashes for {0}: {1}\n".format(product, time_span.reported_crashes_product[product])
        sum_per_product[product] += time_span.reported_crashes_product[product]
      if product in time_span.closed_crashes_product:
        #debug += "Closed crashes for {0}: {1}\n".format(product, time_span.closed_crashes_product[product])
        sum_per_product[product] -= time_span.closed_crashes_product[product]
      sys.stdout.write(", {0}".format(sum_per_product[product]))
    sys.stdout.write("\n")
    #sys.stdout.write(debug)

def print_crashing_applications_csv(span, order):

  """
  span - either "month" or "week"
  order - either "newest-first" or "oldest-first"
  """
  stats = weekly_stats
  if span == "month":
    stats = monthly_stats

  times = stats.keys()
  times.sort()
  if order == "newest-first":
    times.reverse()

  component_crash_count = {}
  for time in times:
    time_span = stats[time]
    if len(time_span.top_crashers()) > 0:
      for (component, num_crashes) in time_span.top_crashers(500):
        if component in component_crash_count:
          component_crash_count[component] += num_crashes
        else:
          component_crash_count[component] = num_crashes

  s = sorted(component_crash_count.items(), key=operator.itemgetter(1), reverse=True)
  print "Number of weeks: {0}".format(len(times))
  for (component, num_crashes) in s[0:100]:
      sys.stdout.write("{0}, {1}\n".format(component, num_crashes))


def get_month(month):
  global monthly_stats
  if month in monthly_stats:
    return monthly_stats[month]
  else:
    monthly_stats[month] = TimeSpan()
    return monthly_stats[month]

def get_week(week):
  global weekly_stats
  if week in weekly_stats:
    return weekly_stats[week]
  else:
    weekly_stats[week] = TimeSpan()
    return weekly_stats[week]

# Keys are in "YEAR-MONTH" format, the values are instances of
# TimeSpan class.
monthly_stats = {}
# Keys are in "YEAR-WEEK" format, the values are instances of TimeSpan
# class.
weekly_stats = {}
# List of all available products with their version
products = []

# Program options
(options, args) = parse_args()
# Buginfo data files
files = glob.glob('cache/*.info')
counter = 0
for file in files:
  print "{0}/{1}".format(counter, len(files))
  counter += 1
  f = open(file, 'rb')
  bugdata = cPickle.load(f)
  f.close()

  if not bugdata.has_key('created'):
    continue

  # What we call "product" in the TimeSpan class is "product + its
  # version" in Bugzilla.
  product = "{0}_{1}".format(bugdata['product'], bugdata['product_version'])
  if product not in products:
    products.append(product)

  # What we call "resolution" in the TimeSpan class is "status +
  # resolution" in Bugzilla.
  resolution = "{0}_{1}".format(bugdata['status'], bugdata['resolution'])

  # Bugs reported this month by ABRT
  # Top crashers this month
  month_key = bugdata['created'][0:7]
  month = get_month(month_key)
  month.add_reported_crash(bugdata['component'], product)

  # Bugs reported this week by ABRT
  # Top crashers this week
  week_key = datetime.datetime.strptime(bugdata['created'], "%Y-%m-%d").strftime("%Y-%W")
  week = get_week(week_key)
  week.add_reported_crash(bugdata['component'], product)

  # Bugs closed as useful this month by ABRT
  # Bugs closed as waste this month by ABRT
  month_key = bugdata['lastchange'][0:7]
  month = get_month(month_key)
  month.add_closed_crash(resolution, product)

  # Bugs closed as useful this week by ABRT
  # Bugs closed as waste this week by ABRT
  week_key = datetime.datetime.strptime(bugdata['lastchange'], "%Y-%m-%d").strftime("%Y-%W")
  week = get_week(week_key)
  week.add_closed_crash(resolution, product)

def get_print_function(contents, format):
  if options.contents == "overview":
    if options.format == "wiki":
      return print_overview_wiki
    elif options.format == "html":
      return print_overview_html
    elif options.format == "csv":
      return print_overview_csv
  elif options.contents == "newly-opened-bugs":
    if options.format == "wiki":
      return print_newly_opened_bugs_wiki
    elif options.format == "html":
      return print_newly_opened_bugs_html
    elif options.format == "csv":
      return print_newly_opened_bugs_csv
  elif options.contents == "closed-bugs":
    if options.format == "wiki":
      return print_closed_bugs_wiki
    elif options.format == "html":
      return print_closed_bugs_html
    elif options.format == "csv":
      return print_closed_bugs_csv
  elif options.contents == "sum-of-opened-bugs":
    if options.format == "wiki":
      return print_sum_of_opened_bugs_wiki
    elif options.format == "html":
      return print_sum_of_opened_bugs_html
    elif options.format == "csv":
      return print_sum_of_opened_bugs_csv
  elif options.contents == "crashing-applications":
    if options.format == "wiki":
      return print_crashing_applications_wiki
    elif options.format == "html":
      return print_crashing_applications_html
    elif options.format == "csv":
      return print_crashing_applications_csv

#
# Print interpreted data
#
print_function = get_print_function(options.contents, options.format)
print_function(options.span, options.order)
