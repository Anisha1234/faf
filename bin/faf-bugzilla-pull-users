#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import subprocess
import sys
import logging

def download_users(cmdline_args, user_ids, user_mtimes):
    bz_args = ["faf-bugzilla"]
    if cmdline_args.user:
        bz_args.append("--user", cmdline_args.user)
    if cmdline_args.password:
        bz_args.append("--password", cmdline_args.password)
    if cmdline_args.url:
        bz_args.append("--url", cmdline_args.url)
    bz_proc = subprocess.Popen(bz_args, stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE)

    offset = 0
    for user_id in user_ids:
        offset += 1
        logging.info("[{0}/{1}] Downloading user #{2}.".format(
                offset, len(user_ids), user_id))
        if user_id in user_mtimes:
            logging.debug("  - cache entry mtime: {0}".format(
                    user_mtimes[user_id]))
        bz_proc.stdin.write("user {0}\n".format(user_id))
        bz_proc.stdin.flush()
        line = bz_proc.stdout.readline()
        if not line.startswith("< user {0}".format(user_id)):
            sys.stderr.write("Failed to get user #{0} from Bugzilla.\n".format(user_id))
            exit(1)
        lines = []
        while not line.startswith("< ok"):
            line = bz_proc.stdout.readline().decode("utf-8")
            if not line.startswith("< ok"):
                lines.append(line)
        pyfaf.run.cache_add_text(u"".join(lines), user_id, "rhbz-user", overwrite=True)
    bz_proc.stdin.close()
    bz_proc.wait()

def pull_all_bugs(cmdline_args):
    # Build the list of required attachments
    logging.info("Searching local cache for bugs.")
    bug_id_list = pyfaf.run.cache_list_id("rhbz-bug")
    logging.info("Searching {0} local bugs for users.".format(len(bug_id_list)))
    required_users = set()
    offset = 0
    for bug_id in bug_id_list:
        offset += 1
        logging.debug("[{0}/{1}] Processing bug #{2}.".format(offset, len(bug_id_list), bug_id))
        bug = pyfaf.run.cache_get("rhbz-bug", bug_id)
        required_users.add(bug.creator_id)
        required_users |= set([user_id for user_id in bug.cc])
        required_users |= set([history.user_id for history in bug.history])
    logging.info("Found {0} users in local cache bugs.".format(len(required_users)))

    # Build the list of users present in the cache
    logging.info("Searching local cache for users.")
    cache_users = set(pyfaf.run.cache_list_id("rhbz-user"))
    # Build ordered list for user download/update
    # Remove items from cache_users which are not present in required_users.
    cache_users &= required_users
    logging.info("Found {0} users in local cache.".format(len(cache_users)))
    # Remove items from required_users, which are present in cache_users
    required_users -= cache_users
    download_users(cmdline_args, list(required_users), {})

def pull_id(cmdline_args):
    download_users(cmdline_args, cmdline_args.id, {})

def update(cmdline_args):
    # Build the list of users present in the cache
    logging.info("Searching local cache for users.")
    cache_users, cache_mtimes = pyfaf.run.cache_list_id_mtime("rhbz-user")
    # Build ordered list for user download/update
    users = sorted(cache_users, key=lambda x:cache_mtimes[x])
    download_users(cmdline_args, cache_users, cache_mtimes)

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Pull users from Bugzilla to local cache.")
cmdline_parser.add_argument("--user", help="Bugzilla user name")
cmdline_parser.add_argument("--password", help="Bugzilla user password")
cmdline_parser.add_argument("--url", help="Bugzilla URL")
cmdline_subparsers = cmdline_parser.add_subparsers(title="subcommands")
cmdline_parser_all_bugs = cmdline_subparsers.add_parser('all_bugs', help="pull bug authors, CCed users, users from bug history that were not pulled before")
cmdline_parser_all_bugs.set_defaults(func=pull_all_bugs)
cmdline_parser_id = cmdline_subparsers.add_parser('id', help="pull users by their id, even when they are already present in cache")
cmdline_parser_id.add_argument("id", nargs="+")
cmdline_parser_id.set_defaults(func=pull_id)
cmdline_parser_update = cmdline_subparsers.add_parser('update', help="update users in cache to newest data from Bugzilla")
cmdline_parser_update.set_defaults(func=update)
cmdline_args = cmdline_parser.parse_args()
cmdline_args.func(cmdline_args)
