#!/usr/bin/python
import datetime
import logging
import os
import pyfaf
import stat
import sys
import tempfile
import time
from pyfaf.storage import *
from subprocess import *

START = time.time()

brakes = [ "%prep", "%install", "%files", "%changelog", "%package", "%pre", "%post", "%preun", "%postun" ]
CC = "clang"
CFLAGS = "-O0 -emit-llvm -v -g -Wall -fexceptions"
CXX = "clang"
CXXFLAGS = "-O0 -emit-llvm -v -g -Wall -fexceptions"
LDFLAGS = "-Wl,--build-id".format(pyfaf.config.libdir)
NM = "llvm-nm"

USE_WRAPPERS =  1 << 0
USE_LLVM_LD = 1 << 1

def walktree(rootdir, prefix=""):
    result = []
    for f in os.listdir(rootdir):
        fullpath = os.path.join(rootdir, f)
        lstat = os.lstat(fullpath)
        current = { "fullpath": fullpath.replace(prefix, ""),
                    "size": lstat.st_size,
                    "perm": stat.S_IMODE(lstat.st_mode) }
        result.append(current)
        if stat.S_ISDIR(lstat.st_mode):
            current["type"] = "dir"
            result.extend(walktree(fullpath, prefix))
        elif stat.S_ISCHR(lstat.st_mode):
            current["type"] = "char"
        elif stat.S_ISBLK(lstat.st_mode):
            current["type"] = "block"
        elif stat.S_ISREG(lstat.st_mode):
            current["type"] = "file"
        elif stat.S_ISFIFO(lstat.st_mode):
            current["type"] = "pipe"
        elif stat.S_ISLNK(lstat.st_mode):
            current["type"] = "link"
        elif stat.S_ISSOCK(lstat.st_mode):
            current["type"] = "sock"
        else:
            current["type"] = "unknown"

    return result

def find_bc_files(rootdir, prefix=""):
    result = []
    for f in os.listdir(rootdir):
        fullpath = os.path.join(rootdir, f)
        if os.path.isdir(fullpath):
            result.extend(find_bc_files(fullpath, prefix))
        elif os.path.isfile(fullpath) and f.endswith(".bc") and f != "a.out.bc":
            result.append(fullpath.replace(prefix, ""))

    return result

def patch_specfile(root, specname, wrapflags=0):
    cmd = ["faf-chroot", "-r", root, "chroot", "-c", "cat /usr/src/rpm/SPECS/{0}.spec".format(specname)]
    child = Popen(cmd, stdout=PIPE, stderr=STDOUT)
    specdata = child.communicate()[0]
    if child.returncode:
        logging.error("{0} exited with {1}".format(str(cmd), child.returncode))
        return False

    lines = specdata.strip().splitlines()

    orig = []
    build = False
    for line in lines:
        if not build:
            if line.startswith("%build"):
                build = True
            continue

        stop = False
        for b in brakes:
            if line.startswith(b):
                stop = True
                break
        if stop:
            break

        orig.append(line)

    result = []
    cc = cflags = cxx = cxxflags = ldflags = nm = False
    for line in orig:
        if not cc and line.startswith("CC="):
            cc = True
            result.append("CC='{0}'".format(CC))
            logging.debug("Found 'CC' in %build")
            continue

        if not cc and line.startswith("export CC="):
            cc = True
            result.append("export CC='{0}'".format(CC))
            logging.debug("Found 'export CC' in %build")
            continue

        if not cflags and line.startswith("CFLAGS="):
            cflags = True
            result.append(line)
            result.append("CFLAGS=\"{0} $CFLAGS\"".format(CFLAGS))
            logging.debug("Found 'CFLAGS' in %build")
            continue

        if not cflags and line.startswith("export CFLAGS="):
            cflags = True
            result.append(line.replace("export ", ""))
            result.append("CFLAGS=\"{0} $CFLAGS\"".format(CFLAGS))
            result.append("export CFLAGS")
            logging.debug("Found 'export CFLAGS' in %build")
            continue

        if not cxx and line.startswith("CXX="):
            cxx = True
            result.append("CXX='{0}'".format(CXX))
            logging.debug("Found 'CXX' in %build")
            continue

        if not cxx and line.startswith("export CXX="):
            cxx = True
            result.append("export CXX='{0}'".format(CXX))
            logging.debug("Found 'export CXX' in %build")
            continue

        if not cxxflags and line.startswith("CXXFLAGS="):
            cxxflags = True
            result.append(line)
            result.append("CXXFLAGS=\"{0} $CXXFLAGS\"".format(CXXFLAGS))
            logging.debug("Found 'CXXFLAGS' in %build")
            continue

        if not cxxflags and line.startswith("export CXXFLAGS="):
            cxxflags = True
            result.append(line.replace("export ", ""))
            result.append("CXXFLAGS=\"{0} $CXXFLAGS\"".format(CXXFLAGS))
            result.append("export CXXFLAGS")
            logging.debug("Found 'export CXXFLAGS' in %build")
            continue

        if not ldflags and line.startswith("LDFLAGS="):
            ldflags = True
            result.append(line)
            result.append("LDFLAGS=\"{0} $LDFLAGS\"".format(LDFLAGS))
            logging.debug("Found 'LDFLAGS' in %build")
            continue

        if not ldflags and line.startswith("export LDFLAGS="):
            ldflags = True
            result.append(line.replace("export ", ""))
            result.append("LDFLAGS=\"{0} $LDFLAGS\"".format(LDFLAGS))
            result.append("export LDFLAGS")
            logging.debug("Found 'export LDFLAGS' in %build")
            continue

        if not nm and line.startswith("NM="):
            nm = True
            result.append("NM=\"{0}\"".format(NM))
            logging.debug("Found 'NM' in %build")
            continue

        if not nm and line.startswith("export NM="):
            nm = True
            result.append("export NM=\"{0}\"".format(NM))
            logging.debug("Found 'export LDFLAGS' in %build")
            continue

        result.append(line)

    if not nm:
        result.insert(0, "export NM='{0}'".format(NM))
        logging.debug("Adding 'NM'")
    if not ldflags:
        result.insert(0, "export LDFLAGS='{0}'".format(LDFLAGS))
        logging.debug("Adding 'LDFLAGS'")
    if not cxxflags:
        result.insert(0, "export CXXFLAGS='{0}'".format(CXXFLAGS))
        logging.debug("Adding 'CXXFLAGS'")
    if not cxx:
        result.insert(0, "export CXX='{0}'".format(CXX))
        logging.debug("Adding 'CXX'")
    if not cflags:
        result.insert(0, "export CFLAGS='{0}'".format(CFLAGS))
        logging.debug("Adding 'CFLAGS'")
    if not cc:
        result.insert(0, "export CC='{0}'".format(CC))
        logging.debug("Adding 'CC'")

    if wrapflags & USE_WRAPPERS:
        if wrapflags & USE_LLVM_LD:
            result.insert(0, "export FAF_USE_LLVM_LD=1")
        result.insert(0, "export FAF_LLVM_BUILD=1")

    cmd = ["faf-chroot", "-r", root, "chroot", "-c", "cat > /usr/src/rpm/SPECS/{0}.spec".format(specname)]
    child = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    newspec = specdata.replace("\n".join(orig), "\n".join(result)).replace("%check", "%check\nexit 0\n")
    stdout, stderr = child.communicate(newspec)
    if child.returncode:
        logging.error("{0} exitted with {1}".format(str(cmd), child.returncode))
        return False

    return True

def wrap_gcc_ld(root, pkgname, wrapflags=0):
    #keep original binaries
    cmd = ["faf-chroot", "-r", root, "chroot", "-c", "mv /usr/bin/{,.}gcc && mv /bin/{,.}ld && mv /usr/bin/{,.}g++"]
    retcode = call(cmd)
    if retcode:
        logging.error("{0} exitted with {1}".format(str(cmd), retcode))
        return False

    # add wrapper scripts
    cmd = ["faf-chroot", "-r", root, "chroot", "-c", "echo /usr/lib/python2.?/site-packages"]
    child = Popen(cmd, stdout=PIPE, stderr=PIPE)
    stdout, stderr = child.communicate()
    if child.wait():
        logging.error("{0} exitted with {1}".format(str(cmd), child.returncode))
        return False

    cmd = ["faf-chroot", "-r", root, "copyin", os.path.join(pyfaf.config.datadir, "faf", "wrappers", "fakeargs.py"), os.path.join(stdout.strip(), "fakeargs.py")]
    retcode = call(cmd)
    if retcode:
        logging.error("{0} exitted with {1}".format(str(cmd), retcode))
        return False

    cmd = ["faf-chroot", "-r", root, "copyin", os.path.join(pyfaf.config.datadir, "faf", "wrappers", "gcc"), "/usr/bin/gcc"]
    retcode = call(cmd)
    if retcode:
        logging.error("{0} exitted with {1}".format(str(cmd), retcode))
        return False

    cmd = ["faf-chroot", "-r", root, "copyin", os.path.join(pyfaf.config.datadir, "faf", "wrappers", "g++"), "/usr/bin/g++"]
    retcode = call(cmd)
    if retcode:
        logging.error("{0} exitted with {1}".format(str(cmd), retcode))
        return False

    cmd = ["faf-chroot", "-r", root, "copyin", os.path.join(pyfaf.config.datadir, "faf", "wrappers", "ld"), "/bin/ld"]
    retcode = call(cmd)
    if retcode:
        logging.error("{0} exitted with {1}".format(str(cmd), retcode))
        return False

    cmd = ["faf-chroot", "-r", root, "chroot", "-c", "chmod a+x /usr/bin/{gcc,g++} /bin/ld"]
    retcode = call(cmd)
    if retcode:
        logging.error("{0} exitted with {1}".format(str(cmd), retcode))
        return False

    return True

def build_srpm_from_storage(package, opsys, tag, clean=False, wrapflags=0, db=None):
    success = True
    nvr = package.nvr()
    logging.info("Building {0}".format(nvr))
    root = os.path.join(pyfaf.config.CONFIG["llvmbuild.buildroot"], nvr)
    steps = [
              ("Cleaning up old chroot", ["faf-chroot", "-r", root, "clean"], False),
              ("Preparing chroot", ["faf-chroot", "-r", root, "create"], True),
              ("Installing packages", ["faf-chroot", "-r", root, "install-rpm-dependencies", opsys, tag, "--rpm-id", str(package.id), "--include", "clang", "--include", "python"], True),
              ("Preparing build environment", ["faf-chroot", "-r", root, "prepare-build-environment"], True),
              ("Unpacking SRPM", ["faf-chroot", "-r", root, "install-srpm", opsys, str(package.id), "--patch"], True),
              ("Patching RPM compiler macros", ["faf-chroot", "-r", root, "chroot", "-c", "sed -i -e \"s,gcc,clang,\" -e \"s,g++,clang,\" /usr/lib/rpm/macros"], True),
              ("Changing default linker to ld.gold", ["faf-chroot", "-r", root, "chroot", "-c", "ln -fs /usr/bin/ld.gold /etc/alternatives/ld"], False),
              ("Patching RPM linker macros", ["faf-chroot", "-r", root, "chroot", "-c", "sed -i -e \"s/-Wl,-z,relro/-Wl,-z,relro -Wl,--build-id/\" /usr/lib/rpm/redhat/macros"], True),
              ("Disabling debuginfo package", ["faf-chroot", "-r", root, "chroot", "-c", "echo %debug_package %{nil} >> /etc/rpm/macros"], True),
              ("Disabling optimizations", ["faf-chroot", "-r", root, "chroot", "-c", "for FILE in /usr/lib/rpm/{macros,rpmrc,redhat/macros,platform/*/macros}; do sed -i -e \"s/-O2/-O0/\" $FILE; done"], True),
              ("Patching specfile to use LLVM/clang & disabling %check", patch_specfile, True),
            ]

    if wrapflags & USE_WRAPPERS:
        steps.append(("Adding wrapper gcc/g++/ld scripts", wrap_gcc_ld, True))
    steps.append(("Compiling", ["faf-chroot", "-r", root, "build-srpm", opsys, tag, str(package.id), "--build-only", "--rpmbuild-cmd", "bc"], True))
    steps.append(("Installing", ["faf-chroot", "-r", root, "build-srpm", opsys, tag, str(package.id), "--build-only", "--rpmbuild-cmd", "bi", "--rpmbuild-short"], False))

    logdir = "/var/log/faf/build"
    stdoutlog = os.path.join(logdir, "{0}-stdout.log".format(nvr))
    stderrlog = os.path.join(logdir, "{0}-stderr.log".format(nvr))

    try:
        out = open(stdoutlog, "w")
    except Exception as ex:
        logging.info(str(ex))
        out = tempfile.NamedTemporaryFile(mode="w", delete=False, prefix="{0}-stdout-".format(nvr), suffix=".log")
        stdoutlog = out.name
        logging.info("Using '{0}' for stdout".format(stdoutlog))

    try:
        err = open(stderrlog, "w")
    except Exception as ex:
        logging.info(str(ex))
        err = tempfile.NamedTemporaryFile(mode="w", delete=False, prefix="{0}-stderr-".format(nvr), suffix=".log")
        stderrlog = err.name
        logging.info("Using '{0}' for stderr".format(stderrlog))

    try:
        for msg, cmd, fatal in steps:
            logging.debug(msg)
            if type(cmd) is list:
                child = Popen(cmd, stdout=out, stderr=err)

                if child.wait():
                    logging.info("{0} exitted with {1}".format(str(cmd), child.returncode))
                    if fatal:
                        logging.error("Fatal error encountered, exitting")
                        success = False
                        break
            else:
                result = cmd(root, package.name, wrapflags)
                if not result:
                    logging.info("{0} failed".format(msg))
                    if fatal:
                        logging.error("Fatal error encountered, exitting")
                        success = False
                        break
    finally:
        out.close()
        err.close()

    logging.info("stdout log: {0}".format(stdoutlog))
    logging.info("stderr log: {0}".format(stderrlog))

    if cmdline.save_results:
        logging.info("Saving results")
        if not db:
            db = Database()

        llvmbuild = LlvmBuild()
        llvmbuild.build_id = package.build.id
        llvmbuild.success = success
        llvmbuild.duration = int(time.time() - START)
        llvmbuild.started = datetime.datetime.fromtimestamp(START)
        db.session.add(llvmbuild)
        db.session.flush()

        logging.info("Saving stdout log")
        with open(stdoutlog, "r") as f:
            llvmbuild.save_lob("stdout", f, truncate=True)

        logging.info("Saving stderr log")
        with open(stderrlog, "r") as f:
            llvmbuild.save_lob("stderr", f, truncate=True)

        logging.info("Saving bytecode files")
        builddir = os.path.join(root, "usr", "src", "rpm", "BUILD")
        for bcfile in find_bc_files(builddir, builddir):
            logging.debug("Saving '{0}'".format(bcfile))
            new = LlvmBcFile()
            new.llvmbuild_id = llvmbuild.id
            new.path = bcfile
            db.session.add(new)
            db.session.flush()

            with open(os.path.join(builddir, bcfile.lstrip("/")), "rb") as f:
                new.save_lob("bcfile", f, truncate=True, binary=True)

        if success:
            logging.info("Saving result tarball")
            installdir = os.path.join(root, "usr", "src", "rpm", "BUILDROOT")
            subdirs = os.listdir(installdir)
            if len(subdirs) != 1:
                logging.error("exactly 1 installdir expected, {0} found".format(len(subdirs)))
            else:
                subdir = subdirs[0]
                child = Popen(["tar", "-cJO", subdir], cwd=installdir, stdout=PIPE)
                llvmbuild.save_lob("result", child.stdout, truncate=True)

                if child.wait():
                    logging.error("tar exitted with {0}".format(child.returncode))
                child.stdout.close()

                fullpath = os.path.join(installdir, subdir)
                for fdata in walktree(fullpath, fullpath):
                    new = LlvmResultFile()
                    new.llvmbuild_id = llvmbuild.id
                    new.path = fdata["fullpath"]
                    new.type = fdata["type"]
                    new.perm = fdata["perm"]
                    new.size = fdata["size"]
                    db.session.add(new)

        db.session.flush()

    if not success:
        exit(1)

    logging.info("Build successful")
    exit(0)

def build_srpm_from_file(filename):
    logging.info("Not yet implemented")
    exit(0)

if __name__ == "__main__":
    cmdline_parser = pyfaf.argparse.ArgumentParser(description="Rebuild a source RPM with LLVM instead of GCC")
    cmdline_parser.add_argument("srpm", help="SRPM to rebuild (storage ID)")
    cmdline_parser.add_argument("opsys")
    cmdline_parser.add_argument("tag")
    cmdline_parser.add_argument("--use-wrappers", action="store_true", default=False)
    cmdline_parser.add_argument("--use-llvm-ld", action="store_true", default=False)
    cmdline_parser.add_argument("--save-results", action="store_true", default=False)
    cmdline = cmdline_parser.parse_args()

    db = Database(debug=cmdline.verbose > 2)

    logging.info("Searching for SRPM '{0}'".format(cmdline.srpm))
    package = db.session.query(Package).filter(Package.id == cmdline.srpm).first()

    if package:
        logging.info("Found in storage")
        flags = 0
        if cmdline.use_wrappers:
            flags |= USE_WRAPPERS
        if cmdline.use_llvm_ld:
            flags |= USE_LLVM_LD
        build_srpm_from_storage(package, cmdline.opsys, cmdline.tag, wrapflags=flags, db=db)
    elif os.path.isfile(cmdline.srpm):
        logging.info("Found on filesystem")
        build_srpm_from_file(cmdline.srpm)
    else:
        logging.info("Not found")
        sys.stderr.write("You must specify a SRPM.\n")
        exit(1)
