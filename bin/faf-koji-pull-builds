#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import logging
import urllib2

import koji
import pyfaf

from sqlalchemy.orm.exc import NoResultFound

from pyfaf.common import store_package_deps
from pyfaf.storage.opsys import (Arch,
                                 OpSys,
                                 OpSysComponent,
                                 Build,
                                 BuildTag,
                                 BuildArch,
                                 BuildSystem,
                                 Package,
                                 Tag,
                                 TagInheritance)

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Download builds from Koji.")
cmdline_parser.add_argument("os")
cmdline_parser.add_argument("tag")
cmdline_parser.add_argument("--only-missing", action="store_true", default=False, help="downloads only builds missing in the cache")
cmdline_parser.add_argument("--component", help="downloads build for a single component")
cmdline_parser.add_argument("--build-nvr", help="download one specific build by its name, version and release")
cmdline_parser.add_argument("--with-rpms", action="store_true", default=False, help="download rpm packages together with build metadata")
cmdline = cmdline_parser.parse_args()


LOGFILES = ["build.log", "root.log", "state.log"]

def inherit(db, tag):
    result = [tag]
    inhs = db.session.query(TagInheritance).filter(TagInheritance.tag_id == tag.id).all()
    for inh in sorted(inhs, key=lambda x: x.priority, reverse=True):
        result.extend(inherit(db, inh.parent))

    return result

def try_download(obj, lob, url, attempts=3):
    try:
        pipe = urllib2.urlopen(url)
        obj.save_lob(lob, pipe.fp, truncate=True, binary=True)
        pipe.close()
    except urllib2.URLError as ex:
        if attempts > 0:
            logging.debug("Retrying download of '{0}': {1}".format(url, str(ex)))
            return try_download(obj, lob, url, attempts - 1)
        else:
            logging.debug("Giving up download of '{0}': {1}".format(url, str(ex)))
            return False
    except Exception as ex:
        logging.info("Unable to save lob: {0}".format(str(ex)))
        return False

    return True

def download_logs(buildarch, build, package_url):
    for logfile in LOGFILES:
        logging.debug("Saving {0} for {1}".format(logfile, arch))
        url = "{0}/{1}/{2}/{3}/data/logs/{4}/{5}".format(package_url,
                                                         build["name"],
                                                         build["version"],
                                                         build["release"],
                                                         buildarch.arch.name,
                                                         logfile)
        if not try_download(buildarch, logfile, url):
            logging.error("Unable to store {0}".format(url))
            continue

def download_rpm(db, rpm_info, build, package_url, build_id=None):
    arch_id = db.session.query(Arch.id).filter(Arch.name == rpm_info["arch"]).one()[0]
    new = Package()
    new.build_id = build_id
    new.name = rpm_info["name"]
    new.pkgtype = "rpm"
    new.arch_id = arch_id
    db.session.add(new)
    db.session.flush()

    url = "{0}/{1}/{2}/{3}/{4}".format(package_url,
                                       build["name"],
                                       build["version"],
                                       build["release"],
                                       koji.pathinfo.rpm(rpm_info))
    if not try_download(new, "package", url):
        logging.error("Failed to store {0}".format(url))
        return

    store_package_deps(db, new)

db = pyfaf.storage.Database(debug=cmdline.verbose > 2)

try:
    opsys = db.session.query(OpSys).filter(OpSys.name == cmdline.os).one()
except NoResultFound:
    logging.error("OS '{0}' is not supported.".format(cmdline.os))
    exit(1)

try:
    buildsys = db.session.query(BuildSystem).filter((BuildSystem.opsys_id == opsys.id) & \
                                                    (BuildSystem.xmlrpc_url != None) & \
                                                    (BuildSystem.package_url != None)).one()
except NoResultFound:
    logging.error("{0} does not support koji.".format(cmdline.os))
    exit(1)

try:
    tag = db.session.query(Tag).filter((Tag.name == cmdline.tag) &
                                       (Tag.opsys_id == opsys.id)).one()
except NoResultFound:
    logging.error("Unable to find tag '{0}'".format(cmdline.tag))
    exit(1)

tags = inherit(db, tag)

session = koji.ClientSession(buildsys.xmlrpc_url)
logging.info("Loading koji component list")
components = [comp["package_name"] for comp in session.listPackages(tagID=tag.secondary_id, inherited=True)]

if not cmdline.component is None:
    if not cmdline.component in components:
        logging.error("Failed to find {0} in koji {1} tag.".format(cmdline.component, cmdline.tag))
        exit(1)
    components = [cmdline.component]

skip_build_id_list = []
if cmdline.only_missing:
    skip = db.session.query(Build.secondary_id) \
                     .join(OpSysComponent) \
                     .join(OpSys) \
                     .filter(OpSys.id == opsys.id) \
                     .all()
    skip_build_id_list = [s[0] for s in skip]

i = 0
for component in sorted(components):
    i += 1
    logging.info("[{0}/{1}] Processing component {2}".format(i, len(components), component))
    remote_build = None
    for tag in tags:
        logging.debug("Trying tag {0}".format(tag.name))
        remote_builds = session.listTagged(tag.name, package=component)
        if remote_builds:
            logging.info("Found in {0}".format(tag.name))
            remote_build = remote_builds[0]
            break

    if not remote_build:
        logging.info("Unable to find a build")
        continue

    if remote_build["build_id"] in skip_build_id_list:
        logging.info("Skipping existing build #{0}".format(remote_build["build_id"]))
        continue

    try:
        db_component = db.session.query(OpSysComponent).filter((OpSysComponent.name == component) &
                                                               (OpSysComponent.opsys_id == opsys.id)).one()
    except NoResultFound:
        logging.error("Unable to find component '{0}' in '{1}'".format(component, opsys.name))
        continue

    if remote_build["epoch"] is None:
        remote_build["epoch"] = 0

    new = Build()
    new.id = None
    new.secondary_id = remote_build["build_id"]
    new.component_id = db_component.id
    new.epoch = remote_build["epoch"]
    new.version = remote_build["version"]
    new.release = remote_build["release"]
    new.projrelease = None
    db.session.add(new)
    # flush to obtain id
    db.session.flush()

    build_id = new.id
    logging.debug("Created new build #{0}".format(build_id))

    buildtags = [tag["name"] for tag in session.listTags(remote_build["build_id"])]
    for tagname in buildtags:
        logging.debug("Adding tag {0} to build #{1}".format(tagname, build_id))
        try:
            tag_id = db.session.query(Tag.id).filter((Tag.name == tagname) &
                                                     (Tag.opsys_id == opsys.id)).one()[0]
        except:
            logging.error("Tag '{0}' is missing in {1}".format(tagname, opsys.name))
            continue

        new = BuildTag()
        new.build_id = build_id
        new.tag_id = tag_id
        db.session.add(new)
    db.session.flush()

    rpms = session.listBuildRPMs(remote_build["build_id"])
    archs = set([pkg["arch"] for pkg in rpms])
    # src has no logs
    if "src" in archs:
        archs.remove("src")

    # noarch only has logs if it there are no binary packages
    # binary packages may have noarch sub-packages
    if len(archs) > 1 and "noarch" in archs:
        archs.remove("noarch")

    logging.info("Downloading log files")
    for arch in archs:
        logging.debug("Adding architecture {0} to build #{1}".format(arch, build_id))
        arch_id = db.session.query(Arch.id).filter(Arch.name == arch).one()[0]
        new = BuildArch()
        new.build_id = build_id
        new.arch_id = arch_id
        db.session.add(new)
        # flush to obtain id
        db.session.flush()

        download_logs(new, remote_build, buildsys.package_url)

    if cmdline.with_rpms:
        logging.info("Downloading RPMs")
        for pkg in rpms:
            logging.debug("Downloading {0}.{1}".format(pkg["nvr"], pkg["arch"]))
            download_rpm(db, pkg, remote_build, buildsys.package_url, build_id=build_id)
