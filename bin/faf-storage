#!/usr/bin/python
# Copyright (C) 2012 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import logging
import sys
from pyfaf.storage.opsys import Arch, OpSys

# Command line operations
def setup():
    # Fill opsys and archs tables
    data = [(OpSys, [('name', 'Fedora')]),
            (Arch, [('name', 'x86_64')]),
            (Arch, [('name', 'i686')]),
            (Arch, [('name', 'i586')]),
            (Arch, [('name', 'i486')]),
            (Arch, [('name', 'i386')]),
            (Arch, [('name', 'ppc')]),
            (Arch, [('name', 'ppc64')]),
            (Arch, [('name', 'noarch')]),
            (Arch, [('name', 'src')])]

    for (entity, col_values) in data:
        if db.session.query(entity).filter(getattr(entity, col_values[0][0]) == col_values[0][1]).count() > 0:
            continue
        obj = entity()
        for (colname, value) in col_values:
            setattr(obj, colname, value)
        db.session.add(obj)

    db.session.flush()

def list():
    entity = getattr(pyfaf.storage, cmdline_args.classname)
    for value, in db.session.query(entity.id):
        sys.stdout.write(str(value))
        sys.stdout.write("\n")

def show():
    entity = getattr(pyfaf.storage, cmdline_args.classname)
    row = db.session.query(entity).filter(entity.id == int(cmdline_args.id)).one()
    for col in entity.__table__.columns.keys():
        sys.stdout.write("{0}: {1}\n".format(col, getattr(row, col)))

def remove():
    entity = getattr(pyfaf.storage, cmdline_args.classname)
    query = db.session.query(entity)

    if cmdline_args.id:
        query = query.filter(entity.id.in_(cmdline_args.id))
        for row in query.all():
            logging.info("Removing object #{0}.".format(row.id))
            db.session.delete(row)
    else:
        logging.info("Dropping table {0}.".format(entity.__table__.name))
        entity.__table__.drop()

    db.session.flush()

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(
    description="List, show, import data to the storage.")
cmdline_subparsers = cmdline_parser.add_subparsers(title="subcommands")
cmdline_parser_setup = cmdline_subparsers.add_parser(
    'setup', help="setup storage")
cmdline_parser_setup.set_defaults(func=setup)
cmdline_parser_list = cmdline_subparsers.add_parser(
    'list', help="show simple list of all stored objects")
cmdline_parser_list.add_argument("classname")
cmdline_parser_list.set_defaults(func=list)
cmdline_parser_show = cmdline_subparsers.add_parser(
    'show', help="show contents of a single object")
cmdline_parser_show.add_argument("classname")
cmdline_parser_show.add_argument("id")
cmdline_parser_show.set_defaults(func=show)
cmdline_parser_remove = cmdline_subparsers.add_parser(
    'remove', help="remove object or table from storage")
cmdline_parser_remove.add_argument("classname")
cmdline_parser_remove.add_argument("id", nargs="*")
cmdline_parser_remove.set_defaults(func=remove)

cmdline_args = cmdline_parser.parse_args()

db = pyfaf.storage.Database(debug=cmdline_args.verbose > 2)
cmdline_args.func()
