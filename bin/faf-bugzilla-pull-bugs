#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pytz
import logging
import datetime

import pyfaf
from pyfaf.storage.rhbz import RhbzBug

# Command line argument processing
parser = pyfaf.argparse.ArgumentParser(
    description="Pull bugs from Bugzilla to local cache.")
parser.add_argument("--user", help="Bugzilla user name")
parser.add_argument("--password", help="Bugzilla user password")
parser.add_argument("--url", help="Bugzilla URL")
parser.add_argument("--offset", type=int, default=0,
    help="Offset to the bug list")
parser.add_argument("--with-comments", action="store_true", default=False)
parser.add_argument("--with-attachments", action="store_true", default=False)
parser.add_argument("--abrt-only", action="store_true", default=False)
parser.add_argument("--product")
parser.add_argument("--product-version")
parser.add_argument("--changed-from", help="Search for bugs changed since date")
parser.add_argument("--changed-to", help="Search for bugs changed till date")
parser.add_argument("--remove-bugs", action="store_true", default=False,
    help="Remove bugs not found by search")
cmdline = parser.parse_args()

utc = pytz.timezone("UTC")
bztz = [pytz.timezone("America/New_York"), pytz.timezone("Etc/GMT+4")]

db = pyfaf.storage.Database(debug=cmdline.verbose > 2)

logging.info("Loading local bugs from storage")
raw_local_bugs = db.session.query(RhbzBug.id, RhbzBug.last_change_time).all()
local_bugs = {}
for raw_local_bug in raw_local_bugs:
    local_bugs[raw_local_bug[0]] = raw_local_bug[1].replace(tzinfo=utc)

if cmdline.abrt_only:
    whiteboard = "abrt_hash"
    whiteboard_type = "allwordssubstr"
else:
    whiteboard = None
    whiteboard_type = None

if cmdline.user:
    bzuser = cmdline.user
else:
    bzuser = pyfaf.config.CONFIG["bugzilla.user"]

if cmdline.password:
    bzpass = cmdline.password
else:
    bzpass = pyfaf.config.CONFIG["bugzilla.password"]

if cmdline.url:
    bzurl = cmdline.url
else:
    bzurl = pyfaf.config.CONFIG["bugzilla.url"]

logging.info("Initializing Bugzilla")
bz = pyfaf.bugzilla.Bugzilla(bzurl, db)
bz.login(bzuser, bzpass)

logging.info("Querying bugs")
bugs = bz.search_bugs(raw=False,
                      whiteboard=whiteboard,
                      whiteboard_type=whiteboard_type,
                      order="Modified",
                      chfield_from=cmdline.changed_from,
                      chfield_to=cmdline.changed_to,
                      chfield=None,
                      product=cmdline.product,
                      product_version=cmdline.product_version,
                      output_format="%{last_changed_time}",
                      return_list=True)

i = 0
for bug in bugs:
    logging.debug("Processing bug #{0}".format(bug["bug_id"]))
    if bug["bug_id"] in local_bugs:
        local_time = local_bugs[bug["bug_id"]]

        # BEGIN hack // BZ operates in GMT+4 & GMT+5. Check GMT+4 first
        #            // and skip on match, otherwise assume GMT+5
        #            // ToDo: Fix it :-)
        remote_time = datetime.datetime.strptime(bug["changeddate"],
                "%Y-%m-%d %H:%M:%S").replace(tzinfo=bztz[1]).astimezone(utc)
        if remote_time == local_time:
            logging.debug("Skipping up-to-date bug #{0}".format(bug["bug_id"]))
            continue
        # END hack

        remote_time = datetime.datetime.strptime(bug["changeddate"],
                "%Y-%m-%d %H:%M:%S").replace(tzinfo=bztz[0]).astimezone(utc)

        if remote_time < local_time:
            logging.warn("Local time is newer than remote time"
                         " bug #{0} - {1} vs. {2})".format(bug["bug_id"],
                         local_time, remote_time))
        elif remote_time > local_time:
            logging.info("Updating bug #{0}".format(bug["bug_id"]))
            try:
                bz.download_bug_to_storage(bug["bug_id"],
                    with_comments=cmdline.with_comments,
                    with_attachments=cmdline.with_attachments, flush=True)
                i += 1
            except Exception as ex:
                logging.error(str(ex))
                continue
        else:
            logging.debug("Skipping up-to-date bug #{0}".format(bug["bug_id"]))
            continue
    else:
        i += 1
        logging.info("Downloading new bug #{0}".format(bug["bug_id"]))
        try:
            bz.download_bug_to_storage(bug["bug_id"],
                with_comments=cmdline.with_comments,
                with_attachments=cmdline.with_attachments, flush=True)
            i += 1
        except Exception as ex:
            logging.error(str(ex))
            continue

logging.info("{0} bugs were touched".format(i))
