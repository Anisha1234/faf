#!/usr/bin/env python
import sys
import logging
import datetime

import pyfaf

from pyfaf.storage.rhbz import RhbzBug
from pyfaf.storage.report import Report, ReportRhbz

from sqlalchemy.sql.expression import desc

parser = pyfaf.argparse.ArgumentParser(description="Bugzilla scraper",
                                       default_log_level=1)
parser.add_argument("--create_components", help="Create missing components",
                    default=False, action="store_true")
parser.add_argument("--create_opsysreleases", help="Create missing releases",
                    default=False, action="store_true")

parser.add_argument("--from", help="Search for bugs changed since date",
                    metavar="YYYY-MM-DD")
parser.add_argument("--to", help="Search for bugs changed till date",
                    metavar="YYYY-MM-DD")

parser.add_argument("--id", help="Pull bug with specified ID",
                    metavar="ID")

parser.add_argument("--all", help="Pull non ABRT bugs",
                    default=False, action="store_true")

parser.add_argument("--update", help="Only update already downloaded bugs",
                    default=False, action="store_true")

parser.add_argument("--product", help="Download bugs for this product",
                    default="Fedora")

parser.add_argument("--top", help="Update top N reports",
                    metavar="N", type=int)

args = parser.parse_args()
arg_dict = vars(args)

if __name__ == "__main__":
    fmt = '%Y-%m-%d'
    kwargs = dict()

    for dtfield in ['from', 'to']:
        passed = arg_dict[dtfield]
        if passed:
            try:
                kwargs[dtfield + '_date'] = datetime.datetime.strptime(
                    passed, fmt).date()
            except ValueError:
                print('Invalid date format passed: {0}, '
                      'use YYYY-MM-DD'.format(passed))
                sys.exit(1)

    # set bugzilla log level to our current level
    bz_logger = logging.getLogger('bugzilla')
    bz_logger.setLevel(logging.getLogger().level)

    db = pyfaf.storage.getDatabase()
    bugzilla = pyfaf.bugzilla.Bugzilla(db)
    bugzilla.login()

    bugzilla.add_components = args.create_components
    bugzilla.add_opsysreleases = args.create_opsysreleases

    def process(bug):
        processed = bugzilla.process_bug(bug)
        if not processed:
            logging.error('Failed to process bug #{0}.'.format(bug.bug_id))
            return

        bugzilla.save_bug(processed)

    if args.id:
        bugzilla.save_bug(bugzilla.download_bug(args.id))
    elif args.update:
        bugzilla.update_downloaded_bugs()
    elif args.all:
        map(process, bugzilla.all_bugs(**kwargs))
    elif args.top:
        logging.info("Updating top {0} reports".format(args.top))
        candidates = (db.session.query(Report)
                        .join(ReportRhbz)
                        .join(RhbzBug)
                        .filter(RhbzBug.status != "CLOSED")
                        .order_by(desc(Report.count))
                        .limit(args.top)
                        .all())

        update_ids = set()
        for report in candidates:
            update_ids.update(map(lambda bug: bug.id,
                                  filter(lambda bug: bug.status != "CLOSED",
                                         report.bugs)))

        total = len(update_ids)
        logging.info("Bugs to update: {0}".format(total))

        for num, bug_id in enumerate(update_ids):
            logging.info("Updating {0} ({1}/{2})".format(bug_id, num + 1, total))
            bugzilla.save_bug(bugzilla.download_bug(bug_id))

    else:
        map(process, bugzilla.all_abrt_bugs(args.product, **kwargs))
