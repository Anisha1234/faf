#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import sys
import subprocess
import logging
from pyfaf.storage import *

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_parser.add_argument("--only-missing", action="store_true",
                            default=False,
                            help="downloads only packages missing in the cache")
cmdline_parser.add_argument("--use-storage", action="store_true", default=False, help="Use storage instead of cache")
cmdline_args = cmdline_parser.parse_args()

if not cmdline_args.use_storage:
    # old behaviour - cache
    logging.info("Searching local cache for packages.")
    local_package_id_list = pyfaf.run.cache_list_id("fedora-pkgdb-package")
    logging.info("Found {0} packages in local cache.".format(len(local_package_id_list)))
    # Get package names
    logging.info("Getting package names from local cache.")
    local_package_list = []
    index = 0
    for package_id in local_package_id_list:
        index += 1
        logging.debug("[{0}/{1}] package #{2}".format(index, len(local_package_id_list), package_id))
        package = pyfaf.run.cache_get("fedora-pkgdb-package", package_id)
        local_package_list.append(package.name)

    logging.info("Loading package list from Fedora Package Database.")
    args = ["faf-fedora-pkgdb", "packages"]
    pkgdb_proc = subprocess.Popen(args, stdout=subprocess.PIPE)
    package_list_text = pkgdb_proc.communicate()[0]
    if pkgdb_proc.returncode != 0:
        sys.stderr.write("Failed to get package list from Fedora Package Database.\n")
        exit(1)
    package_list = [line.strip() for line in package_list_text.splitlines()]
    logging.info("Found {0} packages in Fedora Package Database.".format(len(package_list)))

    if cmdline_args.only_missing:
        for package in package_list[:]:
            if package in local_package_list:
                package_list.remove(package)

    logging.info("Loading {0} packages from Fedora Package Database.".format(len(package_list)))
    index = 0
    for package_name in package_list:
        index += 1
        logging.info("[{0}/{1}] Processing package '{2}'.".format(index, len(package_list), package_name))
        args = ["faf-fedora-pkgdb", "package", package_name]
        package_text = pyfaf.run.process(args, stdout=subprocess.PIPE, timeout=5*60, timeout_attempts=1, returncode_attempts=2)[0]
        package = pyfaf.cache.fedora_pkgdb_package.parser.from_text(package_text, failure_allowed=False)
        pyfaf.run.cache_add_text(package_text, package.id, "fedora-pkgdb-package", overwrite=True)

    exit(0)

db = pyfaf.storage.Database(debug=cmdline_args.verbose > 2)

opsys = db.session.query(OpSys).filter(OpSys.name == "Fedora").one()

for release in db.session.query(OpSysRelease).filter(OpSysRelease.opsys == opsys):
    logging.info("Loading package list from Fedora Package Database for {0} {1}.".format(release.opsys.name, release.version))

    collection_shortname = release.version
    if collection_shortname != "devel":
        collection_shortname = "f" + collection_shortname

    args = ["faf-fedora-pkgdb", "packages", collection_shortname]
    pkgdb_proc = subprocess.Popen(args, stdout=subprocess.PIPE)
    package_list_text = pkgdb_proc.communicate()[0]
    if pkgdb_proc.returncode != 0:
        logging.info("Failed to get {0} package list.".format(collection_shortname))
        continue

    packages = [line.strip() for line in package_list_text.splitlines()]

    logging.info("Found {0} packages in {1} {2}.".format(len(packages), release.opsys.name, release.version))

    existing_components = (db.session.query(OpSysComponent.name)
                            .join(OpSysReleaseComponent)
                            .filter(OpSysReleaseComponent.opsysreleases_id == release.id)
                            .all())
    existing_components = set([v[0] for v in existing_components])

    for package in packages:
        if package in existing_components:
            logging.debug("Skipping component {0}.".format(package))
            continue

        component = db.session.query(OpSysComponent).filter(OpSysComponent.name == package).first()
        if component:
            logging.debug("Found component {0} in storage.".format(package))
        else:
            logging.debug("Adding component {0} to storage.".format(package))
            component = OpSysComponent()
            component.name = package
            component.opsys = opsys
            db.session.add(component)

        logging.debug("Adding component {0} to release {1} {2}.".format(package, release.opsys.name, release.version))
        release_assoc = OpSysReleaseComponent();
        release_assoc.release = release
        component.opsysreleases.append(release_assoc)

    db.session.flush()
