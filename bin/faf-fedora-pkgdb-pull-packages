#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import logging
import subprocess

import pyfaf
from pyfaf.storage.opsys import (OpSys,
                                 OpSysRelease,
                                 OpSysComponent,
                                 OpSysReleaseComponent)

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser()
cmdline_parser.add_argument("--only-missing", action="store_true",
                            default=False,
                            help="downloads only packages missing in the cache")
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.storage.Database(debug=cmdline_args.verbose > 2)

opsys = db.session.query(OpSys).filter(OpSys.name == "Fedora").one()

for release in db.session.query(OpSysRelease).filter(
        OpSysRelease.opsys == opsys):
    logging.info("Loading package list from Fedora Package Database for"
                 " {0} {1}.".format(release.opsys.name, release.version))

    collection_shortname = release.version
    if collection_shortname != "devel":
        collection_shortname = "f" + collection_shortname

    args = ["faf-fedora-pkgdb", "packages", collection_shortname]
    pkgdb_proc = subprocess.Popen(args, stdout=subprocess.PIPE)
    package_list_text = pkgdb_proc.communicate()[0]
    if pkgdb_proc.returncode != 0:
        logging.info("Failed to get {0} package list.".format(
            collection_shortname))
        continue

    packages = [line.strip() for line in package_list_text.splitlines()]

    logging.info("Found {0} packages in {1} {2}.".format(len(packages),
        release.opsys.name, release.version))

    existing_components = (db.session.query(OpSysComponent.name)
                            .join(OpSysReleaseComponent)
                            .filter(OpSysReleaseComponent.opsysreleases_id ==
                                release.id)
                            .all())
    existing_components = set([v[0] for v in existing_components])

    for package in packages:
        if package in existing_components:
            logging.debug("Skipping component {0}.".format(package))
            continue

        component = db.session.query(OpSysComponent).filter(
            OpSysComponent.name == package).first()
        if component:
            logging.debug("Found component {0} in storage.".format(package))
        else:
            logging.debug("Adding component {0} to storage.".format(package))
            component = OpSysComponent()
            component.name = package
            component.opsys = opsys
            db.session.add(component)

        logging.debug("Adding component {0} to release {1} {2}.".format(
            package, release.opsys.name, release.version))
        release_assoc = OpSysReleaseComponent();
        release_assoc.release = release
        component.opsysreleases.append(release_assoc)

    db.session.flush()
