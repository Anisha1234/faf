#!/usr/bin/env python
import datetime

import pyfaf
from django.core.urlresolvers import reverse
from django.contrib.sites.models import Site

if __name__ == "__main__":
    parser = pyfaf.argparse.ArgumentParser(description='Component statistics.')
    parser.add_argument('--opsys', help='OpSys name', default='Fedora')
    parser.add_argument('--version', help='OpSys version')
    parser.add_argument('--count', help='Show this number of items',
        default=5)
    parser.add_argument('--detail-count',
        help='Show this number detail items for each component',
        default=2)
    parser.add_argument('--last', metavar='N', help='Use last N days')

    args = parser.parse_args()

    db = pyfaf.storage.getDatabase()

    site = Site.objects.get_current()
    server_url = 'http://{0}'.format(site.domain)

    history = 'daily'
    hist_table, hist_field = pyfaf.queries.get_history_target(history)
    total = pyfaf.queries.query_history_sum(db, args.opsys, args.version)

    comps = pyfaf.queries.query_report_count_per_component(
        db, args.opsys, args.version, history)

    if args.last:
        now = datetime.datetime.now()
        since = now - datetime.timedelta(days=int(args.last))
        comps = comps.filter(hist_field >= since)
        total = total.filter(hist_field >= since)

    total_num = total.first()[0]

    limit = int(args.count)
    limit_details = int(args.detail_count)
    for num, (comp, count) in enumerate(comps):
        if num >= limit:
            break

        reports = pyfaf.queries.query_report_stats_per_component(
            db, comp, history)

        if args.last:
            reports = reports.filter(hist_field >= since)

        print('{0}. {1} seen {2} times ({3:.0%} of all reports)'.format(num+1, comp, count, count / float(total_num)))
        problem_ids = []
        for report, report_count in reports:
            if not report.problem:
                continue
            if len(problem_ids) >= limit_details:
                break
            if report.problem.id in problem_ids:
                continue

            problem_ids.append(report.problem.id)

            problem_url = server_url + reverse('pyfaf.hub.problems.views.item',
                                               args=[report.problem.id])

            print('    {0} {1}'.format(problem_url,
            ', '.join(map(str, report.bugs))))
        print('')
