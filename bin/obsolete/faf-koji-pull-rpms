#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import sys
import subprocess
import time
import tempfile
import rpm
import rpmUtils.miscutils
import logging

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(
    description="Download RPMs from Koji.")
cmdline_parser.add_argument("os_prefix")
cmdline_parser.add_argument("--only-missing", action="store_true",
                            default=False,
                            help="downloads only builds missing in the cache")
cmdline_parser.add_argument("--build-id", type=int,
                            help="downloads RPMs only for a single build")
cmdline_args = cmdline_parser.parse_args()

# Get build list from cache
logging.info("Loading Koji build list from local cache.")
build_id_list = pyfaf.run.cache_list_id("{0}-koji-build".format(cmdline_args.os_prefix))
logging.info("Found {0} Koji builds in local cache.".format(len(build_id_list)))

# If a build id is specified on the command line, remove all other
# builds from the build_id list.
if cmdline_args.build_id is not None:
    if cmdline_args.build_id not in build_id_list:
        sys.stderr.write("Failed to find build #{0} in local cache.\n".format(cmdline_args.build_id))
        exit(1)
    build_id_list = [cmdline_args.build_id]

# Load builds from cache, but do not keep them in memory
rpms = []
index = 0
for build_id in build_id_list:
    index +=1
    logging.debug("[{0}/{1}] Loading build #{2}.".format(index, len(build_id_list), build_id))
    build = pyfaf.run.cache_get("{0}-koji-build".format(cmdline_args.os_prefix), build_id)
    rpms.extend([[rpm_id,build_id,build.nvr()] for rpm_id in build.rpms])

# Load existing rpms from cache
logging.info("Loading Koji rpm list from local cache.")
rpm_id_list = pyfaf.run.cache_list_id("{0}-koji-rpm".format(cmdline_args.os_prefix))
logging.info("Found {0} Koji rpms in local cache.".format(len(rpm_id_list)))

if cmdline_args.only_missing:
    logging.info("Removing local cache RPMs from download list.")
    before = len(rpms)
    for rpm_info in rpms[:]:
        if rpm_info[0] in rpm_id_list:
            rpms.remove(rpm_info)
    logging.info("Removed {0} already downloaded RPMS from the download list.".format(before - len(rpms)))

index = 0
for rpm_info in rpms:
    index +=1
    logging.debug("[{0}/{1}] Downloading rpm #{2} for build #{3} - {4}.".format(
            index, len(rpms), rpm_info[0], rpm_info[1], rpm_info[2]))
    pyfaf.koji.download_rpm(rpm_info, cmdline_args.os_prefix)
