#!/usr/bin/python
import logging
import obs
import pyfaf
import rpm
from pyfaf.common import store_package_deps
from pyfaf.storage import *

# OBS Project == Storage Tag !

if __name__ == "__main__":
    cmdline_parser = pyfaf.argparse.ArgumentParser(description="Downloads builds from Open Build Service")
    cmdline_parser.add_argument("os", help="Operating System")
    cmdline_parser.add_argument("--with-packages", action="store_true", default=False, help="Also download package blobs")
    cmdline = cmdline_parser.parse_args()

    db = Database(debug=cmdline.verbose > 2)

    opsys = db.session.query(OpSys).filter(OpSys.name == cmdline.os).one()
    buildsys = db.session.query(BuildSystem).filter(BuildSystem.opsys_id == opsys.id).one()

    obs = obs.OBS(buildsys.xmlrpc_url,
                  pyfaf.config.CONFIG["obs.username"],
                  pyfaf.config.CONFIG["obs.password"])

    releases = obs.get_distributions(vendor=opsys.name)
    versions = sorted(r[1] for r in releases)
    logging.info("Found {0} active releases for {1}: {2}".format(len(releases), opsys.name, ", ".join(versions)))
    inactive = db.session.query(OpSysRelease).filter(OpSysRelease.opsys_id == opsys.id).filter(~OpSysRelease.version.in_(versions)).all()
    if inactive:
        logging.info("Found {0} inactive releases for {1}: {2}".format(len(releases), opsys.name, ", ".join(i.version for i in inactive)))
        for i in inactive:
            logging.debug("Marking {0} {1} as EOL".format(opsys.name, i.version))
            i.status = "EOL"

        db.session.flush()

    arches = {}
    raw_arches = db.session.query(Arch).all()
    for arch in raw_arches:
        arches[arch.name] = arch

    builds = {}
    raw_builds = db.session.query(Build).join(OpSysComponent).filter(OpSysComponent.opsys_id == opsys.id).all()
    for build in raw_builds:
        builds[build.nvr()] = build

    for name, version, project, repo in releases:
        release = db.session.query(OpSysRelease).filter(OpSysRelease.opsys_id == opsys.id).filter(OpSysRelease.version == version).first()
        if not release:
            logging.info("Creating new release {0} {1}".format(name, version))
            release = OpSysRelease()
            release.opsys_id = opsys.id
            release.version = version
            release.status = 'ACTIVE'

            db.session.add(release)
            db.session.flush()

        projname, repos = obs.get_project(project)
        for arch in repos[repo]:
            logging.info("Processing {0} {1} {2}".format(name, version, arch))
            for comp in sorted(obs.get_repository(project, repo, arch)):
                logging.info("Processing component {0}".format(comp))
                component = db.session.query(OpSysComponent).filter(OpSysComponent.name == comp).filter(OpSysComponent.opsys_id == opsys.id).first()
                if not component:
                    logging.debug("Creating component {0}".format(comp))
                    component = OpSysComponent()
                    component.name = comp
                    component.opsys_id = opsys.id
                    db.session.add(component)
                    db.session.flush()

                relcomponent = db.session.query(OpSysReleaseComponent).filter(OpSysReleaseComponent.components_id == component.id).filter(OpSysReleaseComponent.opsysreleases_id == release.id).first()
                if not relcomponent:
                    logging.debug("Adding component {0} to {1} {2}".format(component.name, opsys.name, release.version))
                    relcomponent = OpSysReleaseComponent()
                    relcomponent.opsysreleases_id = release.id
                    relcomponent.components_id = component.id
                    db.session.add(relcomponent)
                    db.session.flush()

                pkgs = obs.get_package_binaries(project, repo, arch, component.name)
                packages = filter(lambda p: p[0].endswith(".rpm"), pkgs)

                if len(packages) < 1:
                    logging.info("No packages available")
                    continue

                # hack - get SRPM at the first position
                # not an absolute ordering - non-SRPMs are equal
                packages = sorted(packages, cmp=lambda x, y: -int(x[0].endswith(".src.rpm")) + int(y[0].endswith(".src.rpm")))

                # build
                srpm_filename, srpm_size, srpm_mtime = packages[0]
                if not srpm_filename.endswith(".src.rpm"):
                    logging.warn("'{0}' does not seem to be a source RPM, skipping".format(srpm_filename))
                    continue

                if len(packages) > 1 and packages[1][0].endswith(".src.rpm"):
                    logging.warn("'{0}' seems to be a second source RPM, skipping".fomrat(packages[1][0]))
                    continue

                nvr = srpm_filename[:-8]
                if not nvr in builds:
                    logging.info("Downloading '{0}'".format(srpm_filename))
                    pkg = obs.download_package_to_tmp(project, repo, arch, component.name, srpm_filename)

                    try:
                        ts = rpm.ts()
                        ts.setVSFlags(rpm._RPMVSF_NOSIGNATURES)
                        with open(pkg, "rb") as fd:
                            hdr = ts.hdrFromFdno(fd)

                        build = Build()
                        build.component_id = component.id
                        if hdr["epoch"] is None:
                            build.epoch = 0
                        else:
                            build.epoch = hdr["epoch"]
                        build.version = hdr["version"]
                        build.release = hdr["release"]
                        db.session.add(build)
                        db.session.flush()

                        logging.debug("'{0}' => {1} {2} {3}".format(pkg, build.epoch, build.version, build.release))

                        builds[nvr] = build

                        srpm = Package()
                        srpm.name = hdr["name"]
                        srpm.arch_id = arches["src"].id
                        srpm.build_id = build.id
                        srpm.pkgtype = "rpm"
                        db.session.add(srpm)
                        db.session.flush()

                        with open(pkg, "rb") as fd:
                            srpm.save_lob("package", fd, truncate=True, binary=True)

                        store_package_deps(db, srpm)
                    except Exception as ex:
                        logging.error("Error creating build '{0}': {1}".format(nvr, str(ex)))
                    finally:
                        os.unlink(pkg)

                buildarch = db.session.query(BuildArch).filter(BuildArch.build_id == builds[nvr].id).filter(BuildArch.arch_id == arches[arch].id).first()
                if buildarch:
                    logging.debug("Skipping existing build '{0}'".format(nvr))
                    continue

                if cmdline.with_packages:
                    for filename, size, mtime in packages[1:]:
                        logging.info("Downloading '{0}'".format(filename))
                        pkg = obs.download_package_to_tmp(project, repo, arch, component.name, filename)

                        try:
                            ts = rpm.ts()
                            ts.setVSFlags(rpm._RPMVSF_NOSIGNATURES)
                            with open(pkg, "rb") as fd:
                                hdr = ts.hdrFromFdno(fd)

                            new = Package()
                            new.name = hdr["name"]
                            new.arch_id = arches[hdr["arch"]].id
                            new.build_id = build.id
                            new.pkgtype = "rpm"
                            db.session.add(new)
                            db.session.flush()

                            with open(pkg, "rb") as fd:
                                new.save_lob("package", fd, truncate=True, binary=True)

                            store_package_deps(db, new)
                        except Exception as ex:
                            logging.error("Error saving package '{0}': {1}".format(filename, str(ex)))
                        finally:
                            os.unlink(pkg)

                logging.info("Adding architecture '{0}' to build '{1}'".format(arch, nvr))
                buildarch = BuildArch()
                buildarch.arch_id = arches[arch].id
                buildarch.build_id = builds[nvr].id
                db.session.add(buildarch)
                db.session.flush()
