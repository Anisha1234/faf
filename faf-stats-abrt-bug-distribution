#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import sys
import logging

def print_csv(component_counts, per_bug):
    if per_bug:
        sys.stdout.write("cluster, reports")
    else:
        sys.stdout.write("component, bugs, reports")
    sys.stdout.write("\n")

    if per_bug:
        for (component, bugs, reports) in sorted(component_counts, key=lambda (c, b, r): r, reverse=True):
            sys.stdout.write("{0}, {1}\n".format(component, reports))
    else:
        for (component, bugs, reports) in sorted(component_counts, key=lambda (c, b, r): b, reverse=True):
            sys.stdout.write("{0}, {1}, {2}\n".format(component, bugs, reports))

def print_gnuplot(component_counts, per_bug, cdf):
    bug_counts = sorted([b for (c, b, r) in component_counts], reverse=True)
    report_counts = sorted([r for (c, b, r) in component_counts], reverse=True)
    if per_bug:
        output = "abrt-reports-per-bug"
        titles = ["reports"]
        data = [report_counts]
    else:
        output = "abrt-bugs-per-component"
        titles = ["reports", "bugs"]
        data = [report_counts, bug_counts]
    if cdf:
        cdf_string = "(cumulative) "
        output += "-cdf"
        for counts in [bug_counts, report_counts]:
            for i in xrange(1, len(counts)):
                counts[i] += counts[i - 1]
    else:
        cdf_string = ""
    sys.stdout.write("set terminal pdf color\n")
    sys.stdout.write("set output \"{0}.pdf\"\n".format(output))
    sys.stdout.write("set grid\n")
    if per_bug:
        sys.stdout.write("set title \"Distribution {0}of ABRT reports per bug\"\n".format(cdf_string))
    else:
        sys.stdout.write("set title \"Distribution {0}of ABRT bugs and reports per component\"\n".format(cdf_string))

    for (i, title) in enumerate(titles):
        if i == 0:
            sys.stdout.write("plot \'-\' using 1:2 \\\n")
        else:
            sys.stdout.write("    \'-\' using 1:2 \\\n")
        sys.stdout.write("    title \"{0}\" \\\n".format(title))
        if i < len(titles) - 1:
            sys.stdout.write("    with lines linewidth 4, \\\n")
        else:
            sys.stdout.write("    with lines linewidth 4\n")
    sys.stdout.write("\n\n")

    for counts in data:
        for (i, count) in enumerate(counts):
            if cdf:
                i /= float(len(counts))
                count /= float(counts[-1])
            sys.stdout.write("{0} {1}\n".format(i, count))
        sys.stdout.write("e\n")

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Get the number of ABRT-reported deduped bugs with backtrace and reports per component")
cmdline_parser.add_argument("-f", "--format", default="csv", choices=["csv", "gnuplot", "gnuplot-cdf", "plain"],
                            help="output format [default: csv]")
cmdline_parser.add_argument("--cut-id", default=1, help="Use clusters with this cut id (default 1)")
cmdline_parser.add_argument("--orig-components", action="store_true", default=False, help="Find originally assigned components (slow)")
cmdline_parser.add_argument("--per-bug", action="store_true", default=False, help="Use number of reports per bug instead of component")
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.cache.Database()

logging.info("Searching DB for bugs with parsable backtrace.")
bug_ids = pyfaf.run.cache_list_id("rhbz-optimized-backtrace")

cut_id = cmdline_args.cut_id
i = 0
clusters = dict()

logging.info("Searching DB for stored clusters (cut_id = {0}).".format(cut_id))
db.execute("SELECT id FROM rhbz_cluster WHERE cut_id = {0}".format(cut_id))

for row in db.fetchall():
    rhbz_cluster = pyfaf.run.cache_get("rhbz-cluster", row[0])
    for bug_id in rhbz_cluster.bugs:
        clusters[bug_id] = i
    i += 1

# Add remaining clusters with one object
for bug_id in bug_ids:
    if bug_id not in clusters:
        clusters[bug_id] = i
        i += 1

logging.info("Collecting deduped bugs and reports per component.")
component_bugs = dict()
cluster_reports = dict()
for (i, bug_id) in enumerate(bug_ids):
    logging.debug("Reading bug {0}/{1} #{2}".format(i + 1, len(bug_ids), bug_id))
    bug = pyfaf.run.cache_get("rhbz-bug", bug_id)

    if cmdline_args.orig_components:
        component = pyfaf.btserver.get_original_component(db, bug)
        if not component:
            component = bug.component
        component = str(component)
    else:
        component = bug.component

    reports = set([(clusters[bug_id], user_id) for user_id in bug.cc + [bug.creator_id]])

    if clusters[bug_id] not in cluster_reports:
        cluster_reports[clusters[bug_id]] = set()
    cluster_reports[clusters[bug_id]] |= reports

    if component not in component_bugs:
        component_bugs[component] = [set(), set()]
    component_bugs[component][0].add(clusters[bug_id])
    component_bugs[component][1] |= reports

db.close()

if cmdline_args.per_bug:
    component_counts = [(cluster, 1, len(reports)) for (cluster, reports) in cluster_reports.iteritems()]
else:
    component_counts = [(component, len(bugs), len(reports)) for (component, (bugs, reports)) in component_bugs.iteritems()]

if cmdline_args.format == "plain":
    component_counts.sort(key=lambda (c, b, r): r, reverse=True)
    for (component, bug_count, report_count) in component_counts:
        print component, bug_count, report_count
elif cmdline_args.format == "csv":
    print_csv(component_counts, cmdline_args.per_bug)
elif cmdline_args.format == "gnuplot":
    print_gnuplot(component_counts, cmdline_args.per_bug, False)
elif cmdline_args.format == "gnuplot-cdf":
    print_gnuplot(component_counts, cmdline_args.per_bug, True)
