#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import koji
import sys
import urllib2
import base64
import datetime
import binascii
import time
import pyfaf

session = None

def tags(cmdline_args):
    # second parameter = options = {'debug_xmlrpc':1}
    remote_tags = session.listTags()
    for remote_tag in sorted(remote_tags, key=lambda x: x["id"]):
        sys.stdout.write("{0} {1}\n".format(remote_tag["id"], remote_tag["name"]))

def tag(cmdline_args):
    remote_tag = session.getTag(cmdline_args.id)
    sys.stdout.write("Id: {0}\n".format(remote_tag["id"]))
    sys.stdout.write("Name: {0}\n".format(remote_tag["name"]))
    if remote_tag["arches"] is not None:
        sys.stdout.write("Architectures: {0}\n".format(remote_tag["arches"]))
    if remote_tag["perm_id"] is not None:
        sys.stdout.write("PermId: {0}\n".format(remote_tag["perm_id"]))
    sys.stdout.write("Locked: {0}\n".format(remote_tag["locked"]))
    inheritance_list = session.getInheritanceData(cmdline_args.id)
    if len(inheritance_list) > 0:
        sys.stdout.write("Inheritance:\n")
        for inheritance in inheritance_list:
            sys.stdout.write("- ParentId: {0}\n".format(inheritance["parent_id"]))
            sys.stdout.write("  Intransitive: {0}\n".format(inheritance["intransitive"]))
            sys.stdout.write("  Priority: {0}\n".format(inheritance["priority"]))
            sys.stdout.write("  Config: {0}\n".format(not inheritance["noconfig"]))

def packages(cmdline_args):
    if cmdline_args.tag_id is None:
        remote_packages = session.listPackages()
    else:
        remote_packages = [remote_package for remote_package in session.listPackages(tagID=cmdline_args.tag_id, inherited=True)
                           if not remote_package["blocked"]]
    for remote_package in remote_packages:
        sys.stdout.write("{0} {1}\n".format(remote_package["package_id"], remote_package["package_name"]))

def builds(cmdline_args):
    remote_builds = session.listTagged(cmdline_args.tag_id, package=cmdline_args.package_name)
    for remote_build in remote_builds:
        sys.stdout.write("{0} {1}\n".format(remote_build["build_id"], remote_build["nvr"]))

def build(cmdline_args):
    remote_build = session.getBuild(cmdline_args.id or cmdline_args.nvr)
    sys.stdout.write("Id: {0}\n".format(remote_build["id"]))
    sys.stdout.write("Name: {0}\n".format(remote_build["name"]))
    sys.stdout.write("Version: {0}\n".format(remote_build["version"]))
    sys.stdout.write("Release: {0}\n".format(remote_build["release"]))
    if remote_build["epoch"] is None:
        sys.stdout.write("Epoch: 0\n")
    else:
        sys.stdout.write("Epoch: {0}\n".format(remote_build["epoch"]))
    sys.stdout.write("TaskId: {0}\n".format(remote_build["task_id"]))
    def convert_time(value):
        value = datetime.datetime.strptime(value, "%Y-%m-%d %H:%M:%S.%f")
        return value.strftime("%Y-%m-%dT%H:%M:%S.%f%z")
    sys.stdout.write("CreationTime: {0}\n".format(convert_time(remote_build["creation_time"])))
    sys.stdout.write("CompletionTime: {0}\n".format(convert_time(remote_build["completion_time"])))

    # Get the build tags.
    remote_tags = [remote_tag['name'] for remote_tag in session.listTags(cmdline_args.id)]
    if len(remote_tags) > 0:
        sys.stdout.write("Tags: {0}\n".format(", ".join(remote_tags)))

    # Build the list of RPMs.
    remote_rpms = session.listBuildRPMs(remote_build["id"])
    if len(remote_rpms) > 0:
        remote_rpm_ids = [str(remote_rpm["id"]) for remote_rpm in sorted(remote_rpms, key=lambda x: x["id"])]
        sys.stdout.write("RPMs: {0}\n".format(", ".join(remote_rpm_ids)))

    base_url = "{0}/{1}/{2}/{3}/data/logs".format(cmdline_args.package_url, remote_build['name'],
                                                  remote_build['version'], remote_build['release'])
    archs = set([remote_rpm["arch"] for remote_rpm in remote_rpms])
    if "src" in archs:
        archs.remove("src")

    # If a not all packages of a component are noarch, build logs are
    # not placed in noarch subdir, but in some arch subdir.
    if len(archs) > 1 and "noarch" in archs:
        archs.remove("noarch")

    sys.stdout.write("Logs:\n")

    def has_log_dir(arch):
        """Returns True if a directory with logs for certain
        architecture exist on the server."""
        try:
            log_dir = urllib2.urlopen("{0}/{1}".format(base_url, arch))
            log_dir.close()
            return True
        except urllib2.HTTPError:
            return False

    def has_log(arch, file_name):
        url = "{0}/{1}/{2}".format(base_url, arch, file_name)
        try:
            logfile = urllib2.urlopen(url)
            logfile.close()
            return True
        except urllib2.HTTPError:
            return False

    def log_id(arch, file_name):
        return "{0}#{1}#{2}".format(remote_build["id"], arch, file_name)

    def print_logs(arch, show_arch=None):
        if show_arch is None:
            show_arch = arch
        sys.stdout.write("- Architecture: {0}\n".format(show_arch))
        for log in [["BuildId", "build.log"],
                    ["RootId", "root.log"],
                    ["StateId", "state.log"]]:
            if has_log(arch, log[1]):
                sys.stdout.write("  {0}: {1}\n".format(log[0], log_id(arch, log[1])))

    # Special case for i386 RPMs with logs in the i686 directory.
    # This is probably a bug somewhere but it happens.  Example:
    # http://koji.fedoraproject.org/koji/buildinfo?buildID=233219
    # Let's normalize it and save i386 remote directory to local i686.
    if "i386" in archs:
        archs.remove("i386")
        if has_log_dir("i386"):
            print_logs("i386", show_arch="i686")
            if "i686" in archs:
                archs.remove("i686")
        else:
            archs.add("i686")

    # Another special case for noarch, also happens.
    # Example: http://koji.fedoraproject.org/koji/buildinfo?buildID=135133
    if len(archs) == 1 and "noarch" in archs:
        archs.remove("noarch")
        if has_log_dir("noarch"):
            print_logs("noarch")
        else:
            archs |= set(["i386", "i586", "i686", "x86_64"]) # let's try various strange stuff

    [print_logs(arch) for arch in archs if has_log_dir(arch)]

def build_log(cmdline_args):
    (build_id, arch, file_name) = cmdline_args.id.split("#")
    remote_build = session.getBuild(int(build_id))
    base_url = "{0}/{1}/{2}/{3}/data/logs".format(cmdline_args.package_url, remote_build['name'], remote_build['version'], remote_build['release'])
    url = "{0}/{1}/{2}".format(base_url, arch, file_name)

    def attempt(attempts=7):
        """Returns empty string on failure, log contents otherwise."""
        try:
            logfile = urllib2.urlopen(url)
            while True:
                data = logfile.read(65536)
                if len(data) == 0:
                    break
                sys.stdout.write(data)
            logfile.close()
        except urllib2.HTTPError:
            sys.stderr.write("Failed to read from {0}.\n".format(url))
            if attempts > 0:
                time.sleep(60) # wait a minute before another attempt
                attempt(attempts - 1)
    attempt()

def rpm(cmdline_args):
    remote_rpm = session.getRPM(cmdline_args.id)
    sys.stdout.write("Id: {0}\n".format(remote_rpm["id"]))
    sys.stdout.write("BuildId: {0}\n".format(remote_rpm["build_id"]))
    sys.stdout.write("Name: {0}\n".format(remote_rpm["name"]))
    if remote_rpm["epoch"] is None:
        sys.stdout.write("Epoch: 0\n")
    else:
        sys.stdout.write("Epoch: {0}\n".format(remote_rpm["epoch"]))
    sys.stdout.write("Version: {0}\n".format(remote_rpm["version"]))
    sys.stdout.write("Release: {0}\n".format(remote_rpm["release"]))
    sys.stdout.write("Architecture: {0}\n".format(remote_rpm["arch"]))
    sys.stdout.write("Size: {0}\n".format(remote_rpm["size"]))

def rpm_data(cmdline_args):
    remote_rpm = session.getRPM(cmdline_args.rpm_id)
    remote_build = session.getBuild(remote_rpm["build_id"])
    filename = koji.pathinfo.rpm(remote_rpm)
    url = "{0}/{1}/{2}/{3}/{4}".format(cmdline_args.package_url, remote_build['name'],
                                       remote_build['version'], remote_build['release'], filename)
    remote_data = urllib2.urlopen(url)
    while True:
        data = remote_data.read(65536)
        if len(data) == 0:
            break
        sys.stdout.write(data)
    remote_data.close()

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(
    description="A Koji build system client.")
cmdline_parser.add_argument("--xml-rpc-url",
                            help="the url of the XML-RPC server of a Koji instance")
cmdline_parser.add_argument("--package-url",
                            help="the url of the package download site of Koji instance")
cmdline_parser.add_argument("--fedora", action="store_true", default=False,
                            help="use Fedora Koji URLs for xml-rpc-url and package-url")
cmdline_parser.add_argument("--brew", action="store_true", default=False,
                            help="use Brew URLs for xml-rpc-url and package-url")
cmdline_subparsers = cmdline_parser.add_subparsers(title="subcommands")
cmdline_parser_tags = cmdline_subparsers.add_parser(
    'tags', help="get the list of all tags")
cmdline_parser_tags.set_defaults(func=tags)
cmdline_parser_tag = cmdline_subparsers.add_parser(
    "tag", help="get a tag")
cmdline_parser_tag.add_argument("id", type=int)
cmdline_parser_tag.set_defaults(func=tag)
cmdline_parser_packages = cmdline_subparsers.add_parser(
    "packages", help="get the list of packages")
cmdline_parser_packages.add_argument("--tag-id", type=int)
cmdline_parser_packages.set_defaults(func=packages)
cmdline_parser_builds = cmdline_subparsers.add_parser(
    "builds", help="get the list of builds")
cmdline_parser_builds.add_argument("tag_id", type=int)
cmdline_parser_builds.add_argument("package_name")
cmdline_parser_builds.set_defaults(func=builds)
cmdline_parser_build = cmdline_subparsers.add_parser(
    "build", help="get build metadata")
cmdline_parser_build.add_argument("--id", type=int)
cmdline_parser_build.add_argument("--nvr")
cmdline_parser_build.set_defaults(func=build)
cmdline_parser_build_log = cmdline_subparsers.add_parser(
    "build-log", help="get build log contents")
cmdline_parser_build_log.add_argument("id")
cmdline_parser_build_log.set_defaults(func=build_log)
cmdline_parser_rpm = cmdline_subparsers.add_parser(
    "rpm", help="get rpm metadata")
cmdline_parser_rpm.add_argument("id", type=int)
cmdline_parser_rpm.set_defaults(func=rpm)
cmdline_parser_rpm_data = cmdline_subparsers.add_parser(
    "rpm-data", help="get rpm contents")
cmdline_parser_rpm_data.add_argument("rpm_id", type=int)
cmdline_parser_rpm_data.set_defaults(func=rpm_data)
cmdline_args = cmdline_parser.parse_args()

# Set the Koji URLs when --fedora or --brew was used.
if cmdline_args.fedora:
    if cmdline_args.xml_rpc_url is not None or \
            cmdline_args.package_url is not None or \
            cmdline_args.brew:
        sys.stderr.write("Cannot use --fedora with --xml-rpc-url, --package-url, and --brew.\n")
        exit(1)
    cmdline_args.xml_rpc_url = "http://koji.fedoraproject.org/kojihub"
    cmdline_args.package_url = "http://kojipkgs.fedoraproject.org/packages"
elif cmdline_args.brew:
    # We know cmdline_args.fedora is not True here.
    if cmdline_args.xml_rpc_url is not None or \
            cmdline_args.package_url is not None:
        sys.stderr.write("Cannot use --brew with --xml-rpc-url, --package-url.\n")
        exit(1)
    cmdline_args.xml_rpc_url = "http://brewhub.devel.redhat.com/brewhub"
    cmdline_args.package_url = "http://porkchop.devel.redhat.com/brewroot/packages"

session = koji.ClientSession(cmdline_args.xml_rpc_url)
cmdline_args.func(cmdline_args)
