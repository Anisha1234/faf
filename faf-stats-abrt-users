#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import argparse
import sys
import datetime
import subprocess

# Command line argument processing
cmdline_parser = argparse.ArgumentParser()
cmdline_parser.add_argument('-v', nargs='?', action=pyfaf.VerboseAction, dest='verbose')
cmdline_parser.add_argument("-f", "--format", default="csv", choices=["csv", "gnuplot"],
                    help="output format [default: csv]")
cmdline_args = cmdline_parser.parse_args()
pyfaf.verbosity = cmdline_args.verbose

# key: datetime.date
# value: dictionary
#    key: operating system release name
#    value: ids of users that used ABRT in last 30 days
events = {}

def add_event(date_time, os_release, user_id):
    user_id = str(user_id)
    for day in range(0, 30):
        dest_date = date_time.date() + datetime.timedelta(day)
        if dest_date in events:
            if os_release in events[dest_date]:
                if user_id not in events[dest_date][os_release]:
                    events[dest_date][os_release].append(user_id)
            else:
                events[dest_date][os_release] = [user_id]
        else:
            events[dest_date] = { os_release:[user_id] }

# Get a list of all bugs from cache.
pyfaf.log1("Searching local cache for bugs.\n")
bug_id_list = pyfaf.run.cache_list_id("rhbz-bug")
pyfaf.log1("Searching {0} local bugs for users.\n".format(len(bug_id_list)))
offset = 0
for bug_id in bug_id_list:
    offset += 1
    if cmdline_args.verbose:
        pyfaf.log2("[{0}/{1}] #{2}\n".format(offset, len(bug_id_list), bug_id))
    bug = pyfaf.run.cache_get("rhbz-bug", bug_id)
    if "abrt_hash" not in bug.whiteboard:
        continue

    # First event is that user created the bug
    #print "Added from bug", bug.id
    os_release = "{0} {1}".format(bug.product, bug.product_version)
    add_event(bug.creation_time, os_release, bug.creator_id)

    # Let's examine the history of CC.
    for history in bug.history:
        if history.field != "cc":
            continue
        if history.added is None:
            continue
        if "," in history.added:
            continue # skip when added multiple emails
        if history.removed is not None:
            continue
        # Check that the user added his/her own email to CC.
        user = pyfaf.run.cache_get("rhbz-user", history.user_id)
        if history.added in [user.email, user.name]:
            add_event(history.time, os_release, history.user_id)

def all_os_releases(events):
    os_releases = set()
    for os_releases_dict in events.values():
        os_releases.update(os_releases_dict.keys())
    return list(os_releases)

os_releases = sorted(all_os_releases(events))
if cmdline_args.format == "csv":
    sys.stdout.write("{0}\n".format(",".join(["date"] + os_releases)))
    for date in sorted(events.keys()):
        line = [date.strftime("%Y-%m-%d")]
        for os_release in os_releases:
            if os_release in events[date]:
                line.append(len(events[date][os_release]))
            else:
                line.append(0)
        sys.stdout.write("{0}\n".format(",".join(line)))
elif cmdline_args.format == "gnuplot":
    sys.stdout.write("set terminal pdf color\n")
    sys.stdout.write("set output \"abrt-users.pdf\"\n")
    sys.stdout.write("set grid\n")
    sys.stdout.write("set autoscale xfix\n")
    sys.stdout.write("set key left top\n")
    sys.stdout.write("set title \"ABRT users in Fedora over time (used ABRT at least once in 30 days)\"\n")
    sys.stdout.write("set xdata time # input for X axis contains time\n")
    sys.stdout.write("set timefmt \"%Y-%m-%d\" # input time format\n")
    sys.stdout.write("set format x \"%Y-%m\" # output format on axis X\n")
    sys.stdout.write("set xtics 2592000 rotate\n")
    sys.stdout.write("set style fill solid border rgb 'black'\n")
    for i in range(0, len(os_releases)):
        os_release = os_releases[i]
        if i == 0:
            sys.stdout.write("plot \'-\' using 1:2 \\\n")
        else:
            sys.stdout.write("    \'-\' using 1:2 \\\n")
        sys.stdout.write("    title \"{0}\" \\\n".format(os_release))
        if i < len(events) - 1:
            sys.stdout.write("    with filledcurve x1, \\\n")
        else:
            sys.stdout.write("    with filledcurve x1\n")

    for os_release in os_releases:
        accum = 0
        for date in sorted(events.keys()):
            for daily_os_release in events[date]:
                if daily_os_release >= os_release:
                    accum += events[date][daily_os_release]
            sys.stdout.write("{0} {1}\n".format(date.strftime("%Y-%m-%d"), accum))
        sys.stdout.write("e\n")
