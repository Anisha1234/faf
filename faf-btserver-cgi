#!/usr/bin/python
# Copyright (C) 2011 Red Hat, Inc.
# Copyright (C) 2011 Jan Smejda
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import cgi
import subprocess
import sys
import os
import re
import tempfile

component_parser = re.compile("^[a-zA-Z0-9\-\.\_\+]+$")

form = cgi.FieldStorage()
backtrace = form.getvalue('backtrace')
component = form.getvalue('component')

global msg, retcode
msg = ""
check = False

# Get similar backtraces if we received one.
if backtrace and component:
    check = True
    # Store the received backtrace to a temporary file that can be
    # passed to faf-btserver-distance.
    bt_file = tempfile.NamedTemporaryFile(mode="w", delete=False)
    # compatibility
    bt_file.write(backtrace.replace("\r\n", "\n"))
    bt_file.close()

    if not component_parser.match(component):
        msg = "ERROR: Invalid component name"
    else:
        bt_args = ['faf-btserver-distance', component, bt_file.name]
        bt_proc = subprocess.Popen(bt_args, stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout, stderr = bt_proc.communicate()

        if bt_proc.returncode == 2:
            msg = "ERROR: Failed to parse backtrace.\n{0}".format(stderr)
        elif bt_proc.returncode == 3:
            msg = "ERROR: No component found for given backtrace.\n".format(stderr)
        elif bt_proc.returncode:
            msg = "ERROR: faf-btserver-distance exited with {0}.\n{1}".format(bt_proc.returncode, stderr)
        else:
            msg = stdout.strip()

    try:
        os.unlink(bt_file.name)
    except OSError as ex:
        msg += "\nWarning: Unable to unlink temporary file" \
               " '{0}': {1}".format(bt_file.name, str(ex))

# Return text/html if the client is able to handle it
if "HTTP_ACCEPT" in os.environ and "text/html" in os.environ["HTTP_ACCEPT"]:
    proto = "http"
    if "HTTPS" in os.environ and os.environ["HTTPS"] == "on":
        proto = "https"
    url_self = "{0}://{1}{2}".format(proto, os.environ["HTTP_HOST"],
                                     os.environ["SCRIPT_NAME"])

    htmlmsg = []
    lines = msg.split("\n")
    if msg.startswith("ERROR"):
        htmlmsg = lines
    else:
        for line in lines:
            # skip empty lines
            if not line:
                continue

            words = line.split(" ")
            if words[0] == "SHOW":
                htmlmsg.append(line[len("SHOW "):])
            elif words[0] == "SAVE":
                if words[1] == "DUPLICATE":
                    htmlmsg.append("Your problem is a duplicate of bug #{0}.".format(words[2]))
                    break
                elif words[1] == "CANDIDATE":
                    # at the moment message is emitted by faf-btserver-distances
                    pass

        if not htmlmsg and check:
            htmlmsg = ["No duplicates were found for your problem."]

    # Form for backtrace imports.
    lines = [
              "<!DOCTYPE HTML>",
              "<html>",
              "  <head>",
              "    <title>Backtrace analyzing page</title>",
              "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />",
              "    <style type=\"text/css\">",
              "      #ToDo",
              "    </style>",
              "  </head>",
              "  <body>",
              "    <form action=\"{0}\" method=\"post\">".format(url_self),
              "      <div>Backtrace:</div>",
              "      <div><textarea name=\"backtrace\"></textarea></div>",
              "      <div>Component: <input type=\"text\" name=\"component\" /></div>",
              "      <div><input type=\"submit\" value=\"Submit\" /></div>",
              "    </form>",
              "    <div>",
              "      {0}".format("<br />\n".join(htmlmsg)),
              "    </div>",
              "  </body>",
              "</html>",
            ]

    output = "\n".join(lines)

    print "Content-Type: text/html"
    print "Content-Length: {0}".format(len(output))
    print
    print output

# Return text/plain by default
else:
    print "Content-type: text/plain"
    print
    if not check:
        print "You must specify 'backtrace' and 'component' in POST."
    elif not msg:
        print "No duplicates were found for your problem."
    else:
        print msg
