#!/usr/bin/python
# Copyright (C) 2012 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import pyfaf
import logging
from pyfaf.storage.report import (ReportPackage, ReportUnknownPackage)

# Command line argument processing
cmdline_parser = pyfaf.argparse.ArgumentParser(description="Convert ReportUnknownPackage to ReportPackage.")
cmdline_args = cmdline_parser.parse_args()

db = pyfaf.storage.Database(debug=cmdline_args.verbose > 2)

unknown_packages = db.session.query(ReportUnknownPackage).all()

for i, unknown_package in enumerate(unknown_packages):
    logging.info("[{0} / {1}] Processing unknown package {2} from report #{3}.".\
            format(i + 1, len(unknown_packages), unknown_package.name, unknown_package.report_id))
    os = { "name": unknown_package.report.component.opsys.name,
           "version":  unknown_package.report.component.opsysreleases[0].release.version }
    installed_package = pyfaf.ureport.get_package({
        "name": unknown_package.name,
        "epoch": unknown_package.installed_epoch,
        "version": unknown_package.installed_version,
        "release": unknown_package.installed_release,
        "architecture": unknown_package.installed_arch.name }, os, db)

    if not installed_package:
        logging.info("Installed package not found, skipping.")
        continue

    if unknown_package.running_arch_id:
        running_package = pyfaf.ureport.get_package({
            "name": unknown_package.name,
            "epoch": unknown_package.running_epoch,
            "version": unknown_package.running_version,
            "release": unknown_package.running_release,
            "architecture": unknown_package.running_arch.name}, os, db)
        if not running_package:
            logging.info("Running package not found, skipping.")
            continue
    else:
        running_package = None

    report_package = db.session.query(ReportPackage).\
            filter((ReportPackage.report == unknown_package.report) & \
                   (ReportPackage.type == unknown_package.type) & \
                   (ReportPackage.installed_package == installed_package) & \
                   (ReportPackage.running_package == running_package)).first()

    if report_package:
        report_package.count += unknown_package.count
    else:
        report_package = ReportPackage()
        report_package.report = unknown_package.report
        report_package.type = unknown_package.type
        report_package.installed_package = installed_package
        report_package.running_package = running_package
        report_package.count = unknown_package.count
        db.session.add(report_package)

    db.session.delete(unknown_package)
    db.session.flush()
