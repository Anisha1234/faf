\input texinfo
@c faf.texi - Faf Manual
@setfilename faf.info
@include version.texi
@settitle Faf @value{VERSION} Manual
@copying
This manual is for Faf version @value{VERSION}, a programmable platform
for analysis of packages, packaging issues, bug reports and other
artifacts produced within Fedora operating system development.

Copyright @copyright{} 2010, 2011 Karel Klic

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end quotation
@end copying

@dircategory faf
@direntry
* faf: (faf).       Analysis framework for Fedora.
@end direntry

@defcodeindex op
@synindex pg cp


@titlepage
@title Faf
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Karel Klic (@email{kklic@@redhat.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top faf

This manual is for Faf (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

@menu
* Overview of Faf::
* Installation::
* High-level operations::
* Low-level operations::
* Internals::
* Future work::
* Copying This Manual::
* GNU Free Documentation License::
* Index::
@end menu

@node Overview of Faf
@chapter Overview of Faf
@cindex overview, Faf

@code{Faf} is a programmable platform for analysis of packages,
packaging issues, bug reports and other artifacts produced within Fedora
operating system development.

It focuses on having a lot of features and transparency that allows to
inspect what went wrong and how things work. For this project, those
values are more important than performance or integration within Fedora.

When a script investigating some aspect of Fedora needs to be written,
usual workflow include usage of one or more web services and command
line tools:
@itemize
@item
Red Hat Bugzilla, accessible via @code{/usr/bin/bugzilla} from the
python-bugzilla package
@item
Bodhi, package update management system, accessible via
@code{/usr/bin/bodhi} from the bodhi-client package
@item
Package Database, @code{/usr/bin/fedoradev-pkgowners} from the
fedora-packager package
@item
Account System
@item
Git or @code{/usr/bin/fedpkg} from the fedpkg package
@item
Koji
@end itemize
Basic operations are easily achievable using available tools, but many
are not. Remote data are always changing. Data are available via slow
and unreliable interfaces with many small inconsistencies.

All this makes analysis of some Fedora aspects too difficult.
Development and debugging of long-running scripts fetching data from
multiple remote locations is too often twisted to getting the basic
communication work, as opposed to capturing valuable knowledge and
experimenting with data and code.

@code{Faf} makes several abstractions in this area. First, it separates
data downloading from actual analysis/work/checking. Bug reports,
comments, attachments, package builds, build logs, and RPMs are
downloaded to local cache using separate tools as needed.  All entries
are stored in normalized, easily understandable text format, removing
many inconsistencies between various services. Data can be manually
checked using basic tools like @code{cat} and @code{grep}.

Faf tools that pull data from external sources to local cache:
@itemize
@item
faf-koji-pull-builds-fedora - Retrieves builds and build logs from the
Fedora Koji to the local cache.
@item
faf-koji-pull-rpms - Retrieve rpms from the Fedora Koji for builds in
the local cache.
@item
faf-koji-pull-tags - Retrieve build tags from the Fedora Koji.
@item
faf-fedora-pkgdb-pull-collections - Retrieve package collections from
the Fedora Package Database.
@item
faf-fedora-pkgdb-pull-packages - Retrieve package metadata from the
Fedora Package Database.
@item
faf-bugzilla-pull-bugs-abrt - Retrieve ABRT bugs from the Red Hat
Bugzilla.
@item
faf-bugzilla-pull-attachments - Retrieve attachments from the Red Hat
Bugzilla for the bug reports stored in the local cache.
@item
faf-bugzilla-pull-comments - Retrieve comments from the Red Hat Bugzilla
for the bug reports stored in the local cache.
@item
faf-bugzilla-pull-users - Retrieve users from the Red Hat Bugzilla for
the bug reports stored in the local cache.
@end itemize

Faf tools that can manually query external sources:
@itemize
@item
faf-koji - Query a Koji instance for build tags, builds, and RPMs.
@item
faf-fedora-pkgdb - Query Fedora Package Database for package collections
and package metadata.
@item
faf-bugzilla - Connect to the Red Hat Bugzilla and perform bug, comment,
attachment, and user queries.
@end itemize

Faf tools that analyze ABRT bugs and handle the discovered issues:
@itemize
@item
faf-abrt-backtraces
@item
faf-abrt-check-reports - Check ABRT-reported bugs from Red Hat Bugzilla
to find various issues with ABRT. Discovers low quality and unparsable
backtraces, missing or invalid duplicate duplicate hashes.
@item
faf-abrt-dup-bugs - Find ABRT bug reports with very similar backtraces.
@item
faf-abrt-dup-improvements
@end itemize

Faf tools that analyze debuginfo packages and report issues:
@itemize
@item
faf-debuginfo-analyze-builds - Analyze all builds and store discovered
issues to the local cache.
@item
faf-debuginfo-analyze-build - Analyze single build for debuginfo
problems and store discovered issues to the local cache.
@item
faf-debuginfo-build-debugsources
@item
faf-debuginfo-report-bugzilla - Report issues found by
faf-debuginfo-analyze-build to the Red Hat Bugzilla.
@item
faf-debuginfo-report-log - Create a logfile containing all the issues
found by faf-debuginfo-analyze-build. The issues are taken from the
local cache. Use faf-debuginfo-analyze-latest-builds to fill the cache
with issues.
@end itemize

Faf tools that generate statistics and graphs from local storage:
@itemize
@item
faf-stats-abrt-bugs-closed - Generate a report about ABRT bugs closed
(resolved) in various ways in Red Hat Bugzilla over time.
@item
faf-stats-abrt-bugs-opened - Generate a report about new ABRT bugs being
opened in Red Hat Bugzilla over time.
@item
faf-stats-abrt-bugs-remaining-opened - Generate a report about the ABRT
bugs remaining opened in Red Hat Bugzilla over time.
@item
faf-stats-abrt-crashes - Generate a report about the number of reported
ABRT crashes compared to the number of bugs in Red Hat Bugzilla. Several
crashes from various people might be reported in a single bug.
@item
faf-stats-abrt-development
@item
faf-stats-abrt-users - Generate a report containing the number of Fedora
users using ABRT to report problems.
@end itemize

Other tools:
@itemize
@item
faf-cache - Manage and investigate data in local cache.
@item
faf-chroot
@end itemize


@node Installation
@chapter Installation

Faf requires POSIX-oriented operating system. It is supported on Fedora
14+ and RHEL 6+, but it should run on other systems too, given that its
dependencies are available on the system.

It requires user @code{faf} and group @code{faf} to be present.

Faf requires any Python in version between 2.6 and 2.7. Python 3.x is
not currently supported. To support Python 3.x, RPM's Python module
needs to support it first. See
@uref{https://bugzilla.redhat.com/show_bug.cgi?id=531543, Red Hat
Bugzilla bug #531543} for the status of this. Faf also needs
@code{rpmUtils.miscutils} Python module that is present in YUM, but it
should be possible to replace it easily with custom implementation or
internal copy.

@c @section High-level operations
@c @subsection Get updates with faf pull
@c @subsection Trace ABRT-reported bugs
@c @subsection Generate statistics
@c @section Low-level operations
@c General faf structure
@c @section Common workflow

@node High-level operations
@chapter High-level operations

@c @section @code{faf pull}
@c @section @code{faf abrt}
@c @section @code{faf stats}
@c @section @code{faf upstream}
@c @section Implementing your own operations

@node Low-level operations
@chapter Low-level operations

@c @section @code{faf cache}
@c @section @code{faf config}
@c @section @code{faf bugzilla}
@c @section @code{faf pkgdb}
@c @section @code{faf accounts}
@c @section @code{faf updates}

@node Internals
@chapter Internals

@c @section pyfaf
@section External dependencies

texinfo

python-fedora

@node Future work
@chapter Future work

@section ABRT-reported duplicates

Backtrace similarity code (needs btparser improvements).

@section Requires check

- check that RPM provides all their libraries
- check that RPM requires all what its binaries and libraries provide
- check that what RPM requires is available in the repository
- check that replacing older RPM with the new one did not affect
  Requires or BuildRequires of some other RPM
- check that what RPM BuildRequires is available in the repository
- check that two RPMs do not provide the same item

@section RPM update check

- Check if a patch is added to SRPM and it is also added to the spec
  file, but is not applied

@section Manpages check

- See rpmlint
- Check via hunspell (custom dictionary needed)
- Check using option comparator
- Check manpage-binary package dependencies
- Check config file paths in manpages (/etc/...), they might be wrong.

@section Debuginfo check

@section Paths check

- check path collisions
- check file permissions in directories with known purpose
- see http://fedoraproject.org/wiki/Packaging:Conflicts
- filenames that contain non-ASCII characters must be encoded as UTF-8.
- symlinks does not point to file in package which is not installed

@section Parse build logs

Parse important GCC warnings.

Scan build logs for "operation not permitted" and other failures
"operation not permitted" is shown in Emacs.

@section Security
http://people.redhat.com/sgrubb/files/rpm-chksec

@section Package review

- The spec file name must match the base package %@{name@}, in the
  format %@{name@}.spec unless your package has an exemption.
- The package must be licensed with a Fedora approved license and meet
  the Licensing Guidelines. (check for disapproved licences)
- The License field in the package spec file must match the actual
  license. (check the COPYING file etc.)
- If (and only if) the source package includes the text of the
  license(s) in its own file, then that file, containing the text of
  the license(s) for the package must be included in %doc.
- The sources used to build the package must match the upstream
  source, as provided in the spec URL. Reviewers should use md5sum for
  this task. If no upstream URL can be specified for this package,
  please see the Source URL Guidelines for how to deal with this.
- The spec file MUST handle locales properly. This is done by using
  the %find_lang macro. Using %@{_datadir@}/locale/* is strictly
  forbidden.
- Every binary RPM package (or subpackage) which stores shared library
  files (not just symlinks) in any of the dynamic linker's default
  paths, must call ldconfig in %post and %postun.
- Packages must NOT bundle copies of system libraries.
- A package must own all directories that it creates. If it does not
  create a directory that it uses, then it should require a package
  which does create that directory.
- A Fedora package must not list a file more than once in the spec
  file's %files listings. (Notable exception: license texts in
  specific situations)
- Permissions on files must be set properly. Executables should be set
  with executable permissions, for example. Every %files section must
  include a %defattr(...) line
- If a package includes something as %doc, it must not affect the
  runtime of the application. To summarize: If it is in %doc, the
  program must run properly if it is not present.
- Header files must be in a -devel package.
- Static libraries must be in a -static package
- If a package contains library files with a suffix
  (e.g. libfoo.so.1.1), then library files that end in .so (without
  suffix) must go in a -devel package.
- In the vast majority of cases, devel packages must require the base
  package using a fully versioned dependency: Requires:
  %@{name@}%@{?_isa@} = %@{version@}-%@{release@}
- Packages must NOT contain any .la libtool archives, these must be
  removed in the spec if they are built.
- Packages containing GUI applications must include a %@{name@}.desktop
  file, and that file must be properly installed with
  desktop-file-install in the %install section. If you feel that your
  packaged GUI application does not need a .desktop file, you must put
  a comment in the spec file with your explanation.
- Packages must not own files or directories already owned by other
  packages. The rule of thumb here is that the first package to be
  installed should own the files or directories that other packages
  may rely upon. This means, for example, that no package in Fedora
  should ever share ownership with any of the files or directories
  owned by the filesystem or man package. If you feel that you have a
  good reason to own a file or directory that another package owns,
  then please present that at package review time.
- All filenames in rpm packages must be valid UTF-8.
- Usually, subpackages other than devel should require the base
  package using a fully versioned dependency.
- The placement of pkgconfig(.pc) files depends on their usecase, and
  this is usually for development purposes, so should be placed in a
  -devel pkg. A reasonable exception is that the main pkg itself is a
  devel tool not installed in a user runtime, e.g. gcc or gdb.

- all Fedora packages must be named using only the following ASCII
characters. These characters are displayed here:
abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789-._+
- Conflicting package names, even if they differ by case alone, are
  not allowed.
- No inclusion of pre-built binaries or libraries.  Remove all
  pre-built program binaries and program libraries in %prep prior to
  the building of the package. Examples include, but are not limited
  to, *.class, *.dll, *.DS_Store, *.exe, *.jar, *.o, *.pyc, *.pyo,
  *.egg, *.so files.
- Binaries placed into /bin and /sbin must not depend upon libraries
  stored in /usr/lib (or /usr/lib64). Binaries which depend on
  libraries in /usr/lib* must live in either /usr/bin or /usr/sbin.
- Rpmlint errors
- The Packager tag should not be used in spec files.
- The Vendor tag should not be used.
- The Copyright tag is deprecated. Use the License tag instead.
- The Summary tag value should not end in a period.
- Usually, the PreReq tag should be replaced by plain Requires.
- The Source tag documents where to find the upstream sources for the
  rpm. In most cases this should be a complete URL to the upstream
  tarball. For special cases, please see the Packaging:SourceURL
  Guidelines
- Be very careful to watch especially the configure part of the build
  process for missing optional libraries or tools that are desirable
  for the package. (check for .pc file checks in configure)
- Files marked as documentation must not cause the package to pull in
  more dependencies than it would without the documentation. One
  simple way to ensure this is to remove all executable permissions
  from %doc files (chmod -x).
- Sometimes, code will hardcode specific library paths when linking
  binaries (using the -rpath or -R flag). This is commonly referred to
  as an rpath. Normally, the dynamic linker and loader (ld.so) resolve
  the executable's dependencies on shared libraries and load what is
  required. However, when -rpath or -R is used, the location
  information is then hardcoded into the binary and is examined by
  ld.so in the beginning of the execution. Since the Linux dynamic
  linker is usually smarter than a hardcoded path, we usually do not
  permit the use of rpath in Fedora. There is a tool called
  check-rpaths which is included in the rpmdevtools package. Any rpath
  flagged by check-rpaths MUST be removed.
- When a program installs internal libraries they are often not
  installed in the system path. These internal libraries are only used
  for the programs that are present in the package (for example, to
  factor out code that's common to the executables). These libraries
  are not intended for use outside of the package. When this occurs,
  it is acceptable for the programs within the package to use an rpath
  to find these libraries.
- Don't use %config or %config(noreplace) under /usr. /usr is deemed
  to not contain configuration files in Fedora.
- .desktop file correct usage, syntax, contents
- MUST run desktop-file-install OR desktop-file-validate in %install
  (and have BuildRequires: desktop-file-utils), to help ensure
  .desktop file safety and spec-compliance. desktop-file-install MUST
  be used if the package does not install the file or there are
  changes desired to the .desktop file (such as add/removing
  categories, etc). desktop-file-validate MAY be used instead if the
  .desktop file's content/location does not need modification.
- Fedora's RPM includes a %makeinstall macro but it must NOT be used
  when make install DESTDIR=%@{buildroot@} works.
- All macros in Summary: and %description need to be expandable at
  srpm buildtime. Because SRPMs are built without the package's
  BuildRequires installed, depending on macros defined outside of the
  spec file can easily lead to the unexpanded macros showing up in the
  built SRPM.
- Packages which use files itemized as Source# files, must refer to
  those files by their Source# macro name, and must not use
  $RPM_SOURCE_DIR or %@{sourcedir@} to refer to those files.
- If the package includes translations, add BuildRequires: gettext
- Scriplets are only allowed to write in certain directories. Build
  scripts of packages (%prep, %build, %install, %check and %clean) may
  only alter files (create, modify, delete) under %@{buildroot@},
  %@{_builddir@} and valid temporary locations like /tmp, /var/tmp (or
  $TMPDIR or %@{_tmppath@} as set by the rpmbuild process)
  according to the matrix on wiki page
- Note that the %pretrans scriptlet will, in the particular case of
  system installation, run before anything at all has been
  installed. This implies that it cannot have any dependencies at
  all. For this reason, %pretrans is best avoided, but if you must use
  it, the script must be written in Lua.
- Web applications packaged in Fedora should put their content into
  /usr/share/%@{name@} and NOT into /var/www/.
- The "alternatives" tool provides a means for parallel installation
  of packages which provide the same functionality by maintaining sets
  of symlinks. Check correct usage.
- Fonts in general-purpose formats such as Type1, OpenType TT (TTF) or
  OpenType CFF (OTF) are subject to specific packaging guidelines (1),
  and should never be packaged in a private application directory
  instead of the system-wide font repositories.
- Some applications have specific guidelines written for them, located
  on their own pages in the Packaging: Namespace.

@section Detect arch packages which should be noarch

@section Generate -ast packages (abstract syntax tree)

@section SELinux policy checker

Jak se zmenili labels u baliku (rpmdiff) pri posledni policy, kdyz se
napr. nejaky soubor presunul.

Otestovat jake syscally pouziva binarka (pomoci DWARF), a porovnat s tim
jake syscally ma povolene v policy. -- to nestaci, jsou potreba resit
parametry syscallu.

@section Check `yum whatprovides *lint` for fools to be run on packages

xmllint, pylint, rpmlint, eu-elflint, eu-dwarflint

@section Check that package has proper dependencies

They depend on binaries, so libs, spec file contents and policy. Policy
example: emacs-el packages should depend on exact version-release of
main package.

@section Special checks for languages

ruby (rubygems compatibility etc.)
python (eg. imports should exist in requires)
java

@section Check that package is compiled with Fedora's GCC options (stack protector etc.).

@section Licensing

Licensing dependencies (GPLv2 depending on GPLv3+ library) and license
of individual files. Also subpackages not depending on the base package
containing the license should include the license file themselves.

@section Emacs

This site has duplicate Lisp libraries with the same name.
If a locally-installed Lisp library overrides a library in the Emacs
release, that can cause trouble, and you should probably remove the
locally-installed version unless you know what you are doing.
/usr/share/emacs/site-lisp/flim/sasl-digest hides
/home/karel/devel/hatchery/emacs/emacs-24.0.50/lisp/net/sasl-digest

@node Copying This Manual
@chapter Copying This Manual
@pindex copying
@cindex copying this manual

@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye
